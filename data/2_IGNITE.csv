id,summary,description,labels,components_name,project_name,issue_type_name,priority_name,created_date,assignee
13392046,Thin 3.0: Live Schema,Implement live schema support in ClientTupleBuilder. See LiveSchemaTupleBuilderImpl for reference. This mode should be activated only when schemaMode is LIVE_SCHEMA - we'll need to propagate table properties to the client.,ignite-3,['thin client'],IGNITE,Improvement,Major,2021-07-27 07:21:05,0
13390733,Fix javadoc in Schema and Table modules.,"Let's fix Javadoc styles regarding the policy.

Startpoint is to remove modules from excludes and run 

{code:java}
mvn clean checkstyle:checkstyle-aggregate -P javadoc-public-api
{code}
",ignite-3,[],IGNITE,Bug,Major,2021-07-19 15:04:18,1
13390729,Fix javadoc in Api and Core modules.,"Let's fix Javadoc styles regarding the policy.

Startpoint is to remove modules from excludes 

{noformat}
./check-rules/checkstyle-disabled-modules.xml
{noformat}

and run 

{code:java}
mvn clean checkstyle:checkstyle-aggregate -P javadoc-public-api
{code}
",ignite-3,[],IGNITE,Bug,Major,2021-07-19 14:42:30,1
13389450,Support CDC for in-memory caches,"Right now CDC is supported only for persistent caches.
To support CDC feature for in-memory caches we should support enabling WAL for in-memory caches.

Only DataRecord is required for CDC so we can write only specific that types of records to the WAL.",IEP-59,[],IGNITE,Improvement,Major,2021-07-13 18:44:56,2
13389394,SQL tests for extension to write CDC data to Kafka,Tests should be extended to cover replication of SQL tables.,IEP-59,['extensions'],IGNITE,Improvement,Major,2021-07-13 13:37:48,2
13388647,Schema events processing refactoring.,"All table events with schema events are processed in TableManager listener.

Let's 
* Replace ConfigurationListener with ConfigurationNamedListListener to simplify the diff calculation between old/new configs.
* Register a separate per-table listener for schema events on table creation.",ignite-3,[],IGNITE,Improvement,Major,2021-07-09 13:31:14,1
13387935,Extended tests for extension to write CDC data to Kafka,Tests should be extended to cover REPLICATED vs. PARTITIONED caches.,IEP-59,[],IGNITE,Improvement,Major,2021-07-06 13:10:37,2
13385409,.NET: Build fails on 2.1.808 and other older SDKs,"* Install .NET SDK 2.1.808
* Build the project with build.ps1

Build fails due to inspection issues.",.NET,['platforms'],IGNITE,Bug,Blocker,2021-06-23 11:56:45,0
13385368,Develop thin client protocol for Ignite 3.0,"We need to develop thin client protocol, document a solution as IEP and discuss it on dev list  before we can start working on implementing it.",iep-76,['thin client'],IGNITE,Task,Major,2021-06-23 09:17:39,0
13384809,Schema update. Rename column.,"Implement evolution converters for rename column schema operation.

Configuration changes should trigger a new schema version adding to schema history.
Assumes, all nodes will use a new schema after the upgrade.
An old row can be upgraded on-fly using evolution converters.

",iep-54 ignite-3,[],IGNITE,Improvement,Major,2021-06-21 08:47:11,1
13383358,Schema update. Changing default value.,"Implement evolution converters for changing column default value operation.

Configuration changes should trigger a new schema version adding to schema history.
Assumes, all nodes will use a new schema after upgrade.
Old row can be upgraded on fly using evolution converters.",iep-54 ignite-3,[],IGNITE,Improvement,Major,2021-06-11 08:59:34,1
13383186,Investigate options for thin client marshalling in 3.0,We need to investigate available options for serialisation/deserialisation for 3.0 thin client protocol and propose those options for discussion on the dev list.,iep-75 ignite-3,['thin client'],IGNITE,Task,Major,2021-06-10 13:08:29,0
13382986,Schema update. Merge multiple converters stages.,"Assumed schema was updated a number of times and there are n >1 converters to apply.

Let's chain converters  to apply all at once rather then one-by-one having a row of intermediate version in between.

Also, opposite changes like  ""adding column A"" then ""remove column A"" or
""Changing column default"" then ""remove column A"" can be effectively omitted.",iep-54 ignite-3,['sql'],IGNITE,Improvement,Major,2021-06-09 15:10:19,1
13382985,Schema update. Add and remove column.,"Implement evolution converters for add/remove column schema operations.

Configuration changes should trigger a new schema version adding to schema history.
Assumes, all nodes will use a new schema after upgrade.
Old row can be upgraded on fly using evolution converters.

",iep-54 ignite-3,['sql'],IGNITE,Improvement,Major,2021-06-09 15:01:49,1
13382454,Save DataEntry index inside CDC state,CDC state should contain an index of DataEntry inside DataRecord to correctly failover.,IEP-59,[],IGNITE,Bug,Major,2021-06-07 11:37:17,2
13382188,.NET: Thin client fails to compute hash code for string and array keys,"String keys are not supported in BinaryHashCodeUtils. The following code throws ""Failed to compute hash code for object"" exception:

{code}
            var server = Ignition.Start();

            var client = Ignition.StartClient(new IgniteClientConfiguration
            {
                Endpoints = new[] {""127.0.0.1""},
                EnablePartitionAwareness = true
            });

            var cache = client.CreateCache<string, string>(""c"");
            cache.Put(""hello"", ""world"");
{code}",.NET,"['platforms', 'thin client']",IGNITE,Bug,Critical,2021-06-04 16:23:31,0
13382175,All data comited before node stop should become available for CDC consumer,"Ignite should make sure that all data committed before node stop are available to CDC consumer in case graceful shutdown. Basically, this means Ignite should execute the current WAL segment archivation on node stop.

Possible test to check it:
{code:java}

    /** */
    @Test
    @Ignore(""Not implemented yet"")
    public void testReadAfterNodeStop() throws Exception {
        cleanPersistenceDir();

        AtomicInteger cnt = new AtomicInteger();

        TestCDCConsumer cnsmr = new TestCDCConsumer();

        // Restart node several time to make sure we can continue after gracefull shutdown.
        for (int restarts = 0; restarts < 2; restarts++) {
            IgniteConfiguration cfg = getConfiguration(""ignite-0"");

            Ignite ign = startGrid(cfg);

            ign.cluster().state(ACTIVE);

            long startCnt = cnt.get();

            runAsync(() -> {
                IgniteCache<Integer, User> cache = ign.getOrCreateCache(DEFAULT_CACHE_NAME);

                while (true) {
                    int key = cnt.getAndIncrement();

                    try {
                        cache.put(key, createUser(key));
                    }
                    catch (Exception e) {
                        cnt.decrementAndGet();

                        throw e;
                    }
                }
            });

            waitForCondition(() -> cnt.get() - startCnt > KEYS_CNT, getTestTimeout());

            ign.close();

            ChangeDataCapture cdc = new ChangeDataCapture(cfg, null, cdcConfig(cnsmr));

            IgniteInternalFuture<?> fut = runAsync(cdc);

            assertTrue(waitForSize(cnt.get(), DEFAULT_CACHE_NAME, UPDATE, getTestTimeout(), cnsmr));

            fut.cancel();

            List<Integer> keys = cnsmr.keys(UPDATE, cacheId(DEFAULT_CACHE_NAME));

            assertTrue(cnt.get() <= keys.size());

            for (int i = 0; i < cnt.get(); i++)
                assertTrue(keys.contains(i));
        }
    }

{code}",IEP-59,[],IGNITE,Improvement,Major,2021-06-04 15:29:25,2
13381484,.NET: Replace FxCop with Roslyn-based analyzers,"* FxCop is deprecated long time ago
* It is Windows-only

Remove FxCop and set up build-time Roslyn-based code analysis in DotNetCore solution:
https://docs.microsoft.com/en-us/visualstudio/code-quality/install-net-analyzers",.NET,['platforms'],IGNITE,Improvement,Major,2021-06-01 15:27:18,0
13381295,.NET: Inspections fail due to TC upgrade,Platform .NET (Inspections) project fails with 370 new errors after some upgrades on TC.,.NET,['platforms'],IGNITE,Bug,Major,2021-05-31 13:52:13,0
13381294,.NET: Streamer example uses deprecated API,Streamer example uses deprecated AddData method,.NET,['platforms'],IGNITE,Bug,Minor,2021-05-31 13:41:26,0
13380405,".NET: If bash not installed on pod, ignite fails to start","If bash is not installed, you get the following exception on startup:
{code:c#}
System.TypeInitializationException: The type initializer for 'Apache.Ignite.Core.Impl.Unmanaged.Jni.JvmDll' threw an exception.
 ---> System.TypeInitializationException: The type initializer for 'Apache.Ignite.Core.Impl.Unmanaged.Os' threw an exception.
 ---> System.ComponentModel.Win32Exception (2): No such file or directory
   at System.Diagnostics.Process.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean usesTerminal, Boolean throwOnNoExec)
   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)
   at System.Diagnostics.Process.Start()
   at Apache.Ignite.Core.Impl.Shell.Execute(String file, String args)
   at Apache.Ignite.Core.Impl.Shell.BashExecute(String args)
   at Apache.Ignite.Core.Impl.Unmanaged.Os..cctor()
   --- End of inner exception stack trace ---
   at Apache.Ignite.Core.Impl.Unmanaged.Os.get_IsWindows()
   at Apache.Ignite.Core.Impl.Unmanaged.Jni.JvmDll..cctor()
   --- End of inner exception stack trace ---
   at Apache.Ignite.Core.Impl.Unmanaged.Jni.JvmDll.Load(String configJvmDllPath, ILogger log)
   at Apache.Ignite.Core.Ignition.Start(IgniteConfiguration cfg)
{code}
",.NET,"['clients', 'platforms']",IGNITE,Bug,Major,2021-05-25 20:51:58,0
13380205,".NET: ClientFailoverSocket sets logger too late, resulting in null loggers downstream.","
Because the logger is set last inside of the {code:c#}ClientFailoverSocket{code} class, if there are issues with the {code:c#}GetIpEndpoints{code} call, an argument exception can occur when a debug message is logged inside of {code:c#}GetIps{code} when the ip address can't be parsed.  In my case, this occurred with a DNS failure.

Stack Trace:
{code:c#}
 System.ArgumentNullException: Value cannot be null. (Parameter 'logger')
 at Apache.Ignite.Core.Impl.Common.IgniteArgumentCheck.NotNull(Object arg, String argName)
 at Apache.Ignite.Core.Log.LoggerExtensions.Log(ILogger logger, LogLevel level, Exception ex, String message)
 at Apache.Ignite.Core.Log.LoggerExtensions.Debug(ILogger logger, Exception ex, String message)
 at Apache.Ignite.Core.Impl.Client.ClientFailoverSocket.GetIps(String host, Boolean suppressExceptions)
 at Apache.Ignite.Core.Impl.Client.ClientFailoverSocket.<GetIpEndPoints>d__11.MoveNext()
 at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
 at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
 at Apache.Ignite.Core.Impl.Client.ClientFailoverSocket..ctor(IgniteClientConfiguration config, Marshaller marsh, TransactionsClient transactions)
 at Apache.Ignite.Core.Impl.Client.IgniteClient..ctor(IgniteClientConfiguration clientConfiguration)
 at Apache.Ignite.Core.Ignition.StartClient(IgniteClientConfiguration clientConfiguration)
{code}

Here's the constructor code:
{code:c#}
            Debug.Assert(config != null);
            Debug.Assert(marsh != null);
            Debug.Assert(transactions != null);

            _config = config;
            _marsh = marsh;
            _transactions = transactions;

#pragma warning disable 618 // Type or member is obsolete
            if (config.Host == null && (config.Endpoints == null || config.Endpoints.Count == 0))
            {
                throw new IgniteClientException(""Invalid IgniteClientConfiguration: Host is null, "" +
                                                ""Endpoints is null or empty. Nowhere to connect."");
            }
#pragma warning restore 618

            _endPoints = GetIpEndPoints(config).ToList();

            if (_endPoints.Count == 0)
            {
                throw new IgniteClientException(""Failed to resolve all specified hosts."");
            }

            _logger = (_config.Logger ?? NoopLogger.Instance).GetLogger(GetType());

            ConnectDefaultSocket();
            OnFirstConnection();
{code}

Note how the _logger variable isn't set until the very end of the constructor.",.NET,"['clients', 'platforms']",IGNITE,Bug,Major,2021-05-24 23:03:11,0
13379748,Refactor GridResourceProcessor for reusage,"Logic to inject resource should be reused inside IgniteCDC to inject Logger, ApplicationContext, Spring bean, etc.

",IEP-59,[],IGNITE,Improvement,Major,2021-05-21 11:32:17,2
13379746,Wrong offset calculation for fix-sized column when nullmap is omitted.,Method _Row.fixlenColumnOffset()_ returns wrong result for columns if schema contains fixedsize columns only.,ignite-3,[],IGNITE,Bug,Major,2021-05-21 11:28:05,1
13379456,Improve row layout. Omit offset for the first varlen.,"Actually, there is no need to write varlen offset for the very first varlen column.
Therefore, vartable can be skipped if a single varlen column is defined for key and/or value.

 ",iep-54 ignite-3,['sql'],IGNITE,Improvement,Major,2021-05-20 08:17:01,1
13379293,Support Row with large values.,"h3. Motivation.

For now, TupleAssembler writes offsets for varlen columns as 2-byte \{{short }}type.
This implicitly restricts key/value sizes down to 64 kB in total.
On another side, for small rows that columns can be addressed with \{{byte}} type, we will waste few bytes.

h3. Description.
Let's
# allow 4 byte types (byte, short, int) for offsets.
# implement and benchmark different approaches that allow us to write rows in the most compact way.
# then choose and merge the best one.

We can introduce several formats for writing Vartable (using byte/short/int offsets).
Additional information about Vartable format can be coded into chunk flags.

The first approach is to precalculate chunk total size, then choose the most compact format and write a chunk.
The second approach is to write a chunk with the widest format then convert the chunk into the most compact format in place.
",iep-54 ignite-3,[],IGNITE,Improvement,Major,2021-05-19 13:02:36,1
13378837,Use enum sort order in index columns configuration.,"Now SortedIndexColumn interface has method that returns boolean for sort order.
{code:java}
boolean asc();{code}
Let's introduce a enum Sort with ASC/DESC values for this.",iep-54 ignite-3,[],IGNITE,Improvement,Trivial,2021-05-17 15:08:05,1
13377813,Use walForceArchiveTimeout instead of walAutoArchiveAfterInactivity,"It seems that we may always use

{{walForceArchiveTimeout}} instead of {{walAutoArchiveAfterInactivity}}, because only guarantee user needs is ""WAL records available in archive after timeout"".

This statement should be discussed on the dev-list to be sure we fully understand all use-cases for {{walAutoArchiveAfterInactivity}}",IEP-59,[],IGNITE,Improvement,Major,2021-05-11 08:46:43,2
13377307,".NET: Update documentation links in README, add README to NuGet","* README.md has links to old docs: https://github.com/apache/ignite/tree/master/modules/platforms/dotnet
* Add README to the NuGet package https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/",.NET,"['documentation', 'platforms']",IGNITE,Improvement,Trivial,2021-05-07 19:35:19,0
13376036,.NET: Assembly conflict when using POCO classes in compute of different peer-loaded version,"System.InvalidCastException: [A]DataTypes.ValueType cannot be cast to [B]DataTypes.ValueType. Type A originates from 'DataTypes, Version=1.0.0.1, Culture=neutral, PublicKeyToken=null' in the context 'Default' in a byte array. Type B originates from 'DataTypes, Version=1.0.0.2, Culture=neutral, PublicKeyToken=null' in the context 'Default' in a byte array.

Is it possible to load the correct one? This assumes the type is identical but assembly is different.",.NET,['platforms'],IGNITE,Bug,Major,2021-04-30 11:32:27,0
13375245,.NET: Improve DataStreamer API,"Currently, all {{AddData}} methods return a Task, however, this task is not for an individual add/remove operation, but for the current batch.

This is confusing: users often try to {{await}} the returned task, which is natural; but the task will never complete, because the batch is not yet full, and user code is stuck waiting.

* Deprecate {{AddData}}, {{RemoveData}} methods
* Add new {{void Add}} and {{void Remove}} methods
* Add new {{BatchTask}} property to get the task for the current batch",.NET,['platforms'],IGNITE,Improvement,Major,2021-04-27 07:33:24,0
13374687,.NET: Log a suggestion about COMPlus_EnableAlternateStackCheck,"See https://ignite.apache.org/docs/latest/net-specific/net-troubleshooting#stack-smashing-detected-dotnet-terminated:
On Linux, Java overwrites SIGSEGV handler installed by .NET, so NullReferenceException causes a scary ""Stack smashing detected"" error, which can be fixed by setting COMPlus_EnableAlternateStackCheck environment variable.

Write a suggestion to the log if all of the following is true:
* OS is Linux (or macOS? Check this)
* Runtime version is 3.0 or later
* COMPlus_EnableAlternateStackCheck is not set",.NET newbie,['platforms'],IGNITE,Improvement,Minor,2021-04-23 15:33:40,0
13373561,Add Javadoc rules to maven checkstyle plugin.,"h3. Motivation.
For now, we have a Javadoc suite on TC which runs {{javadoc}} tool as it is done for releases for javadoc generation purposes.
Using this tool helps us to detect a markup error in the resulting HTML code at the early stage.
However, it treats style violations as just a WARNING which never make the TC task failed.

We tried to use an additional check (actually a log parsing) to fail the TC task, but now it is disabled because we can't perform the same checks on the user side.
Also, style checks are not configurable, so using the {{javadoc}} tool for that purpose looks useless.

h3. Descrition.
Checkstyle plugin has a module that performs style checks for javadocs and its configuration looks flexible enough.
In opposite to {{javadoc}} tool, checkstyle plugin fails the maven task in case of style violation as on TC as on user side.

Let's
* leave current Javadoc TC suite ({{javadoc}} tool) as is with suppressing styles warnings.
* add javadoc rules to maven-checkstyle-plugin and update the Codestyle guide.

",ignite-3,[],IGNITE,Improvement,Major,2021-04-19 09:24:15,1
13373053,.NET: error serialization failed when thread is interrupted,"When using {{ICompute.WithTimeout}}, the following scenario is possible:
* Timeout is reached, and Ignite interrupts compute job thread
* {{InterruptedException}} is thrown from the job code
* Ignite.NET tries to serialize the job result (exception) in {{BinaryUtils.WriteInvocationResult}}
* {{BinaryProcessor.PutBinaryTypes}} is called during the serialization
* Thread is interrupted, so metadata update fails with {{InterruptedException}}

As a result, instead of a simple timeout exception, there is a lot of cryptic errors in the log (see attachments).

Possible fixes:
* Handle {{InterruptedException}} as a special case in {{WriteInvocationResult}} so we don't need to send meta updates
* Do not interrupt binary meta updates",.NET,['platforms'],IGNITE,New Feature,Minor,2021-04-16 15:31:25,0
13372731,Fix javadoc in schema and table modules.,"After IGNITE-13751 had been merged, Javadoc suite failed on TC due to lack of javadocs.

Let's fix ""warnings"" that is related to Table,  Schema modules and packages in API module related to Table and Schema.",ignite-3,[],IGNITE,Bug,Major,2021-04-15 19:55:44,1
13372669,Improve row layout. ,"h3. Motivation.

When one try to read a column value from a row, the very first check will be a null-check.
As Null-Table resides right after an Offset-Table, the we need 2 jumps to for the null-check.
h3. Description.

Assuming, Null-Table reserves a bit for each columns even if the columns is not Nullable,
Null-table has constant size (within same version of schema) and we no need extra bytes to persist it's length into the tuple.
 * Null-checks will not require extra read for Offset-Table size and extra jump.
 * Offset-Table will not need extra read/jump to reach as Null-Table size is constant.

Let's just swap these tables in layout and fix docs README.md and IEP.

 ",iep-54 ignite-3,[],IGNITE,Improvement,Major,2021-04-15 15:01:16,1
13371204,Drop legacy interface.,"DirectBufferCleaner was introduced for versions < Java9 to cleanup buffer via hidden Unsafe method.
It looks redundant for Java9+ and ByteBuffer can be cleaned via Unsafe direct call.",ignite-3,[],IGNITE,Improvement,Trivial,2021-04-12 08:26:09,1
13371198,.NET Examples: Invalid test name in the error text,"Test: *Thick/Cache/Multi Tiered Cache*

Error message:
{code:java}
Unhandled Exception: System.Exception: Extra nodes detected. ClientReconnect example should be run without external nodes.   at Apache.Ignite.Examples.Thick.Cache.MultiTieredCache.Program.Main() in /opt/buildagent/work/fdcb4fb5bbd0f7b3/i2test/var/suite-examples/art-gg-ent/platforms/dotnet/examples/Thick/Cache/MultiTieredCache/Program.cs:line 58

{code}
ClientReconnect instead MultiTieredCache",.NET,"['examples', 'platforms']",IGNITE,Bug,Minor,2021-04-12 07:59:15,0
13370181,Ignite 3: Fix toString implementations,"There is a number of places in the codebase where autogenerated IDEA {{toString()}} implementations are used (for example, {{ModuleRegistry}}, {{NetworkMember}})) or non-conformant {{toString()}} implementations ({{Peer}} in raft-client).

We need to fix the {{toString()}} implementations and move GridToStringBuilder from Ignite 2.x to avoid further similar issues.",ignite-3,[],IGNITE,Improvement,Major,2021-04-07 18:39:06,1
13369169,Remove released version of Ignite from regular ducktests,"No need to tests the released ignite version regularly.
We can remove the 2.10.0 version from the source test matrix.",IEP-56,[],IGNITE,Improvement,Major,2021-04-01 16:56:26,2
13369115,Support check Ignite-based products with ducktests,"We need to provide the way to run ducktape tests on the products that based on Ignite codebase.

For that 2 edits required:

1. Ability to specify ""project"" variable in globals.
2. Ability to specify custom docker options(mount point) from the outside of {{run_tests.sh}}.",IEP-56,[],IGNITE,Improvement,Major,2021-04-01 13:08:05,2
13368836,Add binary meta change event to CDCCosumer,"Need to provide the way to notify {{CDCConsumer}} about changes in binary meta.
Required to correctly notify subsequent systems about new types that can be found in change events.",IEP-59,[],IGNITE,Improvement,Major,2021-03-31 10:01:58,2
13368303,Refactor PdsConsistentIdProcessor for reusage,Logic to resolve PDS folders should be reused inside {{IgniteCDC}} to lock specific Ignite node CDC folder. ,IEP-59,[],IGNITE,Improvement,Major,2021-03-29 07:40:34,2
13367842,Common logger interface.,"1. Introduce a common interface for a logger, like it was done in Ignite to abstract from any 3-rd party logger implementation.
This will give users the freedom to choose any logger in the future, and prevent possible issues related to unwanted dependencies or dependency versions.

2. Add a default implementation based on System.Logger, which was introduced in Java 9, to the core module.

3. Remove any 3-rd party logger dependencies in all modules and switch to IgniteLogger if possible.

",ignite-3 newbie,[],IGNITE,Improvement,Major,2021-03-26 12:48:38,1
13367238,Add affinity columns support.,"For now, we do not calculate Row hash at all, it is always equals zero.
 Let's calculate Row hash while assembling the row in RowAssembler.",iep-54 ignite-3,[],IGNITE,Improvement,Major,2021-03-24 13:30:17,1
13366584,System view for DataStructures,"Currently, there is no way for the user to know what DataStructures exist in Ignite.
We should provide a system view for it.",IEP-35,[],IGNITE,Improvement,Major,2021-03-21 15:08:02,2
13366578,WAL reader. Read only specific Record Types,"CDC application uses only specific WALRecord types.
So we should provide an ability to skip WALRecord without full deserializing.",IEP-59,[],IGNITE,Improvement,Major,2021-03-21 14:18:41,2
13366474,Extension to write CDC data to Kafka,"The following things added:

1. CDC consumer to stream CDCEvent to kafka topic.
2. CDC consumer to stream CDCEvent to other Ignite cluster.
3. Kafka to Ignite application to read CDCEvent from kafka topic and apply them to Ignite cluster.
4. CacheVersionConflictResolver implementation(CacheVersionConflictResolverImpl) to resolve possible conflicts during streaming CDC events to other cluster.",IEP-59,[],IGNITE,Improvement,Major,2021-03-20 07:06:43,2
13366396,Refactor FileLockHolder for reusage,"CDC application needs to reuse FileLockHolder.

But for now, it's private class in \{{GridCacheDatabaseSharedManager}}

Minor refactoring required to be able to reuse it.",IEP-59,[],IGNITE,Improvement,Trivial,2021-03-19 16:31:30,2
13366353,CDC application metrics,"CDC application should provide metrics so administrator be able to observe
 * consume GAP
 * consumer info
 * committed offset
 * etc

We should try to reuse IgniteMetrics for this.",IEP-59,[],IGNITE,New Feature,Major,2021-03-19 13:33:32,2
13366351,Ability to specify application name for IgniteLogger instead of nodeId,"Right now, user can't change IgniteLogger file name.
CDC application should use it's own files for logging, something like {{ignite-cdc-[cdc-consumer-id].log}}. ",IEP-59,[],IGNITE,New Feature,Major,2021-03-19 13:30:41,2
13366143,.NET: Allow arbitrary MemberInit projections in LINQ,"Ignite LINQ provider allows anonymous type projections:
{code}
query.Select(emp => new {Id = emp.Key, Name = emp.Value.Name});
{code}

However, it does not work with a custom class:
{code}
query.Select(emp => new Foo {Id = emp.Key, Name = emp.Value.Name});
{code}

throws exception:
{code}
System.NotSupportedException : The expression 'new Foo() {Id = [x].Key}' (type: System.Linq.Expressions.MemberInitExpression) is not supported.
{code}


Add VisitMemberInit overload to CacheQueryExpressionVisitor to support this scenario. See linked SO page for more details - there is a proposed fix as well.",.NET LINQ,['platforms'],IGNITE,Improvement,Major,2021-03-18 17:08:44,0
13366091,Extend Tuple interface with ordered field access,"Let's extend Tuple interface by adding methods for indexed column access (like JDBC resultset has).

It may need to expose more information about Tuple structure, such as 
* column name -> column index 
* all columns in the tuple (name + type (ColumnType)) 
* length()
* value(int index)
* Iterable implementation

This may be useful for SQL\JDBC drivers and bulk operation where Tuples can have the same structure and column order.",iep-54 ignite-3,[],IGNITE,Improvement,Major,2021-03-18 13:57:14,0
13365828,Table binary view initial implementation.,"Let's implement minimal functionality from Table binary API for Ignite-3 MVP release.
* -schema-aware ? builders for Tuples.-
* Tuple <--> Row marshaller or converter.
* basic operation (put, get, remove).
* some CAS operation (getAndPut, putIfAbsend, replace)
* add tests for these operations. 

Example class is a good start point.
",iep-54 ignite-3,[],IGNITE,Improvement,Major,2021-03-17 12:55:09,1
13365308,.NET: Collections can't be used as service method parameters,"Currently, collections (list, map) can't be used as a service method parameter in case of 
.Net (client node) -> .Net (server node) call.

This can be reproduced my one line modification of {{ServicesTypeAutoResolveTest#DoTestPlatformService}}

{code:java}
        /// <summary>
        /// Tests .Net service invocation.
        /// </summary>
        public void DoTestPlatformService(IServices svcsForProxy)
        {
            const string platformSvcName = ""PlatformTestService"";

            _grid1.GetServices().DeployClusterSingleton(platformSvcName, new PlatformTestService());

            var svc = svcsForProxy.GetServiceProxy<IJavaService>(platformSvcName);

            DoTestService(svc);

            DoTestCollections(svc); // This line was added.

            _grid1.GetServices().Cancel(platformSvcName);
        }

{code}

Exception:

{noformat}
Apache.Ignite.Core.Services.ServiceInvocationException : Proxy method invocation failed with an exception. Examine InnerException for details.
  ----> Apache.Ignite.Core.Common.IgniteException : No matching type found for object [typeId=1552553483, typeName=org.system.collections.generic.List`1[[org.apache.ignite.platform.model.department, apache.ignite.core.testDepartment]]]. This usually indicates that assembly with specified type is not loaded on a node. When using Apache.Ignite.exe, make sure to load assemblies with -assembly parameter. Alternatively, set IgniteConfiguration.PeerAssemblyLoadingMode to CurrentAppDomain.
{noformat}",.NET,['platforms'],IGNITE,Improvement,Major,2021-03-15 17:45:42,2
13365156,.NET: Add test to call .Net service from .Net ,"Currently, {{IJavaService}} methods in {{ServicesTest}} and {{ServicesTypeAutoResolveTest}} only checked for .Net -> Java case. We should extends it with .Net -> .Net invocation.",.NET,['platforms'],IGNITE,Improvement,Major,2021-03-15 07:18:15,2
13364932,.NET: Simplify ServicesTest,"Currently, there are code duplication in {{TestCallJavaServiceDynamicProxy}}, {{TestCallJavaServiceLocal}}. To simplify ongoing improvements and bugfixes like IGNITE-14299 we should refactor these methods.",.NET,['platforms'],IGNITE,Improvement,Major,2021-03-13 09:16:51,2
13363602,.NET: Service loses array type information,"In case .Net -> .Net service call Ignite loses array type information.
{code:java}
using Apache.Ignite.Core;
using Apache.Ignite.Core.Discovery.Tcp;
using Apache.Ignite.Core.Discovery.Tcp.Static;
using Apache.Ignite.Core.Services;
using Castle.DynamicProxy;
using System;
using System.Linq;
using Xunit;

namespace Ignite.ServiceReturnsArray
{
    public class Test : IDisposable
    {
        private readonly IIgnite igniteSrv;
        private readonly IIgnite ignite;

        public Test()
        {
            IgniteConfiguration IgniteConfig(bool clientMode) => new IgniteConfiguration()
            {
                ClientMode = clientMode,
                IgniteInstanceName = Guid.NewGuid().ToString(),
                DiscoverySpi = new TcpDiscoverySpi
                {
                    IpFinder = new TcpDiscoveryStaticIpFinder { Endpoints = new[] { ""127.0.0.1:47500"" } }
                }
            };

            igniteSrv = Ignition.Start(IgniteConfig(false));
            ignite = Ignition.Start(IgniteConfig(true));

            ignite.GetServices().DeployClusterSingleton(nameof(ArrayFactoryService), new ArrayFactoryService());
        }

        public void Dispose()
        {
            ignite.Dispose();
            igniteSrv.Dispose();
        }

        [Fact]
        public void ServiceReturnsArray()
        {
            var arr = ignite.GetServices().GetServiceProxy<IArrayFactory>(nameof(ArrayFactoryService), false)
                .CreateArray(2, 1);

            Assert.IsType<Result[]>(arr);
            Assert.Equal(1, arr?[1]?.Value);
        }

        [Fact]
        public void ServiceReturnsArrayWithReflection()
        {
            var arr = typeof(IArrayFactory).GetMethod(nameof(IArrayFactory.CreateArray)).Invoke(
                ignite.GetServices().GetServiceProxy<IArrayFactory>(nameof(ArrayFactoryService)),
                new object[] { 2, 1 });

            Assert.IsType<Result[]>(arr);
            Assert.Equal(1, ((Result[])arr)?[1]?.Value);
        }

        [Fact]
        public void ServiceReturnsArrayWithCastleProxy()
        {
            var interceptor = new ServiceInterceptor<IArrayFactory>(ignite, nameof(ArrayFactoryService));
            
            var arr = new ProxyGenerator().CreateInterfaceProxyWithoutTarget<IArrayFactory>(interceptor)
                .CreateArray(2, 1);

            Assert.IsType<Result[]>(arr);
            Assert.Equal(1, arr?[1]?.Value);
        }

        public sealed class Result
        {
            public int Value { get; set; }
        }

        public interface IArrayFactory
        {
            Result[] CreateArray(int size, int dlftVal);
        }

        public sealed class ArrayFactoryService : IArrayFactory, IService
        {
            public Result[] CreateArray(int size, int dfltVal)
            {
                return Enumerable.Repeat(new Result { Value = dfltVal }, size).ToArray();
            }

            public void Cancel(IServiceContext context)
            {
            }

            public void Execute(IServiceContext context)
            {
            }

            public void Init(IServiceContext context)
            {
            }
        }

        private sealed class ServiceInterceptor<T> : IInterceptor where T: class
        {
            private readonly IIgnite ignite;
            private readonly string name;

            public ServiceInterceptor(IIgnite ignite, string name)
            {
                this.ignite = ignite;
                this.name = name;
            }

            public void Intercept(IInvocation invocation)
            {
                var svc = ignite.GetServices().GetServiceProxy<T>(name, false);
                invocation.ReturnValue = invocation.Method.Invoke(svc, invocation.Arguments);
            }
        }
    }
}
 {code}
 

Above test fail on type check.",.NET,[],IGNITE,Bug,Major,2021-03-10 16:22:48,2
13363357,.NET: ClientServerCompatibilityTest is flaky,"ClientServerCompatibilityTest fails for two reasons:

1. {{Failed to establish Ignite thin client connection, examine inner exceptions for details. (Connection refused 127.0.0.1:10892)}} - check process output, is there a different port used for the client connector?

2. {{GridUnsafe cannot access class jdk.internal.misc.SharedSecrets}} - we should pass {{--add-exports}} and {{--illegal-access=permit}} JVM options when running on Java9+, see {{Jvm.IsJava9}}.",.NET,['platforms'],IGNITE,Bug,Minor,2021-03-09 19:49:00,0
13363306,.NET: AffinityKey does not work,"{{AffinityKey}} does not work as expected - {{Affinity}} property is not used for affinity calculation.

This is caused by IGNITE-13160: {{AffinityKey}} system type is overwritten by {{UnmanagedCallbacks.BinaryTypeGet}} call. As a result, this type becomes a regular, user type, and does not map to a corresponding type on the Java side.

* Add test that combines QueryEntity with AffinityKey
* Check that other system types (IgniteUuid, etc) don't have this problem, add tests
* Make sure we never overwrite system types during registration
* Improve examples tests: Thick Sql example provides inconsistent output due to this bug
",.NET,['platforms'],IGNITE,Bug,Blocker,2021-03-09 16:21:13,0
13362345,.NET: Swallowing exception in case Platform cache update error,"Currently, any error during platform cache update just logging and swallowing.

Ignite should throw it to a higher level to handle with Failure Handler or similar way.
Ignite shouldn't finish operation successfully in case of platform cache update error.

https://github.com/apache/ignite/blob/master/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java#L7047",.NET,['platforms'],IGNITE,Improvement,Minor,2021-03-04 16:48:15,0
13361224,.NET: TransactionDeadlockDetection example fails when there are no external nodes,"Run Thick/Cache/TransactionDeadlockDetection example without external nodes: 


{code:java}

>>> Update failed in thread 1: Apache.Ignite.Core.Transactions.TransactionTimeoutException: Failed to acquire lock within provided timeout for transaction [timeout=2000, tx=GridNearTxLocal[xid=7d0bd2fd771-00000000-0d75-fffc-0000-000000000001, xidVersion=GridCacheVersion [topVer=225837052, order=1614357049559, nodeOrder=1], nearXidVersion=GridCacheVersion [topVer=225837052, order=1614357049559, nodeOrder=1], concurrency=PESSIMISTIC, isolation=READ_COMMITTED, state=MARKED_ROLLBACK, topVer=AffinityTopologyVersion [topVer=1, minorTopVer=1], invalidate=false, rollbackOnly=true, nodeId=f9df2d5d-1f47-4980-ae27-7684f761048f, timeout=2000, startTime=1614357051532, duration=2045, label=null]] ---> Apache.Ignite.Core.Common.JavaException: class org.apache.ignite.transactions.TransactionTimeoutException: Failed to acquire lock within provided timeout for transaction [timeout=2000, tx=GridNearTxLocal[xid=7d0bd2fd771-00000000-0d75-fffc-0000-000000000001, xidVersion=GridCacheVersion [topVer=225837052, order=1614357049559, nodeOrder=1], nearXidVersion=GridCacheVersion [topVer=225837052, order=1614357049559, nodeOrder=1], concurrency=PESSIMISTIC, isolation=READ_COMMITTED, state=MARKED_ROLLBACK, topVer=AffinityTopologyVersion [topVer=1, minorTopVer=1], invalidate=false, rollbackOnly=true, nodeId=f9df2d5d-1f47-4980-ae27-7684f761048f, timeout=2000, startTime=1614357051532, duration=2045, label=null]]
	at org.apache.ignite.internal.util.IgniteUtils$13.apply(IgniteUtils.java:986)
	at org.apache.ignite.internal.util.IgniteUtils$13.apply(IgniteUtils.java:981)
	at org.apache.ignite.internal.processors.cache.GridCacheUtils.convertToCacheException(GridCacheUtils.java:1265)
	at org.apache.ignite.internal.processors.cache.IgniteCacheProxyImpl.cacheException(IgniteCacheProxyImpl.java:2077)
	at org.apache.ignite.internal.processors.cache.IgniteCacheProxyImpl.put(IgniteCacheProxyImpl.java:1313)
	at org.apache.ignite.internal.processors.cache.GatewayProtectedCacheProxy.put(GatewayProtectedCacheProxy.java:817)
	at org.apache.ignite.internal.processors.platform.cache.PlatformCache.processInStreamOutLong(PlatformCache.java:839)
	at org.apache.ignite.internal.processors.platform.PlatformTargetProxyImpl.inStreamOutLong(PlatformTargetProxyImpl.java:66)
Caused by: class org.apache.ignite.internal.transactions.IgniteTxTimeoutCheckedException: Failed to acquire lock within provided timeout for transaction [timeout=2000, tx=GridNearTxLocal[xid=7d0bd2fd771-00000000-0d75-fffc-0000-000000000001, xidVersion=GridCacheVersion [topVer=225837052, order=1614357049559, nodeOrder=1], nearXidVersion=GridCacheVersion [topVer=225837052, order=1614357049559, nodeOrder=1], concurrency=PESSIMISTIC, isolation=READ_COMMITTED, state=MARKED_ROLLBACK, topVer=AffinityTopologyVersion [topVer=1, minorTopVer=1], invalidate=false, rollbackOnly=true, nodeId=f9df2d5d-1f47-4980-ae27-7684f761048f, timeout=2000, startTime=1614357051532, duration=2045, label=null]]
	at org.apache.ignite.internal.processors.cache.distributed.dht.colocated.GridDhtColocatedLockFuture$LockTimeoutObject$1.apply(GridDhtColocatedLockFuture.java:1536)
	at org.apache.ignite.internal.processors.cache.distributed.dht.colocated.GridDhtColocatedLockFuture$LockTimeoutObject$1.apply(GridDhtColocatedLockFuture.java:1529)
	at org.apache.ignite.internal.util.future.GridFutureAdapter.notifyListener(GridFutureAdapter.java:407)
	at org.apache.ignite.internal.util.future.GridFutureAdapter.listen(GridFutureAdapter.java:362)
	at org.apache.ignite.internal.processors.cache.distributed.dht.colocated.GridDhtColocatedLockFuture$LockTimeoutObject.onTimeout(GridDhtColocatedLockFuture.java:1529)
	at org.apache.ignite.internal.processors.timeout.GridTimeoutProcessor$TimeoutWorker.body(GridTimeoutProcessor.java:278)
	at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:119)
	at java.base/java.lang.Thread.run(Thread.java:834)

   --- End of inner exception stack trace ---
   at Apache.Ignite.Core.Impl.PlatformJniTarget.InStreamOutLong[TR](Int32 type, Func`2 outAction, Func`3 inAction, Func`2 readErrorAction)
   at Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Put(TK key, TV val)
   at Apache.Ignite.Examples.Thick.Cache.TransactionDeadlockDetection.Program.UpdateKeys(ICache`2 cache, IEnumerable`1 keys, Int32 threadId) in /home/prom1se/GG/work/var/suite-examples/art-gg-com/platforms/dotnet/examples/Thick/Cache/TransactionDeadlockDetection/Program.cs:line 80

{code}",.NET,"['examples', 'platforms']",IGNITE,Bug,Minor,2021-02-26 16:57:57,0
13361193,.NET: Race condition in Events example,"See Thick/Misc/Events example: TASK_REDUCE, TASK_FINISHED events arrive after the end of GetСompute().Execute, which can cause them to go missing.

{code:java}
[16:20:20]   ^-- Baseline [id=0, size=3, online=3, offline=0]>>> Events example started.
>>> Listening for a local event...Local listener received an event [evt=TASK_STARTED]Service initialized: default-map-serviceService started: default-map-service
>>> Executing salary job for 7 employee(s) ...
>>> Received events count: 1
Service cancelled: default-map-service
{code}",.NET,"['examples', 'platforms']",IGNITE,Bug,Minor,2021-02-26 13:42:42,0
13360922,.NET: Upgrade ConfigurationManager dependency,"ConfigurationManager dependency is limited to versions below 5 (see nuspec file) which causes problems when other dependencies want 5.0+.

Test that Ignite is compatible with newer versions and extend the range of allowed  versions
{code:java}
<dependency id=""System.Configuration.ConfigurationManager"" version=""[4.4.0, 5.0.0)"" />
{code}",.NET,['platforms'],IGNITE,Improvement,Major,2021-02-25 09:25:27,0
13359368,.NET: Examples multi targeting,"Currently examples require .NET SDK 2.1, which is quite old. Users are more likely to have .NET Core 3.1 or .NET 5 installed.

Fix example projects and replace 

{code}
<TargetFramework>netcoreapp2.1</TargetFramework>
{code}

with 

{code}
<TargetFrameworks>netcoreapp2.1;netcoreapp3.1;net5</TargetFrameworks>
{code}",.NET,['platforms'],IGNITE,Improvement,Major,2021-02-18 15:54:02,0
13359163,cpp thin client transaction :Transaction with id 1 not found.,"Using the 2.10 branch code and the transaction function of cpp thin client, the transaction with id 1 not found error will be throw. the reproduce steps are as follows:

1.start two nodes on two hosts use the following config file:
{color:#808080}<?{color}{color:#569cd6}xml{color}{color:#9cdcfe} version{color}{color:#d4d4d4}={color}{color:#ce9178}""1.0""{color}{color:#9cdcfe} encoding{color}{color:#d4d4d4}={color}{color:#ce9178}""UTF-8""{color}{color:#808080}?>{color}
{color:#808080}<{color}{color:#569cd6}beans{color} {color:#9cdcfe}xmlns{color}{color:#d4d4d4}={color}{color:#ce9178}[""http://www.springframework.org/schema/beans""|http://www.springframework.org/schema/beans]{color}
{color:#9cdcfe}xmlns:xsi{color}{color:#d4d4d4}={color}{color:#ce9178}[""http://www.w3.org/2001/XMLSchema-instance""|http://www.w3.org/2001/XMLSchema-instance]{color}
{color:#9cdcfe}xsi:schemaLocation{color}{color:#d4d4d4}={color}{color:#ce9178}""{color}
{color:#ce9178} [http://www.springframework.org/schema/beans]{color}
{color:#ce9178} [http://www.springframework.org/schema/beans/spring-beans.xsd]""{color}{color:#808080}>{color}
{color:#808080}<{color}{color:#569cd6}bean{color} {color:#9cdcfe}id{color}{color:#d4d4d4}={color}{color:#ce9178}""grid.cfg""{color} {color:#9cdcfe}class{color}{color:#d4d4d4}={color}{color:#ce9178}""org.apache.ignite.configuration.IgniteConfiguration""{color}{color:#808080}>{color}
{color:#808080}<{color}{color:#569cd6}property{color} {color:#9cdcfe}name{color}{color:#d4d4d4}={color}{color:#ce9178}""clientMode""{color} {color:#9cdcfe}value{color}{color:#d4d4d4}={color}{color:#ce9178}""false""{color} {color:#808080}/>{color}
{color:#808080}<{color}{color:#569cd6}property{color} {color:#9cdcfe}name{color}{color:#d4d4d4}={color}{color:#ce9178}""peerClassLoadingEnabled""{color} {color:#9cdcfe}value{color}{color:#d4d4d4}={color}{color:#ce9178}""true""{color}{color:#808080}/>{color}
{color:#808080}<{color}{color:#569cd6}property{color} {color:#9cdcfe}name{color}{color:#d4d4d4}={color}{color:#ce9178}""binaryConfiguration""{color}{color:#808080}>{color}
{color:#808080}<{color}{color:#569cd6}bean{color} {color:#9cdcfe}class{color}{color:#d4d4d4}={color}{color:#ce9178}""org.apache.ignite.configuration.BinaryConfiguration""{color}{color:#808080}>{color}
{color:#808080}<{color}{color:#569cd6}property{color} {color:#9cdcfe}name{color}{color:#d4d4d4}={color}{color:#ce9178}""compactFooter""{color} {color:#9cdcfe}value{color}{color:#d4d4d4}={color}{color:#ce9178}""false""{color} {color:#808080}/>{color}
{color:#808080}<{color}{color:#569cd6}property{color} {color:#9cdcfe}name{color}{color:#d4d4d4}={color}{color:#ce9178}""idMapper""{color}{color:#808080}>{color}
{color:#808080}<{color}{color:#569cd6}bean{color} {color:#9cdcfe}class{color}{color:#d4d4d4}={color}{color:#ce9178}""org.apache.ignite.binary.BinaryBasicIdMapper""{color}{color:#808080}>{color}
{color:#808080}<{color}{color:#569cd6}property{color} {color:#9cdcfe}name{color}{color:#d4d4d4}={color}{color:#ce9178}""lowerCase""{color} {color:#9cdcfe}value{color}{color:#d4d4d4}={color}{color:#ce9178}""true""{color} {color:#808080}/>{color}
{color:#808080}</{color}{color:#569cd6}bean{color}{color:#808080}>{color}
{color:#808080}</{color}{color:#569cd6}property{color}{color:#808080}>{color}
{color:#808080}</{color}{color:#569cd6}bean{color}{color:#808080}>{color}
{color:#808080}</{color}{color:#569cd6}property{color}{color:#808080}>{color}
{color:#808080}<{color}{color:#569cd6}property{color} {color:#9cdcfe}name{color}{color:#d4d4d4}={color}{color:#ce9178}""dataStorageConfiguration""{color}{color:#808080}>{color}
{color:#808080}<{color}{color:#569cd6}bean{color} {color:#9cdcfe}class{color}{color:#d4d4d4}={color}{color:#ce9178}""org.apache.ignite.configuration.DataStorageConfiguration""{color}{color:#808080}>{color}
{color:#808080}<{color}{color:#569cd6}property{color} {color:#9cdcfe}name{color}{color:#d4d4d4}={color}{color:#ce9178}""defaultDataRegionConfiguration""{color}{color:#808080}>{color}
{color:#808080}<{color}{color:#569cd6}bean{color} {color:#9cdcfe}class{color}{color:#d4d4d4}={color}{color:#ce9178}""org.apache.ignite.configuration.DataRegionConfiguration""{color}{color:#808080}>{color}
{color:#808080}<{color}{color:#569cd6}property{color} {color:#9cdcfe}name{color}{color:#d4d4d4}={color}{color:#ce9178}""name""{color} {color:#9cdcfe}value{color}{color:#d4d4d4}={color}{color:#ce9178}""default""{color} {color:#808080}/>{color}
{color:#808080}<{color}{color:#569cd6}property{color} {color:#9cdcfe}name{color}{color:#d4d4d4}={color}{color:#ce9178}""maxSize""{color} {color:#9cdcfe}value{color}{color:#d4d4d4}={color}{color:#ce9178}""#\{1L * 1024 * 1024 * 1024}""{color} {color:#808080}/>{color}
{color:#808080}<{color}{color:#569cd6}property{color} {color:#9cdcfe}name{color}{color:#d4d4d4}={color}{color:#ce9178}""persistenceEnabled""{color} {color:#9cdcfe}value{color}{color:#d4d4d4}={color}{color:#ce9178}""false""{color} {color:#808080}/>{color}
{color:#808080}</{color}{color:#569cd6}bean{color}{color:#808080}>{color}
{color:#808080}</{color}{color:#569cd6}property{color}{color:#808080}>{color}
{color:#808080}</{color}{color:#569cd6}bean{color}{color:#808080}>{color}
{color:#808080}</{color}{color:#569cd6}property{color}{color:#808080}>{color}
{color:#808080}</{color}{color:#569cd6}bean{color}{color:#808080}>{color}
{color:#808080}</{color}{color:#569cd6}beans{color}{color:#808080}>{color}
2.test code are as follows:

Usually only the first few loop operations may throw an exception, and the subsequent operations are normal.
{color:#c586c0}#include{color} {color:#ce9178}<stdint.h>{color}
{color:#c586c0}#include{color} {color:#ce9178}<iostream>{color}
{color:#c586c0}#include{color} {color:#ce9178}<ignite/thin/ignite_client.h>{color}
{color:#c586c0}#include{color} {color:#ce9178}<ignite/thin/cache/cache_client.h>{color}
{color:#c586c0}#include{color} {color:#ce9178}""ignite/examples/organization.h""{color}
{color:#c586c0}using{color} {color:#569cd6}namespace{color} {color:#4ec9b0}ignite{color}{color:#d4d4d4};{color}
{color:#c586c0}using{color} {color:#569cd6}namespace{color} {color:#4ec9b0}thin{color}{color:#d4d4d4};{color}
{color:#c586c0}using{color} {color:#569cd6}namespace{color} {color:#4ec9b0}cache{color}{color:#d4d4d4};{color}
{color:#c586c0}using{color} {color:#569cd6}namespace{color} {color:#4ec9b0}examples{color}{color:#d4d4d4};{color}
{color:#569cd6}int{color} {color:#dcdcaa}main{color}{color:#d4d4d4}(){color}
{color:#d4d4d4}{{color}
{color:#d4d4d4} IgniteClientConfiguration cfg;{color}
 
{color:#9cdcfe}cfg{color}{color:#d4d4d4}.{color}{color:#dcdcaa}SetEndPoints{color}{color:#d4d4d4}({color}{color:#ce9178}""X.X.X.X""{color}{color:#d4d4d4});{color}
{color:#c586c0}try{color}
{color:#d4d4d4} { {color}
{color:#d4d4d4} IgniteClient client = {color}{color:#4ec9b0}IgniteClient{color}{color:#d4d4d4}::{color}{color:#dcdcaa}Start{color}{color:#d4d4d4}(cfg); {color}
{color:#d4d4d4} CacheClient<{color}{color:#569cd6}int32_t{color}{color:#d4d4d4}, Organization> cache = {color}{color:#9cdcfe}client{color}{color:#d4d4d4}.{color}{color:#9cdcfe}GetOrCreateCache{color}{color:#d4d4d4}<{color}{color:#569cd6}int32_t{color}{color:#d4d4d4}, Organization>({color}{color:#ce9178}""PutGetExample""{color}{color:#d4d4d4});{color}
{color:#9cdcfe}cache{color}{color:#d4d4d4}.{color}{color:#dcdcaa}Clear{color}{color:#d4d4d4}();{color}
{color:#569cd6}int{color}{color:#d4d4d4} loop = {color}{color:#b5cea8}100{color}{color:#d4d4d4};{color}
{color:#c586c0}for{color}{color:#d4d4d4} ({color}{color:#569cd6}int{color}{color:#d4d4d4} i = {color}{color:#b5cea8}0{color}{color:#d4d4d4}; i < loop; i++){color}
{color:#d4d4d4} {{color}
{color:#4ec9b0}ignite{color}{color:#d4d4d4}::{color}{color:#4ec9b0}thin{color}{color:#d4d4d4}::{color}{color:#4ec9b0}transactions{color}{color:#d4d4d4}::ClientTransaction transaction = {color}{color:#9cdcfe}client{color}{color:#d4d4d4}.{color}{color:#dcdcaa}ClientTransactions{color}{color:#d4d4d4}().{color}{color:#dcdcaa}TxStart{color}{color:#d4d4d4}();{color}
{color:#d4d4d4} Organization {color}{color:#dcdcaa}org{color}{color:#d4d4d4}({color}{color:#ce9178}""Microsoft""{color}{color:#d4d4d4}, {color}{color:#dcdcaa}Address{color}{color:#d4d4d4}({color}{color:#ce9178}""1096 Eddy Street, San Francisco, CA""{color}{color:#d4d4d4}, i));{color}
{color:#9cdcfe}cache{color}{color:#d4d4d4}.{color}{color:#dcdcaa}Put{color}{color:#d4d4d4}({color}{color:#b5cea8}1{color}{color:#d4d4d4}, org); {color}
{color:#9cdcfe}transaction{color}{color:#d4d4d4}.{color}{color:#dcdcaa}Commit{color}{color:#d4d4d4}();{color}
{color:#d4d4d4} }{color}
{color:#d4d4d4} Organization orgFromCache = {color}{color:#9cdcfe}cache{color}{color:#d4d4d4}.{color}{color:#dcdcaa}Get{color}{color:#d4d4d4}({color}{color:#b5cea8}1{color}{color:#d4d4d4});{color}
{color:#d4d4d4} }{color}
{color:#c586c0}catch{color}{color:#d4d4d4} (IgniteError& err){color}
{color:#d4d4d4} {{color}
{color:#4ec9b0}std{color}{color:#d4d4d4}::cout << {color}{color:#ce9178}""An error occurred: ""{color}{color:#d4d4d4} << {color}{color:#9cdcfe}err{color}{color:#d4d4d4}.{color}{color:#dcdcaa}GetText{color}{color:#d4d4d4}() << {color}{color:#4ec9b0}std{color}{color:#d4d4d4}::endl;{color}
{color:#c586c0}return{color} {color:#9cdcfe}err{color}{color:#d4d4d4}.{color}{color:#dcdcaa}GetCode{color}{color:#d4d4d4}();{color}
{color:#d4d4d4} }{color}
{color:#c586c0}return{color} {color:#b5cea8}0{color}{color:#d4d4d4};{color}
3.server side's log are as follows:
{color:#d4d4d4}[{color}{color:#6a9955}11:25:35,496{color}{color:#d4d4d4}][SEVERE][client-connector-#{color}{color:#569cd6}117{color}{color:#d4d4d4}][ClientListenerNioListener] Failed to process client request [req={color}{color:#569cd6}o.a.i.i.processors.platform.client.tx.ClientTxEndRequest{color}{color:#d4d4d4}@569bc2e0]{color}
{color:#d4d4d4}class {color}{color:#ce9178}org.apache.ignite.internal.processors.platform.client.IgniteClientException{color}{color:#d4d4d4}: Transaction with id {color}{color:#569cd6}1{color}{color:#d4d4d4} not found.{color}
{color:#ce9178} at org.apache.ignite.internal.processors.platform.client.tx.ClientTxEndRequest.process(ClientTxEndRequest.java:59){color}
{color:#ce9178} at org.apache.ignite.internal.processors.platform.client.ClientRequestHandler.handle(ClientRequestHandler.java:98){color}
{color:#ce9178} at org.apache.ignite.internal.processors.odbc.ClientListenerNioListener.onMessage(ClientListenerNioListener.java:195){color}
{color:#ce9178} at org.apache.ignite.internal.processors.odbc.ClientListenerNioListener.onMessage(ClientListenerNioListener.java:49){color}
{color:#ce9178} at org.apache.ignite.internal.util.nio.GridNioFilterChain$TailFilter.onMessageReceived(GridNioFilterChain.java:279){color}
{color:#ce9178} at org.apache.ignite.internal.util.nio.GridNioFilterAdapter.proceedMessageReceived(GridNioFilterAdapter.java:109){color}
{color:#ce9178} at org.apache.ignite.internal.util.nio.GridNioAsyncNotifyFilter$3.body(GridNioAsyncNotifyFilter.java:97){color}
{color:#ce9178} at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120){color}
{color:#ce9178} at org.apache.ignite.internal.util.worker.GridWorkerPool$1.run(GridWorkerPool.java:70){color}
{color:#ce9178} at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149){color}
{color:#ce9178} at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624){color}
{color:#ce9178} at java.lang.Thread.run(Thread.java:748){color}
If start two nodes on two hosts and create a cluster, you can reproduce this problem. If start multiple server nodes on one host, it seems that there is no problem.
Thin clients only need one.

See the following discussion for details:

http://apache-ignite-users.70518.x6.nabble.com/2-10-branch-cpp-thin-client-transaction-Transaction-with-id-1-not-found-tt35358.html",c++,['thin client'],IGNITE,Bug,Critical,2021-02-18 00:36:37,3
13358673,.NET Thin Client: DataStreamer,Add data streaming to Thin Client,.NET iep-68,"['platforms', 'thin client']",IGNITE,New Feature,Major,2021-02-15 14:52:12,0
13358497,.NET: TestReconnectToOldNodeDisablesPartitionAwareness fails,"TestReconnectToOldNodeDisablesPartitionAwareness is broken by changes from IGNITE-14103 

* Additionally: Enable this test on .NET Core",.NET,"['platforms', 'thin client']",IGNITE,Bug,Major,2021-02-13 18:27:52,0
13358314,.NET: Support standard Java naming conventions in the name mapper,"Currently, {{BasicBinaryNameMapper[isSimpleName=false]}} assumes that type names equals both in Java and .Net.

Java type - {{ru.company.Model}}
.Net type - {{ru.company.Model}}

However, .net naming conventions [1] differs from java [2]
So, if a user follows both conventions then names will be

Java type - {{ru.company.Model}}
.Net type - {{Ru.Company.Model}}

We should support standard naming conventions for both platforms in {{BasicBinaryNameMapper[isSimpleName=false]}}.

[1] https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-namespaces
[2] https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html

",.NET,['platforms'],IGNITE,Improvement,Major,2021-02-12 09:10:24,2
13358170,C++ Thin Client bug with transactions larger than 1GB,http://apache-ignite-users.70518.x6.nabble.com/Long-transaction-suspended-tp35368p35419.html,c++,"['platforms', 'thin client']",IGNITE,Bug,Major,2021-02-11 14:36:45,3
13356770,Documentation for .NET: Thin Client: Service invocation,"We need to add a section on the new functionality, including the following info:
 - Add info that services can be only called from a thin client, but never deployed
 - Provide a call example 
 - Highlight that the called service can relate both to .NET and Java.",docuentation,['documentation'],IGNITE,Sub-task,Major,2021-02-04 13:51:07,0
13356767,Documentation for async API (Thin client Java API),"We need to add a section on the new functionality, including the following info:

- A short description on async API for the Java thin client API
- An example of an async operation call (of {{cache.getAsync()type}})
- Include info on {{IgniteClientFuture}}
- Include info on {{ClientConfiguration.AsyncContinuationExecutor}}",docuentation,['documentation'],IGNITE,Sub-task,Major,2021-02-04 13:41:44,0
13356264,.NET: Review LongRunning tests,"{{TestUtils.CategoryIntensive}} is supposed to be applied to long-running tests, so that we can exclude that category and do a quick test run.

* Review current tests duration and apply the attribute to all tests that take over 2 or 3 seconds.
* Review test fixtures that take a long time to set up.
* Update DEVNOTES with a command to run quick tests only (exclude long and examples).",.NET,['platforms'],IGNITE,Improvement,Trivial,2021-02-02 18:18:07,0
13355757,.NET Thin Client: Retrieve binary configuration from server,Thin clients require manual binary configuration currently. Settings like compact footer and simple/full name mapper should be set to match the cluster settings. Extend the protocol to retrieve those settings automatically on start.,.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2021-01-31 18:02:43,0
13355420,.NET Thin Client: Add connection limit configuration property,"With partition awareness enabled, the thin client connects to every server node in the cluster.
Provide a config property to limit the number of connections to limit the resource usage on servers and clients.",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2021-01-29 11:24:30,0
13355132,Implement distributed SchemaManager.,"Create SchemaManager API and implement schema manager backed by distributed metastorage
with schema versioning logic for the ""strict-schema"" case.

",iep-54 ignite-3,[],IGNITE,Improvement,Major,2021-01-28 09:42:30,1
13354667,.NET: Incorrect table name when query type is generic,"Using a generic type as a QueryEntity value type results in a broken SQL table name:

{code}
            var ignite = Ignition.Start(TestUtils.GetTestConfiguration());

            var cfg = new CacheConfiguration(
                TestUtils.TestName,
                new QueryEntity(typeof(int), typeof(GenericTest<string>)));

            var cache = ignite.GetOrCreateCache<int, GenericTest<string>>(cfg);
            cache[1] = new GenericTest<string> {Prop = ""1""};

            var tables = cache.Query(new SqlFieldsQuery(""SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES""))
                .Select(x => (string) x.Single()).ToArray();
{code}

Resulting table name is *0, CULTURE=NEUTRAL, PUBLICKEYTOKEN=7CEC85D7BEA7798E]]*.
We should add .NET generics support to {{org.apache.ignite.internal.processors.query.QueryUtils.typeName}}.
",.NET,['platforms'],IGNITE,Bug,Minor,2021-01-26 13:03:16,0
13354311,.NET: Release build fails because of missing nuget executable,"NuGet executable is not downloaded when {{-skipNuGet}} is specified, but it is required for .NET Framework build.

https://ci.ignite.apache.org/buildConfiguration/Releases_NightlyRelease_ApacheIgniteNightlyReleaseBuildNetCpp/5838928?buildTab=log&focusLine=3&linesState=805",.NET,['platforms'],IGNITE,Bug,Major,2021-01-25 08:44:25,0
13354141,.NET: Examples tests fail on .NET Core 3 nightly run,"Example tests assume {{netcoreapp2.1}} in assembly paths, but .NET Core 3.0 TC project overrides the SDK version, breaking the tests.",.NET,['platforms'],IGNITE,Bug,Major,2021-01-23 19:24:06,0
13353939,Table access public API.,"h3. Motivation.
Some users may want to use Key-value (KV) pair to store their data,  some would like to have a single Record class for the same purpose.
Both approaches are reasonable and perfectly maps to the row layout described in IEP. The only difference is separate key and value classes vs a single record class.
Also, we must provide lower-level TableView to access data via BinaryObject analogs (like keepBinary() projection does in ignite 2.x) because ones may not have classes on the server-side.

h3. Description.
Create table access API (incl. Record and KV concepts).
Cover the next cases with Examples of how API can be used:
* Simple Record case. (Row mapped to a single user class)
* Simple KV case. (Row mapped to key-value pair of user classes)
* Binary row case.
* Binary KV case.
* Truncated classes. (Value\Record class that covers a part of value columns.)
* Custom class field->columns mapping.
* Conditional serialization.
* Inheritance mapping single table strategy (wide table schema vs conditional serialization)
* Transition from ""schemaless"" (pure binary KV case) to schema-powered.

Serializer\marshaller, schema management, schema versioning, underlying storage are out-of-scope and may be stubbed if needed.",iep-54 ignite-3,[],IGNITE,Improvement,Major,2021-01-22 09:54:14,1
13353808,.NET: MessagingTest.TestRemoteListen is flaky,"TestRemoteListen is flaky:

https://ci.ignite.apache.org/test/-5844373269997071739?currentProjectId=IgniteTests24Java8&currentBuildTypeId=IgniteTests24Java8_PlatformNetCoreLinux&branch=%3Cdefault%3E",.NET,['platforms'],IGNITE,Bug,Trivial,2021-01-21 17:32:10,0
13352007,Improve maven dependencies management.,"Let's avoid hardcoded dependency versions in module pom files and use properties for versions as it is done Ignite 2.x.
As more than one module can have same dependency, the proper place to define versions is the parent pom.
",ignite-3,['build'],IGNITE,Improvement,Major,2021-01-13 13:14:32,1
13351669,.NET: Modernize examples,"Rework and modernize Ignite.NET examples:
* Refactor to .NET Core
* One project per example to run with {{dotnet run}} or from the IDE
* NuGet-based (similar to how Java examples are Maven-based)
* Thick and Thin: same set of examples where possible",.NET,['platforms'],IGNITE,Improvement,Major,2021-01-12 07:41:15,0
13349196,.NET: Avoid binary configuration for Compute  API invocation,"Currently, it's required to explicitly register any custom user type as a binary type to be able to invoke some compute API method with this type as a parameter or return value.

We should use the same technique as in IGNITE-10075 to avoid explicit binary type registration.",.NET,['platforms'],IGNITE,Improvement,Major,2021-01-05 13:01:19,2
13348294,.NET: Service can't assign correct type to passed array parameters (.Net -> .Net call),"This issue relates to IGNITE-12823.

Ignite client calls deployed service and fails with the following exception:
{code:java}
Apache.Ignite.Core.Common.JavaException: class org.apache.ignite.IgniteException: Failed to invoke proxy: there is no method 'processSomething' in type 'SomeService' with (Int32, Object[]) arguments
	at org.apache.ignite.internal.processors.platform.callback.PlatformCallbackUtils.inLongOutLong(Native Method)
	at org.apache.ignite.internal.processors.platform.callback.PlatformCallbackGateway.serviceInvokeMethod(PlatformCallbackGateway.java:942)
	at org.apache.ignite.internal.processors.platform.services.PlatformAbstractService.invokeMethod(PlatformAbstractService.java:214)
	at org.apache.ignite.internal.processors.platform.services.PlatformAbstractService.invokeMethod(PlatformAbstractService.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ignite.internal.processors.service.GridServiceProxy$ServiceProxyCallable.callService(GridServiceProxy.java:491)
	at org.apache.ignite.internal.processors.service.GridServiceProxy$ServiceProxyCallable.call(GridServiceProxy.java:469)
	at org.apache.ignite.internal.processors.closure.GridClosureProcessor$C2.execute(GridClosureProcessor.java:1847)
	at org.apache.ignite.internal.processors.job.GridJobWorker$2.call(GridJobWorker.java:598)
	at org.apache.ignite.internal.util.IgniteUtils.wrapThreadLoader(IgniteUtils.java:7077)
	at org.apache.ignite.internal.processors.job.GridJobWorker.execute0(GridJobWorker.java:592)
	at org.apache.ignite.internal.processors.job.GridJobWorker.body(GridJobWorker.java:521)
	at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120)
	at org.apache.ignite.internal.processors.job.GridJobProcessor.processJobExecuteRequest(GridJobProcessor.java:1368)
	at org.apache.ignite.internal.processors.job.GridJobProcessor$JobExecutionListener.onMessage(GridJobProcessor.java:2130)
	at org.apache.ignite.internal.managers.communication.GridIoManager.invokeListener(GridIoManager.java:1907)
	at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:1528)
	at org.apache.ignite.internal.managers.communication.GridIoManager.access$5300(GridIoManager.java:241)
	at org.apache.ignite.internal.managers.communication.GridIoManager$9.execute(GridIoManager.java:1421)
	at org.apache.ignite.internal.managers.communication.TraceRunnable.run(TraceRunnable.java:55)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}
Service interface itself looks like this:
{code:java}
public interface SomeService : IService
{
    int processSomething(int foo, Parameter[] parameters);

    int processSomething(int foo, int bar);
}

public class Parameter {     
    private int id;     
    private ParamValue[] _values;      
    public Parameter(int id, ParamValue[] _values)     {  
       this.id = id;         
       this._values = _values;     
    }
 }

  public class ParamValue { 
    private int id;     
    private double val;      
    public ParamValue(int id, double val)     {  
       this.id = id;        
       this.val = val;   
    }
 }

{code}
And the call to the service:
{code:java}
var svc = igniteServices.GetServiceProxy<T>(name, false);
var result = svc.processSomething(id, parameters);
{code}
Please note, that if there's no overloaded methods, at least in our experiments we found out that it does reproduce with equal number of parameters in overloaded methods (e.g. here we have overloaded methods that take 2 parameters each), then the code works like a charm.

Fix in IGNITE-12823 addresses particular code execution path where the execution flow goes through PlatformServices class. Yet in this case our code goes through PlatformAbstractService. I think that the fix of casting arrays should be positioned a little bit lower in the call stack (or higher in code hierarchy) so all execution paths are covered simultaneously. ",.NET,['platforms'],IGNITE,Bug,Major,2020-12-29 12:12:39,2
13347607,.NET: Service can't assign correct type to passed array parameters,"This issue relates to IGNITE-12823.

Ignite client calls deployed service and fails with the following exception:
{code:java}
Apache.Ignite.Core.Common.JavaException: class org.apache.ignite.IgniteException: Failed to invoke proxy: there is no method 'processSomething' in type 'SomeService' with (Int32, Object[]) arguments
	at org.apache.ignite.internal.processors.platform.callback.PlatformCallbackUtils.inLongOutLong(Native Method)
	at org.apache.ignite.internal.processors.platform.callback.PlatformCallbackGateway.serviceInvokeMethod(PlatformCallbackGateway.java:942)
	at org.apache.ignite.internal.processors.platform.services.PlatformAbstractService.invokeMethod(PlatformAbstractService.java:214)
	at org.apache.ignite.internal.processors.platform.services.PlatformAbstractService.invokeMethod(PlatformAbstractService.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ignite.internal.processors.service.GridServiceProxy$ServiceProxyCallable.callService(GridServiceProxy.java:491)
	at org.apache.ignite.internal.processors.service.GridServiceProxy$ServiceProxyCallable.call(GridServiceProxy.java:469)
	at org.apache.ignite.internal.processors.closure.GridClosureProcessor$C2.execute(GridClosureProcessor.java:1847)
	at org.apache.ignite.internal.processors.job.GridJobWorker$2.call(GridJobWorker.java:598)
	at org.apache.ignite.internal.util.IgniteUtils.wrapThreadLoader(IgniteUtils.java:7077)
	at org.apache.ignite.internal.processors.job.GridJobWorker.execute0(GridJobWorker.java:592)
	at org.apache.ignite.internal.processors.job.GridJobWorker.body(GridJobWorker.java:521)
	at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120)
	at org.apache.ignite.internal.processors.job.GridJobProcessor.processJobExecuteRequest(GridJobProcessor.java:1368)
	at org.apache.ignite.internal.processors.job.GridJobProcessor$JobExecutionListener.onMessage(GridJobProcessor.java:2130)
	at org.apache.ignite.internal.managers.communication.GridIoManager.invokeListener(GridIoManager.java:1907)
	at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:1528)
	at org.apache.ignite.internal.managers.communication.GridIoManager.access$5300(GridIoManager.java:241)
	at org.apache.ignite.internal.managers.communication.GridIoManager$9.execute(GridIoManager.java:1421)
	at org.apache.ignite.internal.managers.communication.TraceRunnable.run(TraceRunnable.java:55)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}
Service interface itself looks like this:
{code:java}
public interface SomeService : IService
{
    int processSomething(int foo, Parameter[] parameters);

    int processSomething(int foo, int bar);
}

public class Parameter {     
    private int id;     
    private ParamValue[] _values;      
    public Parameter(int id, ParamValue[] _values)     {  
       this.id = id;         
       this._values = _values;     
    }
 }

  public class ParamValue { 
    private int id;     
    private double val;      
    public ParamValue(int id, double val)     {  
       this.id = id;        
       this.val = val;   
    }
 }

{code}
And the call to the service:
{code:java}
var svc = igniteServices.GetServiceProxy<T>(name, false);
var result = svc.processSomething(id, parameters);
{code}
Please note, that if there's no overloaded methods, at least in our experiments we found out that it does reproduce with equal number of parameters in overloaded methods (e.g. here we have overloaded methods that take 2 parameters each), then the code works like a charm.

Fix in IGNITE-12823 addresses particular code execution path where the execution flow goes through PlatformServices class. Yet in this case our code goes through PlatformAbstractService. I think that the fix of casting arrays should be positioned a little bit lower in the call stack (or higher in code hierarchy) so all execution paths are covered simultaneously. ",.NET,['platforms'],IGNITE,Bug,Major,2020-12-23 14:10:44,2
13347317,.NET: Performance: Refactor BinarySystemHandlers.TryReadSystemType to switch-case,"{{BinarySystemHandlers.TryReadSystemType}} is too clever with interfaces and generics:
* Hard to understand and maintain
* Possibly causes overhead due to virtual method calls

Refactor to switch-case and check if performance improves.",.NET,['platforms'],IGNITE,Improvement,Minor,2020-12-22 09:46:07,0
13346363,.NET: DateTime can't be used as a cache key or value,"For now, DateTime can't be used as an interoperable cache key or value because {{BinaryReflectiveSerializer#forceTimestamp}} works only for object fields.",.NET sbcf,['platforms'],IGNITE,Bug,Major,2020-12-16 13:28:30,2
13346156,.NET: Build scripts and instructions cleanup,"The one and only build script is *build.ps1*.

* Remove *build-mono.sh* - Ignite does not work properly under Mono
* Change *build.sh* to delegate to *build.ps1* same way as *build.bat* does
* Update *build.ps1* to work by default on Linux/macOS: instead of looking for Mono msbuild, simply skip .NET Framework build part and print a warning along the lines of "".NET Core build succeeded. Full Ignite.NET build requires Windows and .NET Framework 4.x."". Using msbuild from Mono produces incorrect results anyway.
* Update *build.ps1* to print a summary at the end, something like ""Java build succeeded, .NET Framework build skipped, .NET Core build succeeded.""
* Update README files accordingly",.NET,['platforms'],IGNITE,Improvement,Minor,2020-12-15 17:10:51,0
13344602,.NET: RendezvousAffinityFunction.BackupFilter,"* Add {{RendezvousAffinityFunction.BackupFilter}} property
* Allow single predefined implementation: {{ClusterNodeAttributeAffinityBackupFilter}}",.NET,['platforms'],IGNITE,Improvement,Major,2020-12-07 15:35:41,0
13342718,C++: Add a configuration property allowing thin CPP client to limit connection count.,It seems that C++ thin client behaves differently from Java client. Assuming that partition awareness is disabled we still have connection attempts to all servers from the list. It would be great to have a property to limit it somehow. It could potentially cause performance issues in some cases involving big number of clients per server.,cpp,['thin client'],IGNITE,Improvement,Major,2020-11-25 21:51:15,3
13342624,.NET: GetAffinity fails with NullPointerException on client node,"* Given there are Ignite.NET server and client nodes
* When the server node creates a cache and then the client node immediately gets affinity for the cache
* Then getting affinity fails with NullPointerException

{code:c#}
IgniteConfiguration IgniteCfg(bool clientMode = false) => new IgniteConfiguration
{
    ClientMode = clientMode,
    IgniteInstanceName = Guid.NewGuid().ToString(),
    DiscoverySpi = new TcpDiscoverySpi
    {
        IpFinder = new TcpDiscoveryStaticIpFinder
        {
            Endpoints = new[] { ""127.0.0.1:47500"" }
        }
    }
};
using var igniteSrv = Ignition.Start(IgniteCfg());
using var igniteClient = Ignition.Start(IgniteCfg(true));
var cache1 = igniteSrv.GetOrCreateCache<int, string>(""cache1"");
igniteClient.GetAffinity(""cache1"");
{code}

The igniteClient.GetAffinity fails with this exception:
{code}
Apache.Ignite.Core.Common.IgniteException
  HResult=0x80131500
  Message=Java exception occurred [class=java.lang.NullPointerException, message=]
  Source=Apache.Ignite.Core
  StackTrace:
   at Apache.Ignite.Core.Impl.PlatformJniTarget.InStreamOutObject(Int32 type, Action`1 writeAction)
   at Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutOpObject(Int32 type, Action`1 action)
   at Apache.Ignite.Core.Impl.Ignite.Apache.Ignite.Core.Impl.IIgniteInternal.GetAffinity(String cacheName)
   at Apache.Ignite.Core.Impl.Ignite.GetAffinity(String cacheName)
   at DotNet.Sandbox.Program.Main(String[] args) in C:\Dev\tmp\DotNet.Sandbox\Program.cs:line 32
  This exception was originally thrown at this call stack:
    Apache.Ignite.Core.Impl.Unmanaged.Jni.Env.ExceptionCheck()
    Apache.Ignite.Core.Impl.Unmanaged.Jni.Env.CallObjectMethod(Apache.Ignite.Core.Impl.Unmanaged.Jni.GlobalRef, System.IntPtr, long*)
    Apache.Ignite.Core.Impl.Unmanaged.UnmanagedUtils.TargetInStreamOutObject(Apache.Ignite.Core.Impl.Unmanaged.Jni.GlobalRef, int, long)
    Apache.Ignite.Core.Impl.PlatformJniTarget.InStreamOutObject(int, System.Action<Apache.Ignite.Core.Impl.Binary.IO.IBinaryStream>)
Inner Exception 1:
JavaException: java.lang.NullPointerException
	at org.apache.ignite.internal.processors.platform.cache.affinity.PlatformAffinity.<init>(PlatformAffinity.java:125)
	at org.apache.ignite.internal.processors.platform.PlatformProcessorImpl.processInStreamOutObject(PlatformProcessorImpl.java:640)
	at org.apache.ignite.internal.processors.platform.PlatformTargetProxyImpl.inStreamOutObject(PlatformTargetProxyImpl.java:79)
{code}

h1. Workaround
Add {{GetCache}} call before {{GetAffinity}}:
{code:c#}
...
var cache1 = igniteSrv.GetOrCreateCache<int, string>(""cache1"");
igniteClient.GetCache<int, string>(""cache1"");
igniteClient.GetAffinity(""cache1"");
{code}
",.NET,['platforms'],IGNITE,Bug,Major,2020-11-25 14:47:59,0
13342603,.NET: Add support for dotnet-example global tool,https://github.com/patriksvensson/dotnet-example is a nice way to present and run examples.,.NET,['platforms'],IGNITE,Improvement,Minor,2020-11-25 13:11:42,0
13342542,.NET: Inspections fail after TC upgrade - unused classes detected,"{code}
 Enum 'CacheFlags' is never used
{code}",.NET,['platforms'],IGNITE,Bug,Minor,2020-11-25 07:34:48,0
13342536,.NET: LINQ provider emits incorrect table alias for queries with JOIN and GROUP BY combined,"See the attached reproducer. Generated SQL is:
{code}
select _T0.MEETINGID, max (_T0.AttachmentDate)  from USERSCHEMA.MEETING as _T0 inner join USERSCHEMA.MEETINGATTACHMENT as _T1 on (_T1.MEETINGID = _T0.MEETINGID) group by (_T0.MEETINGID)
{code}

{{_T0.AttachmentDate}} should be {{_T1.AttachmentDate}} here.",.NET,['platforms'],IGNITE,Bug,Major,2020-11-25 06:48:27,0
13342336,Schema configuration public API,"Let's implement a public API classes for initial schema declaration. Considering next:
 * It should be possible to create schema without having any Class instance, like we do now with QueryEntity. 
 * -Automatic schema creation based on annotated classes, like we have in ccfg.setIndexedTypes()- IGNITE-13749
 * -Transient fields semantic.- IGNITE-13749
 * Using builder pattern for schema configuration.
 * Split type-system into internal native-types (introduced IGNITE-13617) and public API types. The latest ones should be portable (e.g. could be used in .Net)
 * API can be extracted to separate module that will not have any dependency on other Ignite modules.",iep-54 ignite-3,['sql'],IGNITE,Improvement,Major,2020-11-24 10:36:42,1
13338702,Skip writing null-map and varlen table when possible.,"h3. Motivation.
The nullmap is currently always written to the tuple layout for all columns 
even if there are no nullable columns described in the schema.
The same is true and can be done for varlen table.

Seems, we can extend this idea to every single tuple and still have the ability to compare key/value content fast as byte arrays.
Apparently, this will work for rows of same schema version, but we shouldn't bother about the schema version,
because anyway, old row will be upgraded to the newer version before comparison according to the live-schema concept.

h3. Description.
Let's skip an empty nullmap and write just a flag instead.
Let's skip an empty varlen table and write just a flag instead.

",iep-54 ignite-3 newbie,[],IGNITE,Improvement,Major,2020-11-03 17:48:14,1
13338701,Type system. Date&time native types.,"Besides the types themselves, it may be beneficial to provide date/time field extraction methods so that they can be read without object creation. The layout is described in the IEP.",iep-54 ignite-3,[],IGNITE,Improvement,Major,2020-11-03 17:43:39,1
13338630,.NET: Thin client transactions example,"We have no examples for many main features in thin clients
Not so long time ago was added transactions in Dotnet
It's better to add appropriate examples for these features",.NET,"['examples', 'platforms', 'thin client']",IGNITE,Wish,Major,2020-11-03 12:16:23,0
13337713,.NET: Type cast exception on cache.Get with an array of empty Lists,"[^exception.txt] contains the stack trace
[^stream_dump.txt]  contains the stream that fails, dumped using System.Text.Encoding.UTF8.GetString

[^BotXEntityDto.cs] contains the dto definition

Minimal reproducer:
{code}
using System.Collections.Generic;
using Apache.Ignite.Core;

var ignite = Ignition.Start();
var cache = ignite.GetOrCreateCache<int, Entity[]>(""c"");

cache.Put(1, new[]
{
    new Entity {Inner = new List<object>()},
    new Entity {Inner = new List<object>()}
});

cache.Get(1);

class Entity
{
    public IList<object> Inner { get; set; }
}
{code}

Works on 2.8.0, fails on 2.9.1.
The problem is that IGNITE-12827 has changed the detach semantics for arrays and collections, and this revealed the problem on .NET side: array and collection elements can share handles (same object references), which is a problem, because Java handles every element separately. And the bug occurs because an empty list has {{_items}} initialized to a shared empty array instance.

*Workaround*: use {{List<Entity>}} instead of {{Entity[]}}",.NET 2.9.1-rc,['platforms'],IGNITE,Bug,Critical,2020-10-28 17:24:57,0
13337653,ODBC driver assigns SQL_BINARY type to DATE fields,"""The DATE types should not be reported as SQL_BINARY. They should be returned as SQL_DATE""
{noformat}
DATE_FIELD DataType SQL_BINARY, DecimalDigits 0, Nullable 2, ColumnSize 10, UnsignedNumber 1, is_output_column 
{noformat}",odbc,['odbc'],IGNITE,Bug,Major,2020-10-28 12:04:38,3
13337649,.NET: OOM due to integer overflow in PlatformOutputStream,"{{PlatformOutputStreamImpl.unsafeEnsure}} causes integer overflow, then passes a negative value to {{PlatformCallbackGateway.memoryReallocate}} from there it is passed to {{Marshal.ReAllocHGlobal}}, which throws an OutOfMemoryException.

Reproducer:
{code}
var val = new byte[100_000_000];
var ignite = Ignition.Start();
var cache = ignite.CreateCache<int, byte[]>(""c"");

for (int i = 0; i < 30; i++) // ~3GB of cache data
    cache[i] = val;

cache.Query(new ScanQuery<int, byte[]>()).GetAll();
{code}

We should handle this condition gracefully: detect stream size limit and throw an exception explaining how to fix the problem (use smaller pageSize for queries, for example).",.NET,['platforms'],IGNITE,Bug,Minor,2020-10-28 11:48:25,0
13337240,Critical system error when unregister a JMX bean,"Critical system error when unregister a JMX bean

{noformat}
[2020-10-26T14:10:55,411][ERROR][disco-event-worker-#71][] Critical system error detected. Will be handled accordingly to configured handler [hnd=StopNodeOrHaltFailureHandler [tryStop=false, timeout=0, super=AbstractFailureHandler [ignoredFailureTypes=UnmodifiableSet [SYSTEM_WORKER_BLOCKED, SYSTEM_CRITICAL_OPERATION_TIMEOUT]]], failureCtx=FailureContext [type=SYSTEM_WORKER_TERMINATION, err=java.lang.AssertionError]]
java.lang.AssertionError: null
	at org.apache.ignite.spi.metric.jmx.JmxMetricExporterSpi.unregister(JmxMetricExporterSpi.java:110) ~[classes/:?]
	at org.apache.ignite.internal.util.IgniteUtils.notifyListeners(IgniteUtils.java:11740) ~[classes/:?]
	at org.apache.ignite.internal.processors.metric.GridMetricManager.remove(GridMetricManager.java:418) ~[classes/:?]
	at org.apache.ignite.internal.managers.GridManagerAdapter$1.removeMetricRegistry(GridManagerAdapter.java:615) ~[classes/:?]
	at org.apache.ignite.spi.communication.tcp.TcpCommunicationMetricsListener.onNodeLeft(TcpCommunicationMetricsListener.java:399) ~[classes/:?]
	at org.apache.ignite.spi.communication.tcp.internal.CommunicationDiscoveryEventListener.onNodeLeft(CommunicationDiscoveryEventListener.java:77) ~[classes/:?]
	at org.apache.ignite.spi.communication.tcp.internal.CommunicationDiscoveryEventListener.onEvent(CommunicationDiscoveryEventListener.java:62) ~[classes/:?]
	at org.apache.ignite.internal.managers.eventstorage.GridEventStorageManager$LocalListenerWrapper.onEvent(GridEventStorageManager.java:1399) ~[classes/:?]
	at org.apache.ignite.internal.managers.eventstorage.GridEventStorageManager.notifyListeners(GridEventStorageManager.java:894) ~[classes/:?]
	at org.apache.ignite.internal.managers.eventstorage.GridEventStorageManager.notifyListeners(GridEventStorageManager.java:877) ~[classes/:?]
	at org.apache.ignite.internal.managers.eventstorage.GridEventStorageManager.record0(GridEventStorageManager.java:350) ~[classes/:?]
	at org.apache.ignite.internal.managers.eventstorage.GridEventStorageManager.record(GridEventStorageManager.java:313) ~[classes/:?]
	at org.apache.ignite.internal.managers.discovery.GridDiscoveryManager$DiscoveryWorker.recordEvent(GridDiscoveryManager.java:2889) ~[classes/:?]
	at org.apache.ignite.internal.managers.discovery.GridDiscoveryManager$DiscoveryWorker.body0(GridDiscoveryManager.java:3105) ~[classes/:?]
	at org.apache.ignite.internal.managers.discovery.GridDiscoveryManager$DiscoveryWorker.body(GridDiscoveryManager.java:2909) [classes/:?]
	at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120) [classes/:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_202]
{noformat}",2.9.1-rc,[],IGNITE,Bug,Blocker,2020-10-26 15:49:23,2
13336917,Provide generated and reflection-based class (de)serializers,"h3. Motivation.
It may worth having generated serializer code for performance reasons. However, this should be proved with benchmarks.

h3. Description.
Let's prototype object serializer for type-system described in IEP-54, and benchmark them to check if generated code approach is a better one.
 * As we go with Java11 then VarHandles must be used instead of Unsafe.
 * For generated serializer we can use: JDK compiler + Javapoet project (Java code generator) or Janino compiler or even  Prestodb-bytecode module of PrestoDB project

*UPD*: JDK compile is too slow, Janino doesn't support Java9+ and VarHandles, Prestodb-bytecode has an unwanted Guava dependency.
So, forking Prestodb without Guava looks like a preferable way.
",iep-54 ignite-3,['sql'],IGNITE,Improvement,Major,2020-10-23 12:20:46,1
13336903,.NET: Fix failover-related documentation,"The following page incorrectly mentions that failover is not supported in .NET Thin Client
https://ignite.apache.org/docs/latest/thin-clients/getting-started-with-thin-clients

* Fix this and review the feature table - transactions are also not specified correctly
* Make sure to update 2.9-docs branch",.NET,"['documentation', 'platforms']",IGNITE,Improvement,Major,2020-10-23 10:34:03,0
13336641,.NET: Add Partitions and UpdateBatchSize to SqlFieldsQuery,"IGNITE-4523 and IGNITE-11499 added new options to SqlFieldsQuery, propagate .NET:
* {{SqlFieldsQuery.Partitions}}, {{QueryOptions.Partitions}}
* {{SqlFieldsQuery.UpdateBatchSize}}, {{QueryOptions.UpdateBatchSize}}

Make sure this works with thin clients too - needs a feature flag.",.NET newbie,['platforms'],IGNITE,Improvement,Major,2020-10-22 06:18:28,0
13336301,.NET: TypeResolver uses legacy ReflectionOnlyLoad,"ReflectionOnlyLoad is not supported on .NET Core [1] [2]

* Replace ReflectionOnlyLoad with System.Reflection.Metadata if possible
* Enable TestReferencedAssemblyLoading


[1] https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.reflectiononlyload?view=netcore-3.1
[2] https://github.com/dotnet/runtime/issues/7452",.NET,['platforms'],IGNITE,Bug,Minor,2020-10-20 13:57:00,0
13336097,Add flag to DataRecord to differentiate records on primary and backup nodes,To be able to minimize CDC processing volume we should be able to differentiate DataRecords in WAL on primary and backup nodes.,IEP-59,[],IGNITE,Improvement,Major,2020-10-19 15:40:41,2
13336037,.NET: Incorrect GetTotalPhysicalMemory result in Docker,"{{MemoryInfo.GetTotalPhysicalMemory}} uses {{/proc/meminfo}} on Linux, which does not take Docker memory limit into account.

This affects:
* {{DataRegionConfiguration.DefaultMaxSize}}
* {{MemoryPolicyConfiguration.DefaultMaxSize}}

The following tests fail in Docker when memory limit is set:
* {{IgniteConfigurationTest.TestSpringXml}}
* {{IgnitionStartTest.TestIgniteStartsFromSpringXml}}",.NET,['platforms'],IGNITE,Bug,Major,2020-10-19 10:31:43,0
13335780,.NET: Incorrect binary type name is registered for generic query types,"Using a generic type as a QueryEntity value type results in a wrong type name being registered in QueryEntities and a wrong typeId being calculated for the binary metadata:

{code}
            var ignite = Ignition.Start(TestUtils.GetTestConfiguration());

            var cfg = new CacheConfiguration(TestUtils.TestName)
            {
                QueryEntities = new[] {new QueryEntity(typeof(int), typeof(GenericTest<string>))}
            };

            var cache = ignite.GetOrCreateCache<int, GenericTest<string>>(cfg);
            cache[1] = new GenericTest<string> {Prop = ""foo""};

            var binType = ignite.GetBinary().GetBinaryTypes().Single();

            Assert.AreEqual(-590542188, binType.TypeId); // 945954881 with QueryEntity
            Assert.AreEqual(
                ""Apache.Ignite.Core.Tests.Cache.Query.CacheQueriesCodeConfigurationTest+GenericTest`1[[System.String]]"",
                cache.GetConfiguration().QueryEntities.Single().ValueTypeName); // Includes assembly name with query entity
{code}

{{BinaryUtils.GetSqlTypeName}} returns Type.FullName, which includes assembly-qualified type names for all generic type arguments.
This causes the following problems:
* SQL type name includes assembly versions, so queries stop working if there is a version change
* Incorrect binary type id is registered, because due to IGNITE-13160 changes the string from {{BinaryUtils.GetSqlTypeName}} gets passed back to {{UnmanagedCallbacks.BinaryTypeGet}}",.NET 2.9.1-rc,['platforms'],IGNITE,Bug,Major,2020-10-16 13:28:02,0
13335402,WAL force rollout timeout,"Currently, Ignite doesn't have a timeout to force WAL segments to rollout.
We need to introduce one to be able to provide some lag guarantees for the CDC application.

",IEP-59,[],IGNITE,Improvement,Major,2020-10-14 11:56:21,2
13335401,CDC Application,As described in [IEP-59|https://cwiki.apache.org/confluence/display/IGNITE/IEP-59+CDC+-+Capture+Data+Change] we need to create IgniteCDC application that can notifies the consumer about new WAL events.,IEP-59 important,[],IGNITE,Improvement,Major,2020-10-14 11:54:05,2
13334191,.NET: Enable ClientServerCompatibilityTest on Linux,ClientServerCompatibilityTest is disabled on Linux because it hangs. The problem is now understood: IGNITE-13536. Use the workaround - create processes from Java - and enable the test on all platforms and frameworks.,.NET,['platforms'],IGNITE,Improvement,Minor,2020-10-07 13:42:15,0
13334059,.NET: Child processes become zombies when persistence is used with direct-io on Linux,"After using Ignite with direct-io optional module and persistence enabled, user code hangs when trying to kill a child process and wait for it to exit using base class library classes (Process). 

See attached reproducer:
* Copy .cs and .csproj files to a folder
* dotnet run

The program hangs forever on the last line (process.WaitForExit()), and the child process becomes a zombie (defunct).
* Similar Java program (see attachments) does not reproduce the issue",.NET 2.9.1-rc,['platforms'],IGNITE,Bug,Major,2020-10-06 19:36:56,0
13330408,.NET: Release build does not fail when compilation fails,"build.ps1 does not fail when compilation fails, leading to unexpected issues later in the release build. ",.NET,['platforms'],IGNITE,Improvement,Major,2020-10-01 17:04:51,0
13329293,C++ odbc-example losing some values if run with 1 additional node,"Case:
- run 1 additional node
- run odbc-example

Actual:
{code}
>>> Cache ODBC example started.


>>> Getting list of persons:
>>> John Doe Master Degree. 2200 
>>> John Smith Bachelor Degree. 1700 
>>> Jane Smith Master Degree. 2500 
>>> John Roe Bachelor Degree. 1500 
>>> Jane Roe Bachelor Degree. 1000 
>>> Richard Miles Master Degree. 2400 
>>> Mary Major Bachelor Degree. 900 
>>> Jane Doe Bachelor Degree. 1300

>>> Getting average salary by degree:
>>> Bachelor Degree. 1280 
>>> Master Degree. 2366.67

>>> Getting people with organizations:
>>> John Doe Microsoft 
>>> Richard Miles Microsoft


>>> Adjusted salary for Mary Major. Querying again.

>>> Getting list of persons:
>>> John Doe Master Degree. 2200 
>>> John Smith Bachelor Degree. 1700 
>>> Jane Smith Master Degree. 2500 
>>> John Roe Bachelor Degree. 1500 
>>> Jane Roe Bachelor Degree. 1000 
>>> Richard Miles Master Degree. 2400 
>>> Mary Major Bachelor Degree. 1200 
>>> Jane Doe Bachelor Degree. 1300

>>> Getting average salary by degree:
>>> Bachelor Degree. 1340 
>>> Master Degree. 2366.67

>>> Getting people with organizations:
>>> John Doe Microsoft 
>>> Richard Miles Microsoft


>>> Removing several employees. Querying again.

>>> Getting list of persons:
>>> John Doe Master Degree. 2200 
>>> John Smith Bachelor Degree. 1700 
>>> Jane Roe Bachelor Degree. 1000 
>>> Richard Miles Master Degree. 2400 
>>> Mary Major Bachelor Degree. 1200 
>>> Jane Doe Bachelor Degree. 1300

>>> Getting average salary by degree:
>>> Bachelor Degree. 1300 
>>> Master Degree. 2300

>>> Getting people with organizations:
>>> John Doe Microsoft 
>>> Richard Miles Microsoft 
[12:10:00] Ignite node stopped OK [uptime=00:00:00.876]

>>> Example finished, press 'Enter' to exit ...
{code}

Output with 0 addition nodes
{code}

>>> Cache ODBC example started.


>>> Getting list of persons:
>>> John Doe Master Degree. 2200 
>>> Jane Doe Bachelor Degree. 1300 
>>> John Smith Bachelor Degree. 1700 
>>> Jane Smith Master Degree. 2500 
>>> John Roe Bachelor Degree. 1500 
>>> Jane Roe Bachelor Degree. 1000 
>>> Richard Miles Master Degree. 2400 
>>> Mary Major Bachelor Degree. 900

>>> Getting average salary by degree:
>>> Bachelor Degree. 1280 
>>> Master Degree. 2366.67

>>> Getting people with organizations:
>>> John Doe Microsoft 
>>> Jane Doe Microsoft 
>>> John Smith Red Cross 
>>> Jane Smith Red Cross 
>>> John Roe Red Cross 
>>> Jane Roe Red Cross 
>>> Richard Miles Microsoft 
>>> Mary Major Red Cross


>>> Adjusted salary for Mary Major. Querying again.

>>> Getting list of persons:
>>> John Doe Master Degree. 2200 
>>> Jane Doe Bachelor Degree. 1300 
>>> John Smith Bachelor Degree. 1700 
>>> Jane Smith Master Degree. 2500 
>>> John Roe Bachelor Degree. 1500 
>>> Jane Roe Bachelor Degree. 1000 
>>> Richard Miles Master Degree. 2400 
>>> Mary Major Bachelor Degree. 1200

>>> Getting average salary by degree:
>>> Bachelor Degree. 1340 
>>> Master Degree. 2366.67

>>> Getting people with organizations:
>>> John Doe Microsoft 
>>> Jane Doe Microsoft 
>>> John Smith Red Cross 
>>> Jane Smith Red Cross 
>>> John Roe Red Cross 
>>> Jane Roe Red Cross 
>>> Richard Miles Microsoft 
>>> Mary Major Red Cross


>>> Removing several employees. Querying again.

>>> Getting list of persons:
>>> John Doe Master Degree. 2200 
>>> Jane Doe Bachelor Degree. 1300 
>>> John Smith Bachelor Degree. 1700 
>>> Jane Roe Bachelor Degree. 1000 
>>> Richard Miles Master Degree. 2400 
>>> Mary Major Bachelor Degree. 1200

>>> Getting average salary by degree:
>>> Bachelor Degree. 1300 
>>> Master Degree. 2300

>>> Getting people with organizations:
>>> John Doe Microsoft 
>>> Jane Doe Microsoft 
>>> John Smith Red Cross 
>>> Jane Roe Red Cross 
>>> Richard Miles Microsoft 
>>> Mary Major Red Cross 
[12:08:42] Ignite node stopped OK [uptime=00:00:00.687]

>>> Example finished, press 'Enter' to exit ...
{code}",2.9.1-rc,['odbc'],IGNITE,Bug,Major,2020-09-24 21:47:04,3
13328690,.NET: Add async counterparts to all applicable thin client APIs,"Add async counterparts to the following .NET Thin Client APIs
* ICacheClient.GetConfiguration
* IClientCluster - all methods
* IClientClusterGroup.GetNodes, GetNode
* IIgniteClient - CreateCache, GetOrCreateCache, DestroyCache",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2020-09-22 05:14:50,0
13328470,.NET: Thin client Dispose hangs when continuous query is active on .NET Core 3.x,"* Switch all projects to netcoreapp3.0 (or 3.1)
* Run Apache.Ignite.Core.Tests.Client.Cache.ContinuousQueryTest - it hangs on ClientSocket.Dispose

Looks like Socket.Shutdown call is missing, or we can use Socket.Close with a timeout.
Also see https://github.com/dotnet/runtime/issues/23990:

{code:java}
The native behavior of closing a socket file descriptor while it's being used in a synchronous/blocking accept/connect/send/recv/etc. call is undefined on Linux, and often results in a hang
{code}


",.NET 2.9.1-rc,['platforms'],IGNITE,Bug,Major,2020-09-21 07:20:13,0
13328341,.NET: Thin client can't be collected by GC when Dispose was not called,"If the user forgets to call IIgniteClient.Dispose, thin client objects will remain in memory forever.

Thin client creates a dedicated response reader thread that holds a reference to the entire thin client object tree though Marshaller object.

We should detect this scenario and clean up properly.",.NET,"['platforms', 'thin client']",IGNITE,Bug,Minor,2020-09-19 07:57:28,0
13327877,Thin Client Ping API,"Add ping API to thin clients: IgniteClient.ping() (Java), IIgniteClient.Ping() (.NET) and async counterparts.",.NET newbie,"['platforms', 'thin client']",IGNITE,Improvement,Major,2020-09-16 15:07:14,0
13326703,Explicit command.sh option to enable experimental commands,"Right now experimental commands can be enabled only via an environment variable(IGNITE_ENABLE_EXPERIMENTAL_COMMAND).
We need to add an explicit option to command.sh ""--enable-experimental"" which will turn on experimental commands.",2.9.1-rc,[],IGNITE,Improvement,Major,2020-09-09 16:17:55,2
13326270,System view for metastorage items,"We need to provide a System view to show metastorage and distributed metastorage properties.
",2.9.1-rc IEP-35 important,[],IGNITE,Improvement,Major,2020-09-07 08:45:41,2
13326269,System view for binary metadata,"Currently, list of binary metadata available via experimental {{control.sh}} command.
We need to provide a corresponding System view for this information.",2.9.1-rc IEP-35 important,[],IGNITE,Improvement,Major,2020-09-07 08:45:20,2
13324196,Output IgniteSystemProperties via ignite.sh,"Provide the ability output of all available Ignite properties ({{IgniteSystemProperties}}) with its descriptions in the {{ignite.sh}} command. For example, 
{noformat}
ignite.sh -systemProps
{noformat}",2.9.1-rc important,[],IGNITE,New Feature,Major,2020-08-24 07:18:45,2
13323926,.NET: Thin Client: Use non-blocking socket IO,".NET Thin Client was initially developed for Windows and .NET Framework. Benchmarks at that time proved that blocking socket IO was faster for single-threaded workload, and we developed a solution with a dedicated thread for response handling, and async APIs use blocking writes.

We may want to reconsider this design:
* Scalability is often more important than single-threaded performance
* .NET Core has many perf improvements over .NET Framework

Investigate async socket IO performance on .NET Core 3.x/5.x compared to the current approach on Windows and Linux and refactor ClientSocket accordingly to avoid any blocking and a dedicated thread usage.
",.NET,['platforms'],IGNITE,Improvement,Major,2020-08-21 09:46:52,0
13323186,.NET: Local node info is not updated on client reconnect,"{{Ignite._locNode}} field caches local node information, and this cache info is not updated on client reconnect. We should remove cached info on every disconnect.",.NET,['platforms'],IGNITE,Bug,Major,2020-08-18 09:23:51,0
13322599,.NET: Add GetServiceDescriptors to Thin Client Services,Add IServicesClient.GetServiceDescriptors - thin clients should be able to discover available services.,.NET,['platforms'],IGNITE,Improvement,Major,2020-08-13 19:31:28,0
13322498,.NET: Add includeExpired to ContinuousQuery,Add includeExpired flag to ContinuousQuery (thick and thin modes) to track entry expiration.,.NET,['platforms'],IGNITE,Improvement,Major,2020-08-13 09:14:12,0
13321993,Migrate ZookeeperDiscoveryStatistics to new metrics framework,ZookeeperDiscoveryStatistics should be migrated to the new metrics framework.,IEP-35,[],IGNITE,Improvement,Major,2020-08-11 11:35:07,2
13321987,Migrate TcpDiscoveryStatistics to new metrics framework,TcpDiscoveryStatistics should be migrated to the new metrics framework.,IEP-35,[],IGNITE,Improvement,Major,2020-08-11 11:21:45,2
13321963,Add InitialSize and MaxSize to DataRegion metrics,{{DataRegionMetricsMXBean}} contains {{MaxSize}} and {{InitialSize}} values but new framework doesn't provide those values. We should add it to the 'io.dataregion.[region_name]' metrics registry.,IEP-35,[],IGNITE,Improvement,Major,2020-08-11 08:48:25,2
13321652,.NET: Thin Client: Async service calls,"Thin client is inherently asynchronous. We should allow async service calls: when service interface has an async method (returns Task or Task<T>), we should make the underlying call with {{ClientSocket.DoOutInOpAsync}}.

This will require proper task handling in UnmanagedCallbacks.ServiceInvokeMethod: when a Task is returned, wait for its completion and unwrap the result/exception.",.NET,['platforms'],IGNITE,Improvement,Minor,2020-08-08 19:18:12,0
13321252,Document .NET thin client features implemented in 2.9 release,"Document .NET thin client features:
* Cluster API
* Cluster group API
* Compute API
* Server discovery",important,['documentation'],IGNITE,Task,Major,2020-08-06 07:38:09,0
13320862,.NET: GetJvmDllPathsWindows does not work on .NET Core,"GetJvmDllPathsWindows implementation is hidden with preprocessor directives on .NET Core, because it uses Windows Registry, which is not available by default.

We should use Microsoft.Win32.Registry NuGet package to make it work.",.NET,['platforms'],IGNITE,Bug,Major,2020-08-04 13:23:31,0
13318907,.NET: Enum serialization is slow,"BinaryWriter.SaveMetadata has performance issues when enums are present:
every enum write causes GetEnumValues call in BinaryType, which uses reflection.

We should cache enum values per type.",.NET,['platforms'],IGNITE,Bug,Major,2020-07-23 11:18:54,0
13318684,.NET: Add true NuGet multi-targeting,"Right now we pack the same .NET 4.0 dll as `net40` and `netstandard2.0` (see nuspec file). While this works well, we can't truly use conditional compilation to leverage modern .NET features (e.g. async transaction flow). 

* Fix the build procedure to include true .NET Core assembly into the NuGet package
* Make sure .NET Core tests run on Windows as well as on Linux (update TeamCity projects)
* Fix JVM dll detection (right now Windows Registry is excluded on .NET Core - bug)
* Review all `#if` conditions to make sure we deliver proper code on all platforms",.NET,['platforms'],IGNITE,Improvement,Major,2020-07-22 11:40:50,0
13315416,.NET: Thin Client Compute leaks ClientNotificationHandler instances,"In multithreaded thin client compute scenarios there is a possibility for ClientNotificationHandler leak: handlers remain in ClientSocket._notificationListeners even after corresponding tasks have completed.

To reproduce, add the following code at the end of ComputeClientTests.TestExecuteJavaTaskAsyncMultithreaded:

{code}
            var failoverSocket = TestUtils.GetPrivateField<ClientFailoverSocket>(client, ""_socket"");
            var socket = TestUtils.GetPrivateField<ClientSocket>(failoverSocket, ""_socket"");
            var listeners = TestUtils.GetPrivateField<ICollection>(socket, ""_notificationListeners"");
            Assert.IsEmpty(listeners);
{code}",.NET,['platforms'],IGNITE,Bug,Critical,2020-07-07 14:10:31,0
13315210,.NET: Consolidate tests - get rid of Tests.DotNetCore folder,"Right now we have a separate directory for .NET Core tests, and most test files are shared across Apache.Ignite.Core.Tests and Apache.Ignite.Core.Tests.DotNetCore projects.

Move Apache.Ignite.Core.Tests.DotNetCore.csproj to Apache.Ignite.Core.Tests directory, so that all tests are included into DotNetCore project by default.

Incompatible tests should be excluded specifically from the project, or using compiler directives (#if !NETCOREAPP).",.NET,['platforms'],IGNITE,Improvement,Minor,2020-07-06 18:20:26,0
13315032,.NET different behavior when using TransactionScope and  ITransactions.Start,"Next code runs fine:

{code:c#}
            var barier = new Barrier(2);
            var cache = Cache();
            cache.Put(1, 1);
            var task = Task.Factory.StartNew(() =>
            {
                var otherCache = Cache();
                barier.SignalAndWait();
                otherCache.Put(1, 10);
                barier.SignalAndWait();
            });
            using (var txscp = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions{IsolationLevel = IsolationLevel.Serializable}))
            {
                var before = cache.Get(1);
                barier.SignalAndWait();
                barier.SignalAndWait();
                txscp.Complete();
            }
            Task.WaitAll(task);
            barier.Dispose();
{code}

When I switch to Ignite transactions I get exception:

{code:c#}
            using (var tx = Transactions.TxStart(TransactionConcurrency.Optimistic, TransactionIsolation.Serializable))
            {
                var before = cache.Get(1);
                barier.SignalAndWait();
                barier.SignalAndWait();
                tx.Commit();
            }
{code}

{noformat}
Apache.Ignite.Core.Transactions.TransactionOptimisticException : Failed to prepare transaction (lock conflict): GridNearTxLocal [mappings=IgniteTxMappingsImpl [], 
{noformat}

_Cache_ is _IIgnite.Cache<int, int>()_  and _Transactions_ is _IIgnite.GetTransactions()_",.NET transactions,['platforms'],IGNITE,Bug,Critical,2020-07-05 13:45:03,0
13311278,Thin Client Continuous Query,Add Continuous Queries to thin client protocol.,.NET iep-50 important,"['platforms', 'thin client']",IGNITE,New Feature,Major,2020-06-13 18:04:35,0
13309953,.NET: Thin Client auto retry idempotent operations on node failure,".NET Thin Client supports failover, but user code is still responsible for catching exceptions and retrying operations.

1. IgniteClientException does not provide a reliable way for the user code to understand whether this is a node failure or something else
2. We can introduce RetryPolicy configuration parameter with values like `Reads`, `IdempotentWrites`, `All` and retry corresponding operations automatically and transparently for the user",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2020-06-07 16:38:20,0
13308255,.NET: Thin Client Compute does not cancel task on server when cancelled on client,"Client should call OP_RESOURCE_CLOSE to cancel the task on server side.
Test this by reading server logs, ""Job was cancelled"" should be there.",.NET,"['platforms', 'thin client']",IGNITE,Bug,Major,2020-05-29 07:18:15,0
13307716,Deadlock between topology update and CQ registration.,"Relevant stack traces:Relevant stack traces:

 
{code:java}
""sys-stripe-0-#65483%cache.BinaryMetadataRegistrationInsideEntryProcessorTest0%"" #85739 prio=5 os_prio=0 tid=0x00007fda80139800 nid=0x5618 waiting on condition [0x00007fdc018e8000]   java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x00000000fc138298> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836) at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireShared(AbstractQueuedSynchronizer.java:967) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(AbstractQueuedSynchronizer.java:1283) at java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock(ReentrantReadWriteLock.java:727) at org.apache.ignite.internal.processors.cache.GridCacheMapEntry.lockListenerReadLock(GridCacheMapEntry.java:5032) at org.apache.ignite.internal.processors.cache.GridCacheMapEntry.innerUpdate(GridCacheMapEntry.java:2262) at org.apache.ignite.internal.processors.cache.distributed.dht.atomic.GridDhtAtomicCache.updateSingle(GridDhtAtomicCache.java:2574) at org.apache.ignite.internal.processors.cache.distributed.dht.atomic.GridDhtAtomicCache.update(GridDhtAtomicCache.java:2034) at org.apache.ignite.internal.processors.cache.distributed.dht.atomic.GridDhtAtomicCache.updateAllAsyncInternal0(GridDhtAtomicCache.java:1854) at org.apache.ignite.internal.processors.cache.distributed.dht.atomic.GridDhtAtomicCache.updateAllAsyncInternal(GridDhtAtomicCache.java:1668) at org.apache.ignite.internal.processors.cache.distributed.dht.atomic.GridDhtAtomicCache.processNearAtomicUpdateRequest(GridDhtAtomicCache.java:3239) at org.apache.ignite.internal.processors.cache.distributed.dht.atomic.GridDhtAtomicCache.access$400(GridDhtAtomicCache.java:139) at org.apache.ignite.internal.processors.cache.distributed.dht.atomic.GridDhtAtomicCache$5.apply(GridDhtAtomicCache.java:273) at org.apache.ignite.internal.processors.cache.distributed.dht.atomic.GridDhtAtomicCache$5.apply(GridDhtAtomicCache.java:268) at org.apache.ignite.internal.processors.cache.GridCacheIoManager.processMessage(GridCacheIoManager.java:1142) at org.apache.ignite.internal.processors.cache.GridCacheIoManager.onMessage0(GridCacheIoManager.java:591) at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:392) at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:318) at org.apache.ignite.internal.processors.cache.GridCacheIoManager.access$100(GridCacheIoManager.java:109) at org.apache.ignite.internal.processors.cache.GridCacheIoManager$1.onMessage(GridCacheIoManager.java:308) at org.apache.ignite.internal.managers.communication.GridIoManager.invokeListener(GridIoManager.java:1626) at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:1246) at org.apache.ignite.internal.managers.communication.GridIoManager.access$4300(GridIoManager.java:142) at org.apache.ignite.internal.managers.communication.GridIoManager$8.execute(GridIoManager.java:1137) at org.apache.ignite.internal.managers.communication.TraceRunnable.run(TraceRunnable.java:50) at org.apache.ignite.internal.util.StripedExecutor$Stripe.body(StripedExecutor.java:559) at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:119) at java.lang.Thread.run(Thread.java:748) 
{code}
 
{code:java}
""disco-notifier-worker-#65517%cache.BinaryMetadataRegistrationInsideEntryProcessorTest0%"" #85777 prio=5 os_prio=0 tid=0x00007fda800a9800 nid=0x5639 waiting on condition [0x00007fdc006d9000]   java.lang.Thread.State: WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for  <0x00000000fbde5f30> (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync) at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175) at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836) at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireShared(AbstractQueuedSynchronizer.java:967) at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(AbstractQueuedSynchronizer.java:1283) at java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock(ReentrantReadWriteLock.java:727) at org.apache.ignite.internal.processors.cache.distributed.dht.topology.GridDhtPartitionTopologyImpl.localUpdateCounters(GridDhtPartitionTopologyImpl.java:2810) at org.apache.ignite.internal.processors.cache.query.continuous.CacheContinuousQueryHandler$2.onRegister(CacheContinuousQueryHandler.java:379) at org.apache.ignite.internal.processors.cache.query.continuous.CacheContinuousQueryManager.registerListener(CacheContinuousQueryManager.java:946) at org.apache.ignite.internal.processors.cache.query.continuous.CacheContinuousQueryHandler.register(CacheContinuousQueryHandler.java:628) at org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.registerHandler(GridContinuousProcessor.java:1818) at org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.processStartRequest(GridContinuousProcessor.java:1444) at org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.access$400(GridContinuousProcessor.java:113) at org.apache.ignite.internal.processors.continuous.GridContinuousProcessor$2.onCustomEvent(GridContinuousProcessor.java:205) at org.apache.ignite.internal.processors.continuous.GridContinuousProcessor$2.onCustomEvent(GridContinuousProcessor.java:196) at org.apache.ignite.internal.managers.discovery.GridDiscoveryManager$4.onDiscovery0(GridDiscoveryManager.java:639) at org.apache.ignite.internal.managers.discovery.GridDiscoveryManager$4.lambda$onDiscovery$0(GridDiscoveryManager.java:510) - locked <0x00000000fb58bbc8> (a java.lang.Object) at org.apache.ignite.internal.managers.discovery.GridDiscoveryManager$4$$Lambda$91/1259207939.run(Unknown Source) at org.apache.ignite.internal.managers.discovery.GridDiscoveryManager$DiscoveryMessageNotifierWorker.body0(GridDiscoveryManager.java:2650) at org.apache.ignite.internal.managers.discovery.GridDiscoveryManager$DiscoveryMessageNotifierWorker.body(GridDiscoveryManager.java:2688) at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:119) at java.lang.Thread.run(Thread.java:748){code}
The problematic code is in {{CacheContinuousQueryManager.registerListener}}. It first acquires CQ listener write lock, and then it acquires topology read lock when update counters are being read.During cache update, we first acquire topology read lock and then acquire CQ listener read lock.If some other thread will try to acquire topology write lock in between, those two threads are deadlocked.
 The issue seems to be introduced by IGNITE-10755 (topology read lock is inserted inside CQ write lock).",deadlock,[],IGNITE,Task,Major,2020-05-27 12:12:07,1
13305921,.NET: Thin Client Near Cache,"Add near caching for thin clients:
* Clients can subscribe to change notifications for specific keys
* Clients use partition awareness to route subscriptions to primary nodes
* Use existing Thick .NET Client near caching mechanism to handle updates on the server side
* Eviction policy is to be handled by the client code (because multiple servers are involved)",.NET,"['platforms', 'thin client']",IGNITE,New Feature,Major,2020-05-19 12:43:54,0
13305851,.NET: SqlFieldsQuery as ContinuousQuery.InitialQuery,"SqlQuery has been deprecated in favor of SqlFieldsQuery, but ContinuousQuery in Ignite.NET does not allow SqlFieldsQuery as InitialQuery. 

Java API allows that, so we have to derive SqlFieldsQuery from QueryBase and make it work.
The problem will arise when SqlFieldsQuery does not return _key & _val - see how Java handles this.",.NET,['platforms'],IGNITE,New Feature,Critical,2020-05-19 08:57:56,0
13304335,.NET: Thin Client Compute,Add Compute to .NET Thin Client. See IGNITE-12853.,.NET iep-42,['platforms'],IGNITE,New Feature,Major,2020-05-12 10:03:46,0
13300892,.NET: Support .NET 5,".NET 5 is released. Breaking changes: https://blog.miguelbernard.com/net-5-the-breaking-changes-you-need-to-know-about/

* Run tests on .NET 5 on Windows and Linux
* Add nightly .NET TeamCity project (?)
* Check deployment scenarios
* Document single-file publish specifics ({{IncludeAllContentForSelfExtract}})

------------

*Self-contained single-file publish issue*
{code}
Unhandled exception. System.DllNotFoundException: Unable to load shared library 'libcoreclr.so' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: liblibcoreclr.so: cannot open shared object file: No such file or directory
   at Apache.Ignite.Core.Impl.Unmanaged.Jni.DllLoader.NativeMethodsCore.dlopen(String filename, Int32 flags)
   at Apache.Ignite.Core.Impl.Unmanaged.Jni.DllLoader.Load(String dllPath)
   at Apache.Ignite.Core.Impl.Unmanaged.Jni.JvmDll.LoadDll(String filePath, String simpleName)
   at Apache.Ignite.Core.Impl.Unmanaged.Jni.JvmDll.Load(String configJvmDllPath, ILogger log)
   at Apache.Ignite.Core.Ignition.Start(IgniteConfiguration cfg)
   at Apache.Ignite.Core.Ignition.Start()
   at IgniteNet5Test.Program.Main(String[] args)
{code}

See https://github.com/dotnet/runtime/issues/41859

h2. Workaround

{code}
NativeLibrary.SetDllImportResolver(
    typeof(Ignition).Assembly,
    (libraryName, _, _) => libraryName == ""libcoreclr.so""
        ? (IntPtr) (-1)
        : IntPtr.Zero);
{code}


",.NET,['platforms'],IGNITE,New Feature,Major,2020-04-24 21:17:15,0
13300859,.NET: NuGet tests fail with compilation error,"{code}
:\BuildAgent\temp\buildTmp\NuGetScratch\1izrscml.xvp.nugetrestore.targets(435,34): error MSB4092: An unexpected token "")"" was found at character position 28 in condition ""@(PackageReference->Count()) > 0"". [C:\BuildAgent\work\832880717e6391e9\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core\Apache.Ignite.Core.csproj
{code}

Caused by the bug in NuGet: https://github.com/NuGet/Home/issues/9458
We use the latest version in build.ps1, so this started failing right after the release.

Fix the script to use a fixed, known-to-be-good version instead of the latest.",.NET,['platforms'],IGNITE,New Feature,Major,2020-04-24 18:23:36,0
13300215,Thin client cluster discovery,"Thin clients should be able to discover all server nodes automatically when connected to any of them, and maintain an up to date list of servers at all times.

See [IEP-44|https://cwiki.apache.org/confluence/display/IGNITE/IEP-44%3A+Thin+client+cluster+discovery] for more details.",important,['thin client'],IGNITE,New Feature,Major,2020-04-22 09:05:30,0
13299752,SqlViewMetricExporterSpi is redundant entity ,"{{SqlViewMetricExporterSpi}} is redundant entity both in terms of design and in terms of user experience.

{{METRICS}} SQL view is the internal entity that could exist regardless of any exporters configuration. So it should be created on indexing module initialization. Also from an user stand point it is strange to configure special exporter in order to get access to the {{METRICS}} view via SQL.

See also IGNITE-12921.",IEP-35,[],IGNITE,Bug,Major,2020-04-20 16:30:02,2
13299742,System views design leads to bad user expirience.,"Current implementation of system views has broken system behavior which is related with querying system views. 

Before 2.8 system views were available via SQL queries (if indexing is enabled). It did not depend on any configuration. 

After implementation of IGNITE-12145 system views available only if {{SqlViewExporterSpi}} is passed to {{IgniteConfiguration.setSystemViewExporterSpi()}}. Now, if an user configures some {{SystemViewExporterSpi}} then provided user configuration will rewrite default configuration and {{SqlViewExporterSpi}} won't be initialized. As result it is impossible to query system views and any query to the views fails with exception. This behavior is not obvious for the user. See tests below.

The second problem is kind of design problem. System view is internal part of the system and should be available regardless of any exporter configuration (at least via SQL) such as it was implemented before 2.8 release. 

My suggestion is the following: we should remove {{SqlViewExporterSpi}} and configure all views on indexing module initialization. {{SqlViewExporterSPI}} also doesn't make sense because:
- it operates by some internal API ({{SchemaManager}}, {{GridKernalContext}}, {{IgniteH2Indexing}}).
- it doesn't allow to end user to add any new system view.

Only thing that could be useful is a filtering. But it could be done with SQL.

Reproducer of broken behavior:

{code:java}
package org.apache.ignite.internal.processors.cache.metric;

import org.apache.ignite.cache.query.SqlFieldsQuery;
import org.apache.ignite.cluster.ClusterState;
import org.apache.ignite.configuration.DataRegionConfiguration;
import org.apache.ignite.configuration.DataStorageConfiguration;
import org.apache.ignite.configuration.IgniteConfiguration;
import org.apache.ignite.internal.IgniteEx;
import org.apache.ignite.spi.systemview.jmx.JmxSystemViewExporterSpi;
import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;
import org.junit.Test;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static java.util.Arrays.asList;
import static org.apache.ignite.internal.processors.cache.index.AbstractSchemaSelfTest.queryProcessor;

public class SystemViewTest extends GridCommonAbstractTest {

    private static boolean useDefaultSpi;

    /** {@inheritDoc} */
    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {
        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);

        cfg.setConsistentId(igniteInstanceName);

        cfg.setDataStorageConfiguration(new DataStorageConfiguration()
                .setDataRegionConfigurations(
                        new DataRegionConfiguration().setName(""in-memory"").setMaxSize(100L * 1024 * 1024))
                .setDefaultDataRegionConfiguration(
                        new DataRegionConfiguration()
                                .setPersistenceEnabled(true)));

        if (!useDefaultSpi) {
            // Configure user provided system view exporter SPI.
            cfg.setSystemViewExporterSpi(new JmxSystemViewExporterSpi());
        }

        return cfg;
    }

    /**
     * Will executed succefully.
     */
    @Test
    public void testSystemViewWithDefaultSpi() throws Exception {
        useDefaultSpi = true;

        doTestSystemView();
    }

    /**
     * Will fail with <code>Table ""VIEWS"" not found</code>.
     */
    @Test
    public void testSystemViewWithCustomSpi() throws Exception {
        useDefaultSpi = false;

        doTestSystemView();
    }

    private void doTestSystemView() throws Exception {
        try (IgniteEx ignite = startGrid()) {
            ignite.cluster().state(ClusterState.ACTIVE);

            Set<String> cacheNames = new HashSet<>(asList(""cache-1"", ""cache-2""));

            for (String name : cacheNames)
                ignite.getOrCreateCache(name);

            SqlFieldsQuery qry = new SqlFieldsQuery(""SELECT * FROM SYS.VIEWS"");

            List<List<?>> res = queryProcessor(ignite).querySqlFields(qry, true).getAll();

            res.forEach(item -> log.info(""VIEW FOUND: "" + item));
        }
    }

}
{code}",IEP-35,[],IGNITE,Bug,Critical,2020-04-20 16:09:14,2
13298853,GridSystemViewManager is not thread safe,"{{GridSystemViewManager}} is not thread safe because it allows to registers walkers using public  {{registerWalker()}} that just adds walker to a {{HashMap}}.

It seems the simplest solution here: make {{registerWalker()}} method private because it has usages only from {{GridSystemViewManager}} constructor.",IEP-35,[],IGNITE,Bug,Major,2020-04-16 15:48:59,2
13297458,".NET: Rename PlatformNearCache to PlatformCache, mark as Experimental","PlatformNearCache is not actually ""Near"" - it just mirrors cache entries that are present on current node in CLR heap for faster access. Those entries can be primary, backup, or near.

PlatformCache seems to be a better name.

Rename:

* `PlatformNearCacheConfiguration` -> `PlatformCacheConfiguration`
* `CachePeekMode.PlatformNear` -> `CachePeekMode.Platform`
* `CacheConfiguration.PlatformNearConfiguration` -> `CacheConfiguration.PlatformCacheConfiguration`

Mark all new platform (near) cache APIs with `[IgniteExperimental]`",.NET,['platforms'],IGNITE,Improvement,Major,2020-04-09 18:19:55,0
13297446,.NET: Serve local Scan queries directly from platform near cache,"Scan queries with Local flag and non-null Partition can be executed directly against Platform Near Cache, avoiding Java calls.

Partition must be reserved before iteration to guarantee that it is local and does not move away while we iterate. Failed reservation should cause an exception - can’t do a local query for a non-local partition.

",.NET,['platforms'],IGNITE,Improvement,Major,2020-04-09 17:41:27,0
13295909,.NET: NullReferenceException when serializing fields of the same type in different order,".NET NullReferenceException when serializing fields of the same type in different order

+*Steps to reproduce*+:
 * Implement IBinarizable for a type having multiple fields and randomly select subset of the fields in the  IBinarizable.WriteBinary implementation
 * Serialize the type multiple times

+*Actual result*+:

Eventual NullReferenceException at some iteration of serialization:

{{Object reference not set to an instance of an object.  }}{{at Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructure.GetFieldId(String fieldName, Byte fieldType, Int32& pathIdx, Int32 actionIdx)}}{{   at Apache.Ignite.Core.Impl.Binary.Structure.BinaryStructureTracker.GetFieldId(String fieldName, Byte fieldTypeId)}}{{   at Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteFieldId(String fieldName, Byte fieldTypeId)}}{{   at Apache.Ignite.Core.Impl.Binary.BinaryWriter.WriteInt(String fieldName, Int32 val)}}{{   at }}",.NET sbcf,['platforms'],IGNITE,Bug,Major,2020-04-02 22:01:43,0
13295903,.NET: Services fail to call method with DateTime or Guid argument,.Net service proxy can't find java method with Timestamp or UUID datatype.,.NET .net,['platforms'],IGNITE,Bug,Blocker,2020-04-02 21:34:25,2
13293205,Custom GROUP_CONCAT separator is ignored,According to [https://apacheignite-sql.readme.io/docs/group_concat] GROUP_CONCAT supports user-defined separator. Actually it is not supported.,sbcf,['sql'],IGNITE,Bug,Major,2020-03-22 22:31:19,2
13293200,Poor JDBC Cache Store performance due to default fetch size,"JDBC ""fetchSize"" parameter specifies the number of rows to be fetched from the database when additional rows are needed. For most drivers it is 10 by default. Larger fetchSize can significantly improve performance due to less network roundtrips (at expense of greater memory consumption).

For some reason out-of-box JDBC POJO Cache Store uses default fetchSize in the loadCache method implementation. 

We have very poor loadCache performance when loading large amount of data from Oracle with the default fetchSize of 10. We tried setting fetchSize to 20K and that improved performance 40 times.

We need to use JdbcDialect#fetchSize in the loadCache implementation so that users could implement a custom JdbcDialect to configure fetchSIze.

 ",sbcf,['cache'],IGNITE,Bug,Major,2020-03-22 21:51:10,2
13293197,.NET: Interoperable DateTime,"*+The Problem+* 
 Presently .NET API writes dates as composite Ignite objects. Only .NET clients can read such dates: any other client (JDBC, Java, etc) does not understand it without custom deserialization.
  
 It is still possible to configure .NET serialization to write dates as Ignite dates - see [DateTime Serialization note|https://ignite.apache.org/docs/latest/net-specific/net-platform-interoperability#types-compatibility]. But then Ignite accepts only UTC dates, requiring the application developers to convert local dates to UTC dates and back. This task is not trivial: [DateTime.ToUniversalTime|https://docs.microsoft.com/en-us/dotnet/api/system.datetime.touniversaltime?view=netcore-3.1] uses calendars different from Java (and the .NET calendars are the invalid ones - especially for pre-1990 dates).
  
 The motivation for the current default behavior was probably the desire to keep the Time Zone information: Ignite dates do not store time zones.
  
 In our experience interoperability is more important than storing time zone info.
  
 *+The Solution+*
 # Always write .NET dates as portable Ignite dates: get rid of the {{BinaryReflectiveSerializer.ForceTimestamp}} flag that currently triggers this behavior.
 Keep the {{ForceTimestamp}} flag if saving .NET dates as transparent objects seems a useful case.
 # Automatically convert Local dates to UTC and back *inside* Ignite.NET. 
 Add a {{BinaryReflectiveSerializer.UtcDate flag}} to disable this conversion. This prevents loosing the {{DateTime.Kind}} property of UTC dates.  {{UtcDate}} set to true implies the existing behavior: Ignite gets UTC dates and throws a ""Date must be in UTC"" exception on an attempt to write a Local date. The {{UtcDate}} flag is false by default.
 # Use [NodaTime|https://nodatime.org/] for UTC<->Local conversions. Noda time uses Java calendars making the conversion truly portable.

 
 *+The Benefits+*
 # Portable dates is a more frequent use-case than storing time zone info for every date in Ignite. This becomes default behavior and the developers do not need to always explicitly configure it.
 # Non-trivial code to make the truly portable UTC<->Local conversion is implemented once inside Ignite instead of having every Ignite.NET application implementing it.

+*References*+
 * [Dev-List Discussion|http://apache-ignite-developers.2346864.n4.nabble.com/Interoperable-Ignite-NET-Dates-td49946.html]
 * IEP-TBD",.NET sbcf,['platforms'],IGNITE,Improvement,Major,2020-03-22 21:13:56,2
13293196,.NET: Service method with user type array parameter can't be found,"*+Setup+*
 * Ignite Java service with a method having an array of user types as a parameters, for example, caclulate(Parameter[] params)

*+Actions+*
 * .NET client calls the Ignite Java service, for example, ignite.GetServices().GetServiceProxy<ICalculator>().calculate(new[] \{new Parameter()});

*+Expected+*
 * The service method is called

*+Actual+*
 * Exception ""Could not find proxy method 'calculate' in class ICalculator""

*+Workaround+*
 * Replace array of user types with array of objects in the service methods signatures, for example, caclulate(Object[] params)",.NET sbcf,['platforms'],IGNITE,Bug,Major,2020-03-22 21:11:01,0
13292901,[IEP-39] Management API to cancel SQL queries.,"Ignite provides many API to deploy and execute user-provided code on the server nodes inside the same JVM as the Ignite process runs.
Ignite has many APIs that allocate many resources on the server nodes, also. 
In case of some buggy code that consumes many system resources(CPU, RAM, flood network) or heavy query the whole cluster can become unstable.

We should provide to the cluster administrator the ability to stop any user deployed task.

JMX beans to cancel listed tasks should be introduced:

* SQL queries.

In the scope of IEP-35 System view API introduced.
A new API should use the same identifier that is used in corresponding System View.",IEP-39,[],IGNITE,Sub-task,Major,2020-03-20 11:05:00,2
13292900,[IEP-39] Management API to cancel continuous queries.,"Ignite provides many API to deploy and execute user-provided code on the server nodes inside the same JVM as the Ignite process runs.
Ignite has many APIs that allocate many resources on the server nodes, also. 
In case of some buggy code that consumes many system resources(CPU, RAM, flood network) or heavy query the whole cluster can become unstable.

We should provide to the cluster administrator the ability to stop any user deployed task.

JMX beans to cancel listed tasks should be introduced:

* Continuous queries

In the scope of IEP-35 System view API introduced.
A new API should use the same identifier that is used in corresponding System View.",IEP-39,[],IGNITE,Sub-task,Major,2020-03-20 11:03:57,2
13292899,[IEP-39] Management API to cancel scan queries.,"Ignite provides many API to deploy and execute user-provided code on the server nodes inside the same JVM as the Ignite process runs.
Ignite has many APIs that allocate many resources on the server nodes, also. 
In case of some buggy code that consumes many system resources(CPU, RAM, flood network) or heavy query the whole cluster can become unstable.

We should provide to the cluster administrator the ability to stop any user deployed task.

JMX beans to cancel listed tasks should be introduced:

* scan queries

In the scope of IEP-35 System view API introduced.
A new API should use the same identifier that is used in corresponding System View.",IEP-39,[],IGNITE,Sub-task,Major,2020-03-20 11:01:49,2
13292898,[IEP-39] Management API to cancel transaction.,"Ignite provides many API to deploy and execute user-provided code on the server nodes inside the same JVM as the Ignite process runs.
Ignite has many APIs that allocate many resources on the server nodes, also. 
In case of some buggy code that consumes many system resources(CPU, RAM, flood network) or heavy query the whole cluster can become unstable.

We should provide to the cluster administrator the ability to stop any user deployed task.

JMX beans to cancel listed tasks should be introduced:

* Transaction

In the scope of IEP-35 System view API introduced.
A new API should use the same identifier that is used in corresponding System View.",IEP-39,[],IGNITE,Sub-task,Major,2020-03-20 11:00:40,2
13292897,[IEP-39] Management API to cancel services.,"Ignite provides many API to deploy and execute user-provided code on the server nodes inside the same JVM as the Ignite process runs.
Ignite has many APIs that allocate many resources on the server nodes, also. 
In case of some buggy code that consumes many system resources(CPU, RAM, flood network) or heavy query the whole cluster can become unstable.

We should provide to the cluster administrator the ability to stop any user deployed task.

JMX beans to cancel listed tasks should be introduced:

* Services

In the scope of IEP-35 System view API introduced.
A new API should use the same identifier that is used in corresponding System View.",IEP-39,[],IGNITE,Sub-task,Major,2020-03-20 11:00:02,2
13292896,[IEP-39] Management API to cancel compute tasks.,"Ignite provides many API to deploy and execute user-provided code on the server nodes inside the same JVM as the Ignite process runs.
Ignite has many APIs that allocate many resources on the server nodes, also. 
In case of some buggy code that consumes many system resources(CPU, RAM, flood network) or heavy query the whole cluster can become unstable.

We should provide to the cluster administrator the ability to stop any user deployed task.

JMX beans to cancel listed tasks should be introduced:

* Compute task

In the scope of IEP-35 System view API introduced.
A new API should use the same identifier that is used in corresponding System View.",IEP-39,[],IGNITE,Sub-task,Major,2020-03-20 10:58:59,2
13292810,Python client returns fields in wrong order since the 2 row when fields_count>10,"Reproducer attached. 

If result set is bigger than a page size(1 by default) and there are more than 10 fields in an object, then, for all rows after the first query column order will be wrong. Looks like column order is being sorted as a string instead of number.

The reason for that is a sorting in api/sql.py: https://github.com/apache/ignite/blob/master/modules/platforms/python/pyignite/api/sql.py#L445
If you remove it, everything will work fine. We need to make sure that this is the right solution for this issue.

Output from reproducer:

{code:java}
['CODE', 'NAME', 'CONTINENT', 'REGION', 'SURFACEAREA', 'INDEPYEAR', 'POPULATION', 'LIFEEXPECTANCY', 'GNP', 'GNPOLD', 'LOCALNAME', 'GOVERNMENTFORM', 'HEADOFSTATE', 'CAPITAL', 'CODE2']
['CHN', 'China', 'Asia', 'Eastern Asia', Decimal('9.5729E+6'), -1523, 1277558000, Decimal('71.4'), Decimal('982268'), Decimal('917719'), 'Zhongquo', 'PeoplesRepublic', 'Jiang Zemin', 1891, 'CN']
['IND', 'India', 'Bharat/India', 'Federal Republic', 'Kocheril Raman Narayanan', 1109, 'IN', 'Asia', 'Southern and Central Asia', Decimal('3287263'), 1947, 1013662000, Decimal('62.5'), Decimal('447114'), Decimal('430572')]
['USA', 'United States', 'United States', 'Federal Republic', 'George W. Bush', 3813, 'US', 'North America', 'North America', Decimal('9.36352E+6'), 1776, 278357000, Decimal('77.1'), Decimal('8.5107E+6'), Decimal('8.1109E+6')]

{code}
",python,['platforms'],IGNITE,Bug,Major,2020-03-20 00:52:06,2
13292002,[IEP-39] Management API to cancel user provided tasks and queries - documentation,New featured from IGNITE-12632 should be documented.,IEP-39 important,['documentation'],IGNITE,Improvement,Major,2020-03-16 15:25:05,2
13290872,MetricRegistryMBean and OpenCensusExporterSpi have memory leak,"{{MetricRegistryMBean}} and {{OpenCensusExporterSpi}} have memory leak. 

To the following maps values add but never remove (i.e. on remove corresponding histogram or on change histogram buckets layout):

* {{MetricRegistryMBean.histogramNames}}
* {{OpenCensusMetricExporterSpi.histogramNames}}",IEP-35,[],IGNITE,Bug,Major,2020-03-10 17:19:02,2
13290861,MetricRegistryMBean doesn't show histogram values in case when histogram name contains underscore character,"{{MetricRegistryMBean}} doesn't show histogram values in case when histogram name contains underscore character.

The problem in {{MetricRegistryMBean.searchHistogram()}} method which relies on first underscore character in the fully qualified metric name. This method also use relatively old and not effective API for string parsing (this API implementation is synchronized). It should be replaced by simple {{String.lastIndexOf()}} for example. 

Reproducer:

{code:java}
package org.apache.ignite.spi.metric.jmx;

import org.apache.ignite.Ignite;
import org.apache.ignite.IgniteException;
import org.apache.ignite.configuration.IgniteConfiguration;
import org.apache.ignite.internal.IgniteEx;
import org.apache.ignite.internal.processors.metric.MetricRegistry;
import org.apache.ignite.internal.util.typedef.internal.U;
import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;
import org.junit.Test;

import javax.management.*;
import java.lang.management.ManagementFactory;


public class MetricRegistryMBeanTest extends GridCommonAbstractTest {
    private static final String REGISTRY_NAME = ""test_registry"";
    private static final String VALID_HISTOGRAM_NAME = ""testhist"";
    private static final String INVALID_HISTOGRAM_NAME = ""test_hist"";

    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {
        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);

        JmxMetricExporterSpi exporterSpi = new JmxMetricExporterSpi();

        cfg.setMetricExporterSpi(exporterSpi);

        return cfg;
    }

    @Test public void testBean() throws Exception {
        Ignite ignite = startGrid();

        MetricRegistry reg = ((IgniteEx)ignite).context().metric().registry(REGISTRY_NAME);

        reg.histogram(VALID_HISTOGRAM_NAME, new long[] {10, 100}, null);
        reg.histogram(INVALID_HISTOGRAM_NAME, new long[] {10, 100}, null);

        assertNotNull(mbean(ignite).getAttribute(VALID_HISTOGRAM_NAME + '_' + 10 + '_' + 100));
        assertEquals(0L, mbean(ignite).getAttribute(VALID_HISTOGRAM_NAME + '_' + 10 + '_' + 100));
        assertNotNull(mbean(ignite).getAttribute(INVALID_HISTOGRAM_NAME + '_' + 10 + '_' + 100));
        assertEquals(0L, mbean(ignite).getAttribute(INVALID_HISTOGRAM_NAME + '_' + 10 + '_' + 100));
    }

    private static DynamicMBean mbean(Ignite ignite) {
        try {
            ObjectName mbeanName = U.makeMBeanName(ignite.name(), null, REGISTRY_NAME);

            MBeanServer mbeanSrv = ManagementFactory.getPlatformMBeanServer();

            if (!mbeanSrv.isRegistered(mbeanName))
                fail(""MBean is not registered: "" + mbeanName.getCanonicalName());

            return MBeanServerInvocationHandler.newProxyInstance(mbeanSrv, mbeanName, DynamicMBean.class, false);
        } catch (MalformedObjectNameException e) {
            throw new IgniteException(e);
        }
    }
}
{code}",IEP-35,[],IGNITE,Bug,Major,2020-03-10 16:41:48,2
13290849,MetricRegistryMBean is not thread safe,"{{MetricRegistryMBean}} is not thread safe due to usage of {{histogramNames}} instance of {{HashMap}} class. Changing {{HashMap}} to {{ConcurrentHashMap}} will not help a lot (likely) because method {{MetricUtils.histogramBucketNames()}} uses just {{put}} method ({{putIfAbsent}} will help I believe).

{{OpenCensusExporterSpi}}  uses the same {{MetricUtils.histogramBucketNames()}} method. But it isn't issue for this exporter because it is single threaded.

Also {{MetricUtils.histogramBucketNames()}} method is responsible for histogram bucket's name representation. I believe that it is responsibility of metric exporter and this method should be removed from {{MetricUtils}}.",IEP-35,[],IGNITE,Bug,Major,2020-03-10 16:01:33,2
13289901,.NET: Thin Client: Service invocation,"Provide an API to invoke Ignite Services from Thin Clients.

.NET API:
{code}
IIgniteClient.GetServices().GetServiceProxy<IFoo>(""name"").Bar();
{code}

See https://cwiki.apache.org/confluence/display/IGNITE/IEP-46%3A+Thin+Client+Service+Invocation",.NET iep-46 important,['platforms'],IGNITE,New Feature,Major,2020-03-05 19:51:00,0
13289299,Compute job system view,"ComputeTaskView shows compute tasks that was started(initiated) on the local node.

We need to introduce another view that will show compute jobs - jobs that executing on the local node but was initiated on some remote node.",IEP-35,[],IGNITE,Sub-task,Major,2020-03-03 17:24:07,2
13288952,[IEP-35] Compute task system view doesn't return task started from remote node,"Bug reproducer:
{code:java}
    @Test
    public void testComputeBroadcast2() throws Exception {
        try (IgniteEx g0 = startGrid(0); IgniteEx g1 = startClientGrid(1)) {
            SystemView<ComputeTaskView> tasks = g0.context().systemView().view(TASKS_VIEW);

            g1.compute().broadcastAsync(() -> {
                try {
                    Thread.sleep(60_000L);
                }
                catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            });

            Thread.sleep(1_000L);

            assertEquals(1, tasks.size());
        }
    }

{code}",IEP-35,[],IGNITE,Improvement,Major,2020-03-02 17:03:32,2
13287963,.NET: CachePeekMode is not treated as Flags,"CachePeekMode is a [Flags] enum, but Ignite APIs such as ICache.GetSize take params array, and do not work when multiple flags are passed as one value with bitwise OR. ",.NET,['platforms'],IGNITE,Bug,Minor,2020-02-27 08:24:03,0
13286172,.NET: Remove TypeCaster,"TypeCaster class is used in Ignite.NET for non-boxing, faster casts.
Benchmarks on .NET 4.0 displayed clear advantage of this solution.

However, this is no longer true on .NET Core due to improvements in the framework:

{code}
|     Method |       Runtime |      Mean |     Error |    StdDev |
|----------- |-------------- |----------:|----------:|----------:|
| TypeCaster | .NET Core 2.2 | 3.4615 ns | 0.0325 ns | 0.0304 ns |
| ObjectCast | .NET Core 2.2 | 1.0936 ns | 0.0040 ns | 0.0036 ns |
| UnsafeCast | .NET Core 2.2 | 4.1921 ns | 0.0125 ns | 0.0111 ns |
| TypeCaster | .NET Core 3.1 | 1.5306 ns | 0.0042 ns | 0.0037 ns |
| ObjectCast | .NET Core 3.1 | 0.0229 ns | 0.0029 ns | 0.0024 ns |
| UnsafeCast | .NET Core 3.1 | 2.1868 ns | 0.0052 ns | 0.0043 ns |
{code}

(See benchmark code in https://github.com/ptupitsyn/IgniteNetBenchmarks)

Remove TypeCaster class and use regular cast instead.
Run Ignite deserialization benchmarks to confirm the effect.",.NET,['platforms'],IGNITE,Improvement,Major,2020-02-19 08:15:55,0
13285860,.NET: Native Near Cache,"Implement native .NET Near Cache, which stores deserialized cache data on CLR heap.

Right now every cache.Get, every scan query, etc, cause repeated copy and deserialization of data from JVM, even for primary keys or near cache entries. This often becomes a bottleneck. Keeping up-to-date deserialized values in CLR memory can greatly improve performance and reduce latency.",.NET,['platforms'],IGNITE,New Feature,Critical,2020-02-17 22:01:15,0
13285093,.NET: Add partition-based AffinityCall and AffinityRun overloads,"Add partition-based AffinityCall and AffinityRun overloads to ICompute.See corresponding methods in Java (IgniteCompute).

Additionally, current affinity methods work through PlatformAbstractTask, which does not lock partitions. We should refactor existing AffinityCall and AffinityRun overloads to call corresponding IgniteCompute APIs.",.NET,['platforms'],IGNITE,Improvement,Major,2020-02-13 14:10:42,0
13284926,.NET: Calculate IAffinity.GetPartition locally for default affinity,"For default affinity we already know how to calculate partition on .NET side, see `ClientRendezvousAffinityFunction`. This is faster than serializing the key and calling Java. ",.NET,['platforms'],IGNITE,Improvement,Minor,2020-02-12 21:25:22,0
13284786,SQL: Potential race on MapResult close.,"Seems, a race possible on MapQueryResult*s*.close() as this code can be called twice.

Let's rewrite it make sure every map result is closed via MapQueryResult*s*.closeResult(int) method only.
Then allow cleanup once all map results are closed.
Then MapQueryResult*s*.allClosed() can be optimized as we always know number of map results and all map results are closed via MapQueryResult*s* instance.

Seems, MepQueryExecutor.onQueryRequest0() has dead code. See ""res.openResult(rs)"" call when 'null' passed as argument.

 

Start point is MapQueryResult.openResult(res). 

 ",refactoring,['sql'],IGNITE,Task,Major,2020-02-12 11:10:30,1
13283969,IgniteSequenceInternalCleanupTest flacky after IGNITE-12598,"IgniteSequenceInternalCleanupTest#deactivate is flacky after IGNITE-12598

The test expects that cache metrics will be reset after cluster deactivation and subsequent cache stop.
But this was changed intentionally in IGNITE-12598.

Test not always fail because it asserts cluster metrics value which updated concurrently with the test thread. 

We should fix the assert.",IEP-35,[],IGNITE,Improvement,Major,2020-02-07 15:37:04,2
13283692,.NET: Publish symbol packages,"Symbol packages (snupkg) improve debugging experience for the users:
https://docs.microsoft.com/en-us/nuget/create-packages/symbol-packages-snupkg

Create and publish Ignite.NET symbol packages along with normal NuGet packages.
",.NET,['platforms'],IGNITE,Improvement,Minor,2020-02-06 12:35:13,0
13283687,[IEP-39] Management API to cancel user provided tasks and queries.,"Ignite provides many API to deploy and execute user-provided code on the server nodes inside the same JVM as the Ignite process runs.
Ignite has many APIs that allocate many resources on the server nodes, also. 
In case of some buggy code that consumes many system resources(CPU, RAM, flood network) or heavy query the whole cluster can become unstable.

We should provide to the cluster administrator the ability to stop any user deployed task.

JMX beans to cancel listed tasks should be introduced:

* Compute task
* Service
* Continuous query
* Transactions
* Queries(SQL, Scan, Text)

In the scope of IEP-35 System view API introduced.
A new API should use the same identifier that is used in corresponding System View.",IEP-39 important,[],IGNITE,Improvement,Major,2020-02-06 12:02:19,2
13282379,SQL: GridReduceQueryExecutor refactoring.,"For now we have few issues that can be resolved.

1. We create fake H2 tables\indices for reduce stage even if there is no need to do so (skipMergeTable=true.
Let's decouple reduce logic from H2Index adapter code.

2. Partition mapping code look to complicated and non-optimal.
Let's use cached affinity mapping and avoid collections copying when possible.

3. Also there is no sense to pass RequestID to mapping code just for logging.
We'll never be able to match any request as no query really exists at a time when error with RequestID is logged.

4. Replicated only flag value semantic (calculation and usage) is not clear.

5. GridReduceQueryExecutor.reduce() method is too long (over 400 lines).",refactoring,['sql'],IGNITE,Task,Major,2020-01-30 13:38:47,1
13282360,"[ignite-extensions] Setup tests for ignite-client-spring-boot-autoconfigure, ignite-spring-boot-autoconfigure on TC",Changes relating to setting up new modules tests on TC.,spring-boot-autoconfigure spring-boot-client-autoconfigure,[],IGNITE,Improvement,Minor,2020-01-30 11:40:19,2
13282203,.NET: DotNetCore publish dir is not copied to bin dir,Recent changes in build.ps1 break the release build: publish folder is not present in dotnet/bin.,.NET,['platforms'],IGNITE,Bug,Blocker,2020-01-29 14:47:25,0
13282160,Metrics configuration will be deleted on cache stop,"This issue is related with IGNITE-12580 where NPE occures on attempt to remove cache configuration.

While NPE is fixed the root cause doesn't.

Root cause is attempt to remove metric configuration on cache stop while it should be done only on cache destroy.

Cache stop will be performed for example on node stop. After node start cache will be started too but metric configuration is already removed and will not applied to the cache metrics. ",IEP-35,[],IGNITE,Bug,Major,2020-01-29 11:31:04,2
13281374,NPE in GridMetricManager,"NPE is thrown during cache recovery:

{noformat}
class org.apache.ignite.IgniteCheckedException: null
	at org.apache.ignite.internal.util.IgniteUtils.cast(IgniteUtils.java:7534)
	at org.apache.ignite.internal.util.future.GridFutureAdapter.resolve(GridFutureAdapter.java:260)
	at org.apache.ignite.internal.util.future.GridFutureAdapter.get0(GridFutureAdapter.java:234)
	at org.apache.ignite.internal.util.future.GridFutureAdapter.get(GridFutureAdapter.java:160)
	at org.apache.ignite.internal.util.future.GridFutureAdapter.get(GridFutureAdapter.java:152)
	at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager.onKernalStart(GridCachePartitionExchangeManager.java:816)
	at org.apache.ignite.internal.processors.cache.GridCacheProcessor.onKernalStart(GridCacheProcessor.java:675)
	at org.apache.ignite.internal.IgniteKernal.start(IgniteKernal.java:1375)
	at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start0(IgnitionEx.java:2038)
	at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start(IgnitionEx.java:1703)
	at org.apache.ignite.internal.IgnitionEx.start0(IgnitionEx.java:1117)
	at org.apache.ignite.internal.IgnitionEx.start(IgnitionEx.java:615)
	at org.apache.ignite.testframework.junits.GridAbstractTest.startGrid(GridAbstractTest.java:1017)
	at org.apache.ignite.testframework.junits.GridAbstractTest.startGrid(GridAbstractTest.java:958)
	at org.apache.ignite.testframework.junits.GridAbstractTest.startGrid(GridAbstractTest.java:946)
	at org.apache.ignite.testframework.junits.GridAbstractTest.startGrid(GridAbstractTest.java:895)
	at org.apache.ignite.internal.processors.cache.persistence.LocalWalModeChangeDuringRebalancingSelfTest.doTestSimple(LocalWalModeChangeDuringRebalancingSelfTest.java:263)
	at org.apache.ignite.internal.processors.cache.persistence.LocalWalModeChangeDuringRebalancingSelfTest.testWalDisabledDuringRebalancing(LocalWalModeChangeDuringRebalancingSelfTest.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.apache.ignite.testframework.junits.GridAbstractTest$7.run(GridAbstractTest.java:2124)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException
	at org.apache.ignite.internal.processors.metric.GridMetricManager.remove(GridMetricManager.java:396)
	at org.apache.ignite.internal.processors.cache.GridCacheAdapter.stop(GridCacheAdapter.java:669)
	at org.apache.ignite.internal.processors.cache.GridCacheProcessor.stopCache(GridCacheProcessor.java:1024)
	at org.apache.ignite.internal.processors.cache.GridCacheProcessor.stopCache(GridCacheProcessor.java:998)
	at org.apache.ignite.internal.processors.cache.GridCacheProcessor.stopCaches(GridCacheProcessor.java:754)
	at org.apache.ignite.internal.processors.cache.GridCacheProcessor$CacheRecoveryLifecycle.onBaselineChange(GridCacheProcessor.java:5460)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.initCachesOnLocalJoin(GridDhtPartitionsExchangeFuture.java:982)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.init(GridDhtPartitionsExchangeFuture.java:849)
	at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body0(GridCachePartitionExchangeManager.java:3236)
	at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body(GridCachePartitionExchangeManager.java:3085)
	at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120)
	... 1 more
{noformat}",IEP-35,[],IGNITE,Bug,Blocker,2020-01-24 12:40:19,2
13280528,.NET: Thin Client: deserializing DateTime fields causes BinaryTypeGet request for every value,"Actual: The following code causes 10 BinaryProcessorClient.GetBinaryType calls (2 fields, 5 Foo instances). Every call is a server request.

Expected: 0 calls. Binary metadata should be cached after PutAll call.

{code}
public class CacheDateTimeMetaTest : ClientTestBase
    {
        [Test]
        public void TestDateTimeMeta()
        {
            var data = Enumerable.Range(1, 5)
                .Select(x => new Foo
                {
                    Id = x,
                    StartDate = DateTime.Now.AddHours(x),
                    EndDate = DateTime.Now.AddDays(x)
                });

            var cache = Client.GetOrCreateCache<int, Foo>(""foo"");
            cache.PutAll(data.Select(x => new KeyValuePair<int, Foo>(x.Id, x)));

            var res = cache.Query(new ScanQuery<int, Foo>()).GetAll();
            Assert.AreEqual(cache.GetSize(), res.Count);
        }

        public class Foo
        {
            public int Id { get; set; }
            public DateTime? StartDate { get; set; }
            public DateTime? EndDate { get; set; }
        }
    }
{code}

This causes huge performance issues.

*Workaround*

* Force Timestamp format for all DateTime values 

User list discussion: http://apache-ignite-users.70518.x6.nabble.com/Getting-all-data-from-cache-via-scan-query-is-taking-lot-of-time-td30949.html",.NET,['platforms'],IGNITE,Bug,Blocker,2020-01-20 11:03:22,0
13280100,[IEP-35] public Java metric API,"Right now, there is no simple way to get metrics values from the java code.
We need to create a java API to access metric values.",IEP-35,[],IGNITE,Improvement,Critical,2020-01-17 09:46:37,2
13279838,[IEP-35] Expose MetricRegistry to the public API,"MetricRegistry is not a part of public API, but used in MetricExporter which is the part of public API.
We should export MetricRegistry to the public API.",IEP-35,[],IGNITE,Improvement,Blocker,2020-01-16 14:12:46,2
13279137,.NET: Recognize fields with KeyAttribute and set QueryField.IsKeyField,"Populate QueryField.IsKeyField automatically when System.ComponentModel.DataAnnotations.KeyAttribute is present. See {{QueryEntity.ScanAttributes}}.

This:
{code}
class Person
{
    [QuerySqlField]
    [Key]
    public string EntityId {get; set;}
}

...
new QueryEntity(typeof(string), typeof(Person))
{code}

Should be equivalent to this:
{code}
        <queryEntity keyType=""System.String"" ...>
          <fields>
            <queryField fieldType=""System.String"" name=""EntityId"" isKeyField=""true"" />
          </fields>
        </queryEntity>
{code}",.NET newbie,['platforms'],IGNITE,Improvement,Major,2020-01-13 17:33:58,0
13278725,Spring boot starter,To improve user experience with Ignite we should provide an ignite-spring-boot-starter like many of other projects do.,spring-boot-autoconfigure spring-boot-client-autoconfigure,['spring'],IGNITE,Improvement,Major,2020-01-10 14:30:02,2
13276349,Test refactoring. Explicit method for starting client nodes,"Right now there is almost 500 explicit usage of {{setClientMode}} in tests.
Seems we should support the starting of client nodes in test framework.

We should refactor tests to use {{startClientNode(String name)}}.
This will simplify tests.",newbie,[],IGNITE,Bug,Major,2019-12-25 09:32:28,2
13275765,.NET: NuGet verification script does not handle multi-digit version parts,"The following regex in verify-nuget.ps1 does not support multi-digit versions like 8.7.99

{code}
$packageId = $_.Name -replace '(.*?)\.\d\.\d\.\d\.nupkg', '$1'
{code}",.NET,['platforms'],IGNITE,Bug,Major,2019-12-20 17:17:40,0
13275527,.NET: ClientServerCompatibilityTest fails on some agents because of Maven error,"We should set language version explicitly in the pom.xml

{code}
[00:04:21]	[Apache.Ignite.Core.Tests.exe] >>> 35584 OUT: [ERROR] COMPILATION ERROR : 
[00:04:21]	[Apache.Ignite.Core.Tests.exe] >>> 35584 OUT: [INFO] -------------------------------------------------------------
[00:04:21]	[Apache.Ignite.Core.Tests.exe] >>> 35584 OUT: [ERROR] Source option 1.5 is no longer supported. Use 1.6 or later.
{code}

",.NET,['platforms'],IGNITE,Bug,Major,2019-12-19 14:54:39,0
13275520,.NET Thin Client: WithExpiryPolicy crashes client connection on old servers,"ICacheClient.WithExpiryPolicy does not check protocol version and causes exception and disconnect:

* Run Ignite 2.7.6 server node
* Connect thin client from master branch
* {{cache.WithExpiryPolicy(..).Put(1, 2)}}:
{code}
Unhandled exception. System.Net.Sockets.SocketException (10053): An established connection was aborted by the software in your host machine.
   at Apache.Ignite.Core.Impl.Client.ClientSocket.ReceiveBytes(Int32 size)
   at Apache.Ignite.Core.Impl.Client.ClientSocket.ReceiveMessage()
   at Apache.Ignite.Core.Impl.Client.ClientSocket.SendRequest(RequestMessage& reqMsg)
   at Apache.Ignite.Core.Impl.Client.ClientSocket.DoOutInOp[T](ClientOp opId, Action`1 writeAction, Func`2 readFunc, Func`3 errorFunc)
   at Apache.Ignite.Core.Impl.Client.ClientFailoverSocket.DoOutInOpAffinity[T,TKey](ClientOp opId, Action`1 writeAction, Func`2 readFunc, Int32 cacheId, TKey key, Func`3 errorFunc)
   at Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.DoOutInOpAffinity[T](ClientOp opId, TK key, TV val, Func`2 readFunc)
   at Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.DoOutOpAffinity(ClientOp opId, TK key, TV val)
   at Apache.Ignite.Core.Impl.Client.Cache.CacheClient`2.Put(TK key, TV val)
{code}",.NET,['platforms'],IGNITE,Task,Major,2019-12-19 14:39:54,0
13273427,.NET: Ignite does not start under Mono on Linux because of UnmanagedThread,"{code}
System.DllNotFoundException : libcoreclr.so assembly:<unknown assembly> type:<unknown type> member:(null)
  at (wrapper managed-to-native) Apache.Ignite.Core.Impl.Unmanaged.UnmanagedThread+NativeMethodsLinux.pthread_key_create(intptr,intptr)
  at Apache.Ignite.Core.Impl.Unmanaged.UnmanagedThread.SetThreadExitCallback (System.IntPtr callbackPtr) [0x00084] in /home/pavel/w/ignite/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/UnmanagedThread.cs:70 
  at Apache.Ignite.Core.Impl.Unmanaged.Jni.Jvm..ctor (System.IntPtr jvmPtr) [0x00041] in /home/pavel/w/ignite/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/Jvm.cs:100 
  at Apache.Ignite.Core.Impl.Unmanaged.Jni.Jvm.GetOrCreate (System.Collections.Generic.IList`1[T] options) [0x00013] in /home/pavel/w/ignite/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/Jvm.cs:149 
  at Apache.Ignite.Core.Impl.IgniteManager.CreateJvm (Apache.Ignite.Core.IgniteConfiguration cfg, Apache.Ignite.Core.Log.ILogger log) [0x00044] in /home/pavel/w/ignite/modules/platforms/dotnet/Apache.Ignite.Core/Impl/IgniteManager.cs:132 
  at Apache.Ignite.Core.Impl.IgniteManager.CreateJvmContext (Apache.Ignite.Core.IgniteConfiguration cfg, Apache.Ignite.Core.Log.ILogger log) [0x00099] in /home/pavel/w/ignite/modules/platforms/dotnet/Apache.Ignite.Core/Impl/IgniteManager.cs:83 
  at Apache.Ignite.Core.Ignition.Start (Apache.Ignite.Core.IgniteConfiguration cfg) [0x00078] in /home/pavel/w/ignite/modules/platforms/dotnet/Apache.Ignite.Core/Ignition.cs:251 
{code}

Mono is not officially supported by Ignite.NET, but it is useful to be able to compile full solution on Linux. 

See how DllLoader uses Os.IsMono check and a separate NativeMethods class.

Full steps to reproduce on Linux:
* Install Mono: https://www.mono-project.com/download/stable/#download-lin
* Install NuGet: *apt isntall nuget*
* Build the project with *build-mono.sh*
* Run *mono Apache.Ignite.exe*
",.NET newbie,['platforms'],IGNITE,Bug,Minor,2019-12-09 16:21:53,0
13272157,.NET: Thin client does not connect to old server nodes,"Exception when trying to connect .NET Thin Client from current master (https://www.nuget.org/packages/Apache.Ignite/2.8.0-alpha20191203) to the 2.7.6 server node:

{code}
Unhandled exception. Apache.Ignite.Core.Client.IgniteClientException: Client handshake failed: 'Unsupported version.'. Client version: 1.6.0. Server version: 1.2.0
   at Apache.Ignite.Core.Impl.Client.ClientSocket.Handshake(IgniteClientConfiguration clientConfiguration, ClientProtocolVersion version)
   at Apache.Ignite.Core.Impl.Client.ClientSocket..ctor(IgniteClientConfiguration clientConfiguration, EndPoint endPoint, String host, Nullable`1 version, Action`1 topVerCallback)
   at Apache.Ignite.Core.Impl.Client.ClientFailoverSocket.Connect()
   at Apache.Ignite.Core.Impl.Client.ClientFailoverSocket..ctor(IgniteClientConfiguration config, Marshaller marsh)
   at Apache.Ignite.Core.Impl.Client.IgniteClient..ctor(IgniteClientConfiguration clientConfiguration)
   at Apache.Ignite.Core.Ignition.StartClient(IgniteClientConfiguration clientConfiguration)
   at ConsoleApp2.Program.Main(String[] args) in /home/pavel/RiderProjects/ConsoleApp2/ConsoleApp2/Program.cs:line 14 [StatusCode=Fail]
{code}

This is caused by buggy version handling logic in Handshake method. Otherwise we support any older protocol version.",.NET,['platforms'],IGNITE,Bug,Blocker,2019-12-04 09:00:24,0
13271944,.NET: Performance: review CopyOnWriteConcurrentDictionary.GetOrAdd usage and locking,"CopyOnWriteConcurrentDictionary.GetOrAdd uses lock right away, while the class assumes frequent reads and infrequent writes. It can be beneficial to check for the key outside of the lock.

In particular, this often causes contention because of BinarySystemHandlers.GetWriteHandler call.

Review other usages of this method.",.NET,['platforms'],IGNITE,Improvement,Major,2019-12-03 13:02:09,0
13271885,.NET: XMLDoc does not work when using Ignite NuGet from .NET Core,"* Create new .NET Core project (2.x or 3.x): dotnet new console
* Install nightly build of 2.8.0: dotnet add package Apache.Ignite -v 2.8.0-alpha20191118
* Open the project in any IDE (VS, VSCode, Rider) and start using Ignite APIs

There is no documentation in IDE tooltips. NuGet package is malformed.",.NET,['platforms'],IGNITE,Bug,Critical,2019-12-03 07:52:23,0
13271415,Metrics and SystemView documentation,"We should provide the following documentation

- metric description.
- system view descirption.
- metrics exporter configuration guide.
- system view exporter configuration guide.",IEP-35,['documentation'],IGNITE,Task,Blocker,2019-11-29 13:37:45,2
13271280,.NET: WithReadRepair does not work,"WithReadRepair in .NET was partially implemented as part of IGNITE-10663, however:
* It does not work due to missing Java part (no handling of CacheOp.WithReadRepair in PlatformCache)
* There are no tests

This new API is not in any release yet, so we should either fix it or remove from the public API.",.NET,['platforms'],IGNITE,Bug,Blocker,2019-11-28 20:32:34,0
13271277,.NET: Adopt nullable reference types,".NET 5 is due on November 2020. Microsoft recommends adopting nullable annotations on public APIs before that date to all library authors:
* https://devblogs.microsoft.com/dotnet/embracing-nullable-reference-types/
* https://stu.dev/csharp8-doing-unsupported-things/
* https://www.youtube.com/watch?v=TJiLhRPgyq4&feature=youtu.be

The adoption can be performed on any language version by using special attributes in the source code (no binary dependency required): https://github.com/manuelroemer/Nullable ",.NET ignite-3,['platforms'],IGNITE,Improvement,Critical,2019-11-28 19:40:39,0
13270440,Striped thread pool queue system view,"When in the production environment exist some cluster performance issues usually it leads to the large striped executor queue size.

The number of tasks in the queue can observe by {StripedExecutorMXBean#getTotalQueueSize} metric. In the case queue size becomes large it's useful to have the ability to know what tasks are waiting for execution in the thread pool.

Especially, for dealing with failover scenarios.

We should create a system views to expose information about striped executor services queue.
",IEP-35,[],IGNITE,Sub-task,Major,2019-11-25 12:48:57,2
13270162,.NET: Add automatic NuGet verification as part of the release process,"Use dotnet CLI to verify that resulting nupkg file can be installed and Ignite node starts (dotnet new console, dotnet add package, etc).",.NET,['platforms'],IGNITE,Improvement,Major,2019-11-22 19:17:38,0
13269867,.NET Thin Client: Handle unsupported features on older server nodes gracefully,"Right now we don't check server version before doing requests for newer features like Affinity Awareness and Cluster API. This causes exceptions like ""Invalid re
quest op code: 5000"", which are cryptic for the user.

Fix this:
* Affinity Awareness: disable it automatically if there is no server support; log a warning to the log (add logging by adding IgniteClientConfiguration.Logger property)
* Individual methods and features like Cluster API - throw an exception with user-friendly explanation",.NET,['platforms'],IGNITE,Bug,Critical,2019-11-21 14:49:11,0
13268955,.NET: Separate NuGet package for Thin Client,"Right now Thin Client is shipped as part of the same NuGet package as full Ignite.NET.
This package includes jar files, which take a lot of disk space and are not required for Thin Client at all.

We should extract common functionality into a separate assembly, and ship thin client in a separate, lighter package.",.NET,['platforms'],IGNITE,Improvement,Major,2019-11-17 22:32:40,0
13268784,.NET: Fix NuGet package warnings,"When uploading a NuGet package, the following warnings are issued:
* {{The <licenseUrl> element is deprecated. Consider using the <license> element instead.}}
* {{The <iconUrl> element is deprecated. Consider using the <icon> element instead.}}",.NET,['platforms'],IGNITE,Improvement,Major,2019-11-16 10:04:54,0
13268605,".NET: Add IBinaryObjectBuilder.SetField(name, val, type) overload","Right now the only general-purpose overload is {{SetField<T>(string fieldName, T val)}}.
Let's say we get name-value pairs from some other system (e.g. from Dapper - see linked user list thread), and we want to create binary objects from them.
When we call SetField<object>, binary metadata will have Object type for all fields (type code 103), which is not good.
The only workaround is to create a huge if-else and call proper SetXxx method depending on actual data type - bad usability.

In fact, we can easily provide SetField(string name, object val, Type valType) overload to solve this.  Such an overload exists on Java side.",.NET,['platforms'],IGNITE,Improvement,Major,2019-11-15 16:02:58,0
13267969,.NET: Make sure units are specified in documentation where applicable,"Units are missing in some docs. For example, XMLDoc for DataRegionConfiguration does not specify that MaxSize is in bytes:
https://ignite.apache.org/releases/latest/dotnetdoc/api/Apache.Ignite.Core.Configuration.DataRegionConfiguration.html

Check entire documentation and add units where needed.",.NET,"['documentation', 'platforms']",IGNITE,Improvement,Major,2019-11-13 09:39:39,0
13265555,.NET: Query cursors are not thread-safe,"Query cursors (inheritors of {{QueryCursorBase}}) are not thread safe. The code has an attempt to make them thread-safe, but race condition exists between Dispose and MoveNext calls - it is possible that GetBatch is called after Dispose, causing all kinds of issues like calls to non-existent filter.

We should either fix the race, or update the documentation with a thread unsafety note.",.NET,['platforms'],IGNITE,Bug,Major,2019-10-31 14:51:58,0
13265435,.NET: Platform error:System.NullReferenceException,"Came across [this StackOverflow issue|https://stackoverflow.com/questions/58624177/blocked-system-critical-thread-has-been-detected] and the found an NPE that might cause the rest of instabilities:

{code:java}
class org.apache.ignite.IgniteException: Platform error:System.NullReferenceException: Ññûëêà íà îáúåêò íå óêàçûâàåò íà ýêçåìïëÿð îáúåêòà.
   â Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.CacheEntryFilterApply(Int64 memPtr)
   â Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongOutLong(Int32 type, Int64 val)
	at org.apache.ignite.internal.processors.platform.PlatformProcessorImpl.loggerLog(PlatformProcessorImpl.java:404)
	at org.apache.ignite.internal.processors.platform.PlatformProcessorImpl.processInStreamOutLong(PlatformProcessorImpl.java:460)
	at org.apache.ignite.internal.processors.platform.PlatformProcessorImpl.processInStreamOutLong(PlatformProcessorImpl.java:512)
	at org.apache.ignite.internal.processors.platform.PlatformTargetProxyImpl.inStreamOutLong(PlatformTargetProxyImpl.java:67)
	at org.apache.ignite.internal.processors.platform.callback.PlatformCallbackUtils.inLongOutLong(Native Method)
	at org.apache.ignite.internal.processors.platform.callback.PlatformCallbackGateway.cacheEntryFilterApply(PlatformCallbackGateway.java:143)
	at org.apache.ignite.internal.processors.platform.cache.PlatformCacheEntryFilterImpl.apply(PlatformCacheEntryFilterImpl.java:70)
	at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager$InternalScanFilter.apply(GridCacheQueryManager.java:3139)

{code}


",.NET,[],IGNITE,Bug,Critical,2019-10-31 01:51:22,0
13263538,.NET: Java version is not taken into account when detecting JAVA_HOME,"When multiple Java versions are installed on the machine, random one is picked up.
For example, when 7 and 8 are installed, only 8 is suitable for Ignite.

We should check versions and pick the right one:
* Collect all known versions
* Filter out all below 8
* Pick the lowest

Lower versions are prioritized - we don't want to use latest. Brand new Java version with breaking changes might be released where Ignite does not work.",.NET,['platforms'],IGNITE,Bug,Minor,2019-10-21 13:16:39,0
13262600,.NET: Implement Log Throttle and print warning for unsafe PutAll ops,"Right now it's not possible to do one-time developer warnings in .Net as there is no Log Throttle. Please implement one. Please also issue warning if random-order collection is passed to PutAll, InvokeAll, RemoveAll, as it is prime source for deadlocks and developer frustration.",.NET,['platforms'],IGNITE,Improvement,Major,2019-10-16 10:45:55,0
13262555,.NET Inspections failure on TC,"New R# version detected a new problem:

{code}
BinaryUtils.cs (1)
625:  Actual shift count equals zero. Left operand will remain unchanged
{code}",.NET,['platforms'],IGNITE,Improvement,Major,2019-10-16 08:27:11,0
13261991,NPE in SQLView exporter when filter is null,"When filter is null in {{SqlViewMetricExporterSpi}} then NPE happens:

{noformat}
[2019-10-13 12:30:43,611][INFO ][main][root] >>> Starting test: SqlViewExporterSpiTest#testDataRegionMetrics <<<
[2019-10-13 12:30:43,616][ERROR][main][root] Test failed.
class org.apache.ignite.IgniteException: Failed to execute SQL query. Внутренняя ошибка: ""java.lang.NullPointerException""
General error: ""java.lang.NullPointerException""; SQL statement:
SELECT REPLACE(name, 'io.dataregion.default.'), value, description FROM SYS.METRICS [50000-197]
	at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.lambda$executeSelect0$1(IgniteH2Indexing.java:1422)
	at org.apache.ignite.internal.processors.cache.QueryCursorImpl.iter(QueryCursorImpl.java:106)
	at org.apache.ignite.internal.processors.cache.query.RegisteredQueryCursor.iter(RegisteredQueryCursor.java:66)
	at org.apache.ignite.internal.processors.cache.QueryCursorImpl.getAll(QueryCursorImpl.java:125)
	at org.apache.ignite.internal.processors.cache.metric.SqlViewExporterSpiTest.execute(SqlViewExporterSpiTest.java:589)
	at org.apache.ignite.internal.processors.cache.metric.SqlViewExporterSpiTest.testDataRegionMetrics(SqlViewExporterSpiTest.java:136)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[2019-10-13 12:30:43,619][INFO ][main][root] >>> Stopping test: SqlViewExporterSpiTest#testDataRegionMetrics in 8 ms <<<
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.apache.ignite.testframework.junits.GridAbstractTest$7.run(GridAbstractTest.java:2090)
	at java.lang.Thread.run(Thread.java:748)
Caused by: class org.apache.ignite.IgniteCheckedException: Failed to execute SQL query. Внутренняя ошибка: ""java.lang.NullPointerException""
General error: ""java.lang.NullPointerException""; SQL statement:
SELECT REPLACE(name, 'io.dataregion.default.'), value, description FROM SYS.METRICS [50000-197]
	at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.executeSqlQuery(IgniteH2Indexing.java:828)
	at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.executeSqlQueryWithTimer(IgniteH2Indexing.java:909)
	at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing$2.iterator(IgniteH2Indexing.java:578)
	at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing$2.iterator(IgniteH2Indexing.java:555)
	at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.lambda$executeSelect0$1(IgniteH2Indexing.java:1419)
	... 15 more
Caused by: org.h2.jdbc.JdbcSQLException: Внутренняя ошибка: ""java.lang.NullPointerException""
General error: ""java.lang.NullPointerException""; SQL statement:
SELECT REPLACE(name, 'io.dataregion.default.'), value, description FROM SYS.METRICS [50000-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:168)
	at org.h2.message.DbException.convert(DbException.java:307)
	at org.h2.command.Command.executeQuery(Command.java:216)
	at org.h2.jdbc.JdbcPreparedStatement.executeQuery(JdbcPreparedStatement.java:114)
	at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.executeSqlQuery(IgniteH2Indexing.java:821)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.apache.ignite.spi.metric.sql.MetricRegistryLocalSystemView$1.advance(MetricRegistryLocalSystemView.java:75)
	at org.apache.ignite.spi.metric.sql.MetricRegistryLocalSystemView$1.hasNext(MetricRegistryLocalSystemView.java:92)
	at org.apache.ignite.internal.processors.query.h2.opt.GridH2Cursor.next(GridH2Cursor.java:78)
	at org.h2.index.IndexCursor.next(IndexCursor.java:316)
	at org.h2.table.TableFilter.next(TableFilter.java:502)
	at org.h2.command.dml.Select$LazyResultQueryFlat.fetchNextRow(Select.java:1452)
	at org.h2.result.LazyResult.hasNext(LazyResult.java:79)
	at org.h2.result.LazyResult.next(LazyResult.java:59)
	at org.h2.command.dml.Select.queryFlat(Select.java:527)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:633)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:114)
	at org.h2.command.dml.Query.query(Query.java:352)
	at org.h2.command.dml.Query.query(Query.java:333)
	at org.h2.command.CommandContainer.query(CommandContainer.java:114)
	at org.h2.command.Command.executeQuery(Command.java:202)
	... 21 more
{noformat}",IEP-35,[],IGNITE,Bug,Blocker,2019-10-13 09:28:45,2
13260553,.NET: Add ContinuousQueryWithTransformer,"ContinuousQueryWithTransformer is a powerful mechanism to improve continuous query performance by sending only relevant data back to listener nodes.
https://apacheignite.readme.io/docs/continuous-queries#section-remote-transformer",.NET,['platforms'],IGNITE,Improvement,Major,2019-10-04 10:58:00,0
13259709,Concurrency guarantees for TransactionView,"Currently, {{TransactionView#keysCount}} and {{TransactionView#cacheIds}} works with Collections that not provides concurrent guarantees.

We should research the possibility to provide consistent transaction view for these data structures. 

Performance of the transaction engine can be limitation here.",IEP-35 await,[],IGNITE,Bug,Major,2019-09-30 16:27:58,2
13259639,.NET: Add tests for Thin Client async continuation behavior,"Add a test to verify that Thin Client async operation continuations run on Thread Pool threads, and not on socket reader thread.

The behavior is correct right now thanks to {{ContWith}} usage in {{DoOutInOpAsync}}, but this is an easy mistake to make, so tests are important.",.NET,['platforms'],IGNITE,Improvement,Major,2019-09-30 11:06:32,0
13258861,.NET: Fix flaky tests,"Known flaky tests:

* CacheTestSsl.TestAsyncCompletionOrder
* DataStorageMetricsTest.TestDataStorageMetrics
* PersistenceTest.TestBaselineTopology
* CancellationTest.TestTask

",.NET,['platforms'],IGNITE,Improvement,Major,2019-09-25 16:22:44,0
13258461,SQL query system view,We need to add system view for a SQL queries,IEP-35 await,[],IGNITE,Sub-task,Major,2019-09-24 07:08:25,2
13258460,Scan query system view,We need to add a system views for Scan queries,IEP-35 await,[],IGNITE,Sub-task,Major,2019-09-24 07:07:24,2
13258120,Continuous query system view,"IGNITE-12145 finished

We should add continuous query system views.",IEP-35 await,[],IGNITE,Sub-task,Major,2019-09-21 20:15:49,2
13258119,Sql objects system views,"IGNITE-12145 finished

We should add SQL objects system views.
* Schemas
* Tables
* Indexes
* SQL queries",IEP-35 await,[],IGNITE,Sub-task,Major,2019-09-21 20:14:34,2
13258118,Nodes system view,"IGNITE-12145 finished

We should add nodes system views.
System view should track current topology nodes.",IEP-35 await,[],IGNITE,Sub-task,Major,2019-09-21 20:13:25,2
13258117,Client connections system view,"IGNITE-12145 finished

We should add client connections to the system views.
System view should track JDBC, ODBC and thin connections.",IEP-35,[],IGNITE,Sub-task,Major,2019-09-21 20:12:15,2
13258091,Transaction system view,"IGNITE-12145 finished

We should add transactions to the system views.",IEP-35,[],IGNITE,Sub-task,Major,2019-09-21 11:19:54,2
13257096,.NET: Apache.Ignite.exe fails when config has custom logger or plugins,"Steps to reproduce:
* Implement Apache.Ignite.Core.Log.ILogger interface, compiled into assembly
* Create a config file with that logger:
{code}
<configuration>
    <configSections>
        <section name=""igniteConfiguration"" type=""Apache.Ignite.Core.IgniteConfigurationSection, Apache.Ignite.Core"" />
    </configSections>

    <igniteConfiguration xmlns=""http://ignite.apache.org/schema/dotnet/IgniteConfigurationSection"">
        <logger type='CustomNs.CustomLogger, CustomAsm' />
    </igniteConfiguration>
</configuration>
{code}
* Run Apache.Ignite.exe with that config file while CustomAsm is in a separate dir:
{code}
Apache.Ignite.exe -ConfigFileName=myconfig.xml -assembly=c:\w\CustomAsm.dll
{code}",.NET,['platforms'],IGNITE,Bug,Major,2019-09-17 12:07:43,0
13256317,.NET: ExecutableTest fails with PathTooLong error,"When repo root path is long enough, it causes ExecutableTests to fail - classpath exceeds Win32 limit of 32767 characters. If fact, we don't need to pass classpath explicitly to IgniteProcess.",.NET,['platforms'],IGNITE,Bug,Major,2019-09-12 10:35:43,0
13255179,[IEP-35] Monitoring list engine,The base engine for the monitoring list.,IEP-35,[],IGNITE,Sub-task,Major,2019-09-06 07:43:10,2
13254447,.NET: TestBaselineTopology pollutes environment variables,"PersistenceTest.TestBaselineTopology sets IGNITE_BASELINE_AUTO_ADJUST_ENABLED env var, there are two issues:

* If the test fails, the variable is not reset

* If the test succeeds, the variable is cleared instead of being reset to previous value (whatever it might be)

",.NET,['platforms'],IGNITE,Bug,Major,2019-09-03 18:39:39,0
13252331,.NET: Remove empty tracing-related interfaces from public API,"Remove IMetricExporterSpi and ITracingSpi. They bring zero value and can confuse users.

They were added because of failing API Parity tests. We should disable those tests to avoid confusing other team members, and run them manually when needed to check for new APIs.",.NET,['platforms'],IGNITE,Bug,Blocker,2019-08-22 09:06:10,0
13248924,[IEP-35] JmxExporterSpi has too broad name.,{{JmxExporterSpi}} has too broad name. It should be renamed to {{JmxMetricExporterSpi}}.,IEP-35,[],IGNITE,Bug,Major,2019-08-05 16:53:19,2
13248921,[IEP-35] JmxExporterSpi displays histogram values incorrectly,"{{JmxExporterSpi}} exposes histogram values incorrectly. It looks like:

{noformat}
durationHistogram                long[5]
{noformat}

I think exporter should register attribute for each histogram bucket. Something like this:

{noformat}
durationHistogram.10                 0
durationHistogram.50                 0
durationHistogram.100                0
durationHistogram.250                0
durationHistogram.500                0
{noformat}

",IEP-35,[],IGNITE,Bug,Major,2019-08-05 16:45:05,2
13248888,[IEP-35] Metrics: JMX exporter reports incorrect description.,"JMX exporter creates bean for each metric. Metric's registration takes human readable description field.
If we open any MBean explorer and get Metadata of any metric, we see {{description = <registy name>.<metric name>}} instead of human readable description, specified by metric developer.
",IEP-35 newbie,[],IGNITE,Bug,Major,2019-08-05 14:26:12,2
13248330,Callbacks from striped pool due to async/await may hang cluster,"Discussed on dev-list:
http://apache-ignite-developers.2346864.n4.nabble.com/Re-EXTERNAL-Re-Replace-or-Put-after-PutAsync-causes-Ignite-to-hang-td42921.html

*Must use the public pool for callbacks as the most obvious step.*

----

http://apache-ignite-users.70518.x6.nabble.com/Replace-or-Put-after-PutAsync-causes-Ignite-to-hang-td27871.html#a28051

There's a reproducer project. Long story short, .Net can invoke cache operations with future callbacks, which will be invoked from striped pool. If such callbacks are to use cache operations, those will be possibly sheduled to the same stripe and cause a deadlock.

The code is very simple:

{code}
                Console.WriteLine(""PutAsync"");
                await cache.PutAsync(1, ""Test"");

                Console.WriteLine(""Replace"");
                cache.Replace(1, ""Testing""); // Hangs here

                Console.WriteLine(""Wait"");
                await Task.Delay(Timeout.Infinite); 
{code}

async/await should absolutely not allow any client code to be run from stripes.",iep-70,"['cache', 'platforms']",IGNITE,Bug,Critical,2019-08-01 12:38:33,0
13246989,.NET: ICompute.WithExecutor,"Propagate the following APIs to .NET:
* IgniteCompute.withExecutor
* IgniteConfiguration.ExecutorConfiguration",.NET,['platforms'],IGNITE,Improvement,Major,2019-07-25 07:57:01,0
13245396,[IEP-35] Add ability to configure metrics,"Ignite should be able to:

* Configure Histogram metrics
* Configure HitRate metrics.

We should provide 2 ways to configure metric:

1. -Configuration file.- Discussed on dev-list. Agreed to go with the simplest solution - JMX method.
2. JMX method.",IEP-35,[],IGNITE,Improvement,Major,2019-07-17 08:11:40,2
13245043,.NET: CompiledQuery.Compile does not work with string parameters,"String parameters always produce an exception, example:

{code}
CompiledQuery.Compile((string empName) => persons.Where(x => x.Value.Name == empName))
{code}

Result:
{code}
System.InvalidOperationException: Error compiling query: entire LINQ expression should be specified within lambda passed to Compile method. Part of the query can't be outside the Compile method call.
{code}",.NET,['platforms'],IGNITE,Bug,Major,2019-07-15 18:56:25,0
13242185,[IEP-35] Performance drop on cache stop,"`MetricRegistry` implementation drop performance on cache stops.
Has to be fixed.",IEP-35,[],IGNITE,Improvement,Major,2019-06-28 16:08:31,2
13241307,[IEP-35] Rewrite GridLocalMetrics using new framework,"1. GridLocalMetrics should be moved to GridMetricManager
2. Standard JVM JMX beans should be registered as metrics on startup.",IEP-35,[],IGNITE,Improvement,Major,2019-06-24 17:10:11,2
13239531,[IEP-35] Migrage GridJobMetricsProcessor,After merging of IGNITE-11848 we should migrate `GridJobMetricsProcessor` to the new metric framework.,IEP-35,[],IGNITE,Improvement,Major,2019-06-14 13:12:54,2
13239529,[IEP-35] Migrage QueryMetrics,"After merging of IGNITE-11848 we should migrate `QueryMetrics` to the new metric framework.

",IEP-35,[],IGNITE,Improvement,Major,2019-06-14 13:10:16,2
13239523,[IEP-35] Migrate CacheGroupMetrics,After merging of IGNITE-11848 we should migrate `CacheGroupMetricsMXBean` to the new metric framework.,IEP-35,[],IGNITE,Improvement,Major,2019-06-14 12:57:10,2
13239522,[IEP-35] Improve Metric API,"MetricRegistry may be made safer if we explicitly extract a group of metrics for some Ignite entity(cache, service, etc.). 

Internally, the registry will stay the same.

API proposition is:

{code:java}
MetricRegistry {
    MetricSet default();

    MetricSet group(String name);
}

MetricSet {
    LongCounter counter();
    void registrer(Metric m);

    //other methods.
}
{code}",IEP-35,[],IGNITE,Improvement,Major,2019-06-14 12:49:37,2
13239209,[IEP-35] Research possibility to optimize MetricRegistry,"We should research and benchmark different data structure for a MetricRegistry implementation.

A basic assumption of `MetricRegistry` usage:

1. Collection of metrics almost constant during Ignite lifetime. It will be changed on cache creation(destroy) and other not frequent operations.

2. Collection of metrics will be read very frequently(each several seconds or frequently) by configured metric exporters.",IEP-35,[],IGNITE,Improvement,Major,2019-06-13 09:04:14,2
13238494,[IEP-35] Monitoring&Profiling. Phase 2,"Phase 2 should introduce:

Ability to collect lists of some internal object Ignite manage.
Examples of such objects:

* Caches
* Queries (including continuous queries)
* Services
* Compute tasks
* Distributed Data Structures
* etc...

1. Fields for each list should be discussed in separate tickets
2. Metric Exporters (optionally) can support list export.",IEP-35 await important,[],IGNITE,Improvement,Blocker,2019-06-10 10:41:51,2
13235383,Add EmptyLineSeparator to codestyle checker,"We should add following check:
{code}
        <module name=""EmptyLineSeparator"" />
{code}

and fix all current errors",checkstyle,[],IGNITE,Improvement,Major,2019-05-24 12:59:29,2
13233230,[IEP-35] Monitoring&Profiling. Phase 1,"Umbrella ticket for the IEP-35. Monitoring and profiling.

Phase 1 should include:
 * NextGen monitoring subsystem implementation to manage
 ** metrics
 ** -lists- (will be implemented in the following tickets)
 ** exporters
 * JMX, SQLView, Log exporters
 * Migration of existing metrics to new manager
 * -Lists for all Ignite user API-",IEP-35 important,[],IGNITE,Improvement,Major,2019-05-14 12:39:58,2
13227495,CPP: Implement Cluster API,Let's start implementing Cluster API for C++.,cpp important,['platforms'],IGNITE,New Feature,Major,2019-04-11 16:14:29,3
13226934,Jdbc Thin: add ability to control affinity cache size.,Within AffinityCache there are two properties DISTRIBUTIONS_CACHE_LIMIT and SQL_CACHE_LIMIT that are hard coded. We should add an ability to control given parameters within some sort of configuration. IgniteSystemProperties is not an option however.,iep-24,['jdbc'],IGNITE,Task,Major,2019-04-09 12:06:56,1
13226904,CPP: Add default BinaryType methods implementations where possible,"Currently, most of specifications of {{BinaryType}} template have the same default implementations of certain methods, which may be implemented by default. Here is the list:
* {{GetTypeId()}}
* {{GetFieldId()}}
",cpp,['platforms'],IGNITE,Improvement,Major,2019-04-09 09:58:08,3
13225282,C++ : remove macro usages in the examples,"Currently c++ examples are using internal macros. For example to specify how to serialize/deserialize user's c++ structs.

{code:c++}
 IGNITE_BINARY_TYPE_START(ignite::examples::Person)

            typedef ignite::examples::Person Person;

            IGNITE_BINARY_GET_TYPE_ID_AS_HASH(Person)
            IGNITE_BINARY_GET_TYPE_NAME_AS_IS(Person)
            IGNITE_BINARY_GET_FIELD_ID_AS_HASH
            IGNITE_BINARY_IS_NULL_FALSE(Person)
            IGNITE_BINARY_GET_NULL_DEFAULT_CTOR(Person)
  //...
{code}",c++ examples,"['examples', 'platforms']",IGNITE,Improvement,Major,2019-04-01 13:15:08,3
13221641,Fix flacky test testGivenCacheWithPojoValueAndPds_WhenPut_ThenNoHangup.,"IgnitePdsBinarySortObjectFieldsTest.testGivenCacheWithPojoValueAndPds_WhenPut_ThenNoHangup fails sporadically on TC due to 5 sec timeout may be not enough for grid startup.

Test checks ""put"" operation will complete in 5 sec timeout, 
but grid initialization is included in this timeout with no reason.",MakeTeamcityGreenAgain,[],IGNITE,Test,Major,2019-03-14 10:35:25,1
13221017,.NET: Deprecate SqlQuery API,"This API is very limited comparing to SqlFieldsQuery. Let's deprecate it with proper links to SqlFieldsQuery. This should be not only deprecation on public API, but removal from examples as well.

Also please remove hidden columns _key, _val from examples.

All of this includes:
* Thin client and examples
* .NET Core examples
* LINQPad examples

Parent ticket: IGNITE-11334
Ticket for documentation: IGNITE-11370",.NET,"['platforms', 'thin client']",IGNITE,Task,Major,2019-03-12 07:19:48,0
13219547,MVCC: Error on TxLog initialization.,"Some [tests remained flaky|https://ci.ignite.apache.org/project.html?projectId=IgniteTests24Java8&buildTypeId=&tab=testDetails&testNameId=-935846982857542309&order=TEST_STATUS_DESC&itemsCount=50&branch_IgniteTests24Java8=__all_branches__] even after IGNITE-10582 has been fixed. It should be investigated again.
{noformat}
[21:44:14] (err) Failed to execute compound future reducer: GridCompoundFuture [rdc=null, initFlag=1, lsnrCalls=0, done=false, cancelled=false, err=null, futs=TransformCollectionView [true, false, false, false]]class org.apache.ignite.IgniteCheckedException: Failed to complete exchange process.
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.createExchangeException(GridDhtPartitionsExchangeFuture.java:3209)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.sendExchangeFailureMessage(GridDhtPartitionsExchangeFuture.java:3237)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.finishExchangeOnCoordinator(GridDhtPartitionsExchangeFuture.java:3323)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.onAllReceived(GridDhtPartitionsExchangeFuture.java:3304)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.distributedExchange(GridDhtPartitionsExchangeFuture.java:1519)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.init(GridDhtPartitionsExchangeFuture.java:852)
	at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body0(GridCachePartitionExchangeManager.java:2920)
	at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body(GridCachePartitionExchangeManager.java:2769)
	at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120)
	at java.lang.Thread.run(Thread.java:748)
	Suppressed: class org.apache.ignite.IgniteCheckedException: Failed to initialize exchange locally [locNodeId=140a9253-f646-4691-9947-2b211a900000]
		at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.onCacheChangeRequest(GridDhtPartitionsExchangeFuture.java:1254)
		at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.init(GridDhtPartitionsExchangeFuture.java:782)
		... 4 more
	Caused by: java.lang.IllegalStateException: Failed to get page IO instance (page content is corrupted)
		at org.apache.ignite.internal.processors.cache.persistence.tree.io.IOVersions.forVersion(IOVersions.java:85)
		at org.apache.ignite.internal.processors.cache.persistence.tree.io.IOVersions.forPage(IOVersions.java:97)
		at org.apache.ignite.internal.processors.cache.persistence.freelist.PagesList.init(PagesList.java:181)
		at org.apache.ignite.internal.processors.cache.persistence.tree.reuse.ReuseListImpl.<init>(ReuseListImpl.java:57)
		at org.apache.ignite.internal.processors.cache.mvcc.txlog.TxLog.init(TxLog.java:161)
		at org.apache.ignite.internal.processors.cache.mvcc.txlog.TxLog.<init>(TxLog.java:87)
		at org.apache.ignite.internal.processors.cache.mvcc.MvccProcessorImpl.ensureStarted(MvccProcessorImpl.java:302)
		at org.apache.ignite.internal.processors.cache.GridCacheProcessor.createCacheContext(GridCacheProcessor.java:1552)
		at org.apache.ignite.internal.processors.cache.GridCacheProcessor.prepareCacheContext(GridCacheProcessor.java:2325)
		at org.apache.ignite.internal.processors.cache.GridCacheProcessor.lambda$null$6a5b31b9$1(GridCacheProcessor.java:2164)
		at org.apache.ignite.internal.processors.cache.GridCacheProcessor.lambda$prepareStartCachesIfPossible$6(GridCacheProcessor.java:2104)
		at org.apache.ignite.internal.processors.cache.GridCacheProcessor.lambda$prepareStartCaches$926b6886$1(GridCacheProcessor.java:2161)
		at org.apache.ignite.internal.util.IgniteUtils.lambda$null$1(IgniteUtils.java:10833)
		at java.util.concurrent.FutureTask.run(FutureTask.java:266)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
		... 1 more
{noformat}",mvcc_stability,['mvcc'],IGNITE,Bug,Major,2019-03-05 12:34:43,1
13218872,ODBC backward compatibility between 2.5 and 2.7 is broken,ODBC driver with version 2.5 can not connect to server 2.6 or 2.7.,odbc,['odbc'],IGNITE,Bug,Major,2019-03-01 11:58:44,3
13218868,MVCC: Fix GridCachePartitionedNearDisabledMvccTxMultiThreadedSelfTest.,"Next tests failed on TC:

GridCachePartitionedNearDisabledMvccTxMultiThreadedSelfTest.testPessimisticRepeatableReadCommitMultithreaded

GridCacheReplicatedMvccTxMultiThreadedSelfTest.testPessimisticRepeatableReadCommitMultithreaded

 

Seems, retry on write conflict is missed in test.",MakeTeamcityGreenAgain,['mvcc'],IGNITE,Test,Major,2019-03-01 11:42:04,1
13218094,Cannot build C++ from tarball of master branch,"In a tarball made by mvn initialize -Prelease on fresh master branch:

{code}
% libtoolize && aclocal && autoheader && automake --add-missing && autoreconf
libtoolize: putting auxiliary files in '.'.
libtoolize: linking file './ltmain.sh'
libtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
libtoolize: linking file 'm4/libtool.m4'
libtoolize: linking file 'm4/ltoptions.m4'
libtoolize: linking file 'm4/ltsugar.m4'
libtoolize: linking file 'm4/ltversion.m4'
libtoolize: linking file 'm4/lt~obsolete.m4'
configure.ac:36: installing './ar-lib'
configure.ac:35: installing './compile'
configure.ac:24: installing './config.guess'
configure.ac:24: installing './config.sub'
configure.ac:28: installing './install-sh'
configure.ac:28: installing './missing'
configure.ac:88: error: required file 'network/include/Makefile.in' not found
configure.ac:88: error: required file 'network/Makefile.in' not found
Makefile.am:27: error: required directory ./network does not exist
Makefile.am:22: error: required directory ./network does not exist
Makefile.am:51: error: required directory ./network does not exist
binary/Makefile.am: installing './depcomp'
{code}

Indeed it seems that network/ does not exist",C++,['platforms'],IGNITE,Bug,Blocker,2019-02-26 13:45:10,3
13215736,JDBC Thin: add support for individual reconnect in case of best effort affinity mode.,Currently in case of best effort affinity mode we either connect to all nodes specified by user or throw SQLException. Given logic needs to be improved.,iep-23,['jdbc'],IGNITE,Bug,Major,2019-02-14 13:10:29,1
13215385,Python thin client: best effort affinity,The goal is to implement [IEP-23|https://cwiki.apache.org/confluence/display/IGNITE/IEP-23%3A+Best+Effort+Affinity+for+thin+clients] using background thread (`threading` module).,Python Python3 iep-23 thin,"['python', 'thin client']",IGNITE,New Feature,Major,2019-02-13 03:47:20,3
13214774,SQL: Make GridCacheSqlQuery immutable,"The goal of this ticket is to finally make two-step plan fully immutable. First steps we already made in IGNITE-11223, howevere plan's ""query"" objects are still mutable, what make's plan caching inherently unsafe.

# Remove all setters from the message except of {{nodeId}}, which is really needed
# Make splitter use another trully immutable object instead of {{GridCacheSqlQuery}}
# Copy splitter's object to {{GridCacheSqlQuery}} during reduce",newbie,['sql'],IGNITE,Task,Major,2019-02-09 08:23:08,4
13214385,MVCC: Tests has been forgotten to unmute.,"There are muted\ignored tests that are not being run on TC, but tickets for fixing them looks already resolved.

Let's recheck those tests and either unmute them or create a new tickets to fix lately if needed.

IgniteBasicWithPersistenceTestSuite
 * testIoomErrorMvccPdsHandling - IGNITE-10185

IgniteCacheMvccSqlTestSuite
 * testSqlReadInsideTxInProgressCoordinatorFails - IGNITE-8841
 * testSqlReadInsideTxInProgressCoordinatorFails_ReadDelay  - IGNITE-8841
 * testPutAllGetAll_ClientServer_Backups1_SinglePartition_RestartRandomSrv_SqlDml - IGNITE-10752
 * testAccountsTxSql_SingleNode_CoordinatorFails_Persistence - IGNITE-10753

 

 ",MakeTeamcityGreenAgain,['mvcc'],IGNITE,Bug,Major,2019-02-07 14:30:58,1
13213951,MVCC: JVM crash in MVCC PDS 1 suite,"Sometimes JVM crash [occurs|https://ci.ignite.apache.org/viewType.html?buildTypeId=IgniteTests24Java8_MvccPds1&branch_IgniteTests24Java8=%3Cdefault%3E&tab=buildTypeHistoryList&state=failed] in {{vacuum-cleaner}} thread in {{ExplicitWalDeltaConsistencyTest}}. 
See attached crash report.",mvcc_stability,['mvcc'],IGNITE,Bug,Critical,2019-02-05 15:55:43,1
13212746,SQL: Do not wrap key and value objects in GridH2KeyValueRowOnheap,This wrapping is not needed.,performance,['sql'],IGNITE,Task,Major,2019-01-30 08:13:05,4
13212432,SQL: Move partition nodes to core module,This is needed for further integration with thin clients which do not have dependency on {{indexing}} module.,iep-24,['sql'],IGNITE,Task,Major,2019-01-29 08:25:39,4
13212427,Binary: rework thread-local binary context to avoid set() operation,"Currently we call {{ThreadLocal.set()}} on every serialization/deserialization (see {{GridBinaryMarshaller#BINARY_CTX}} usages). This may lead to high CPU usage, especially during SQL query execution. 
Let's refactor access patterns to work only with {{ThreadLocal.get()}} operation.",performance,['binary'],IGNITE,Task,Major,2019-01-29 07:51:51,4
13211231,CPP Thin: Improve Best Effort Affinity for C++ thin client,"[IEP-23|https://cwiki.apache.org/confluence/display/IGNITE/IEP-23%3A+Best+Effort+Affinity+for+thin+clients]  was updated recently, and we need to implement described changes in C++ thin client.",iep-23,['thin client'],IGNITE,Improvement,Major,2019-01-23 09:40:24,3
13210750,Enable problematic whitespace inspection check,"We need to enable inspection {{General | Problematic whitespace}} to report tabs used for indentation when the code style is configured to use only spaces.

Todo:
# Update the appropriate  {{ignite_inspections_teamcity.xml}} configuration file
# Fix all founded code style issues according to the new inspecton rule
# Update the default inspection profile: {{.idea\inspectionProfiles\Project_Default.xml}}

Probable, this line should be added to the configuration file:
{code}
  <inspection_tool class=""ProblematicWhitespace"" enabled=""true"" level=""ERROR"" enabled_by_default=""true"" />
{code}",inspections,[],IGNITE,Task,Minor,2019-01-21 12:06:15,2
13210396,SQL: Do not deserialize GridCacheVersion when possible,"Although we removed _VER support, real {{GridCacheVersion}} is still deserialized when we convert link to {{CacheDataRowAdapter}}. Let's avoid that when possible.",performance,['sql'],IGNITE,Task,Major,2019-01-18 14:44:32,4
13210382,CPP: Heap corruption when running C++ tests in Debug mode,"Currently, heap corruption is detected, when any C++ test is run in Debug mode. Need to find out the root cause and fix the issue.",cpp,['platforms'],IGNITE,Bug,Major,2019-01-18 13:27:27,3
13206023,Create Ignite.NET Dockerfile,"Make it possible to run Ignite.NET in Docker with a single command.
It is possible for Java-only nodes (see docker\apache-ignite\Dockerfile).

The following Gist has a POC: https://gist.github.com/ptupitsyn/1cbbdaef1fef7cc4be22addda19cade4

Global Tool deployment can help here: IGNITE-10702",.NET,['platforms'],IGNITE,Improvement,Major,2018-12-21 17:31:57,0
13206012,MVCC: RemoveAll is broken on unstable topology,"Enlist batch holds key and values in arrays structures. This implies that keys and vals arrays sizes should be equals.
Also, we have an optimization and do not save 'null' vals for 'remove' operation.

This invariant can become broken on removeAll operation for 2 entries belonging to partitions in different states (moving and owning). For the first one, it's 'mvcc history' will be added to 'vals' array, but nothing will be added for the second one.

Reproducer IgniteCacheEntryProcessorNodeJoinTest.testEntryProcessorNodeLeave

See stacktrace:
{noformat}
java.lang.AssertionError: 
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxAbstractEnlistFuture$Batch.add(GridDhtTxAbstractEnlistFuture.java:1156)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxAbstractEnlistFuture.addToBatch(GridDhtTxAbstractEnlistFuture.java:705)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxAbstractEnlistFuture.processEntry(GridDhtTxAbstractEnlistFuture.java:650)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxAbstractEnlistFuture.continueLoop(GridDhtTxAbstractEnlistFuture.java:533)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxAbstractEnlistFuture.init(GridDhtTxAbstractEnlistFuture.java:362)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxEnlistFuture.enlistLocal(GridNearTxEnlistFuture.java:531)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxEnlistFuture.sendBatch(GridNearTxEnlistFuture.java:426)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxEnlistFuture.sendNextBatches(GridNearTxEnlistFuture.java:173)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxEnlistFuture.map(GridNearTxEnlistFuture.java:149)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxAbstractEnlistFuture.mapOnTopology(GridNearTxAbstractEnlistFuture.java:342)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxAbstractEnlistFuture.init(GridNearTxAbstractEnlistFuture.java:257)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxLocal.updateAsync(GridNearTxLocal.java:2074)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxLocal.mvccRemoveAllAsync0(GridNearTxLocal.java:1951)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxLocal.removeAllAsync0(GridNearTxLocal.java:1670)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxLocal.removeAllAsync(GridNearTxLocal.java:550)
{noformat}",Hanging transaction,['mvcc'],IGNITE,Bug,Critical,2018-12-21 16:30:06,1
13205968,MVCC: Get operation may hang in some cases,"Get operation may hang on snapshot acquisition in some cases. Reproducer: {{IgniteClusterActivateDeactivateTestWithPersistenceAndMemoryReuse.testDeactivateDuringEvictionAndRebalance}}

StackTrace:
{noformat}
Thread [name=""test-runner-#4675%cache.IgniteClusterActivateDeactivateTestWithPersistenceAndMemoryReuse%"", id=5136, state=WAITING, blockCnt=42, waitCnt=382996]
        at sun.misc.Unsafe.park(Native Method)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)
        at o.a.i.i.util.future.GridFutureAdapter.get0(GridFutureAdapter.java:178)
        at o.a.i.i.util.future.GridFutureAdapter.get(GridFutureAdapter.java:141)
        at o.a.i.i.processors.cache.mvcc.MvccUtils.mvccTracker(MvccUtils.java:817)
        at o.a.i.i.processors.cache.distributed.dht.colocated.GridDhtColocatedCache.getAsync(GridDhtColocatedCache.java:244)
        at o.a.i.i.processors.cache.GridCacheAdapter.get0(GridCacheAdapter.java:4725)
        at o.a.i.i.processors.cache.GridCacheAdapter.get(GridCacheAdapter.java:4706)
        at o.a.i.i.processors.cache.GridCacheAdapter.get(GridCacheAdapter.java:1450)
        at o.a.i.i.processors.cache.IgniteCacheProxyImpl.get(IgniteCacheProxyImpl.java:927)
        at o.a.i.i.processors.cache.GatewayProtectedCacheProxy.get(GatewayProtectedCacheProxy.java:640)
        at o.a.i.i.processors.cache.IgniteClusterActivateDeactivateTestWithPersistence.testDeactivateDuringEvictionAndRebalance(IgniteClusterActivateDeactivateTestWithPersistence.java:415)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
        at o.a.i.testframework.junits.GridAbstractTest$7.run(GridAbstractTest.java:2115)
        at java.lang.Thread.run(Thread.java:748)
{noformat}",Hanging,['mvcc'],IGNITE,Bug,Major,2018-12-21 13:50:32,1
13205956,MVCC: Flaky test IgniteClusterActivateDeactivateTestWithPersistence#testDeactivateDuringEvictionAndRebalance,"Test {{IgniteClusterActivateDeactivateTestWithPersistence#testDeactivateDuringEvictionAndRebalance}} is flaky when MVCC is enabled. We should investigate it.


{noformat}
[2018-12-21 02:26:51,592][ERROR][main][root] Test failed.
java.lang.AssertionError: node=cache.IgniteClusterActivateDeactivateTestWithPersistence0, key=100002
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at org.junit.Assert.assertNotNull(Assert.java:621)
	at org.apache.ignite.internal.processors.cache.IgniteClusterActivateDeactivateTestWithPersistence.testDeactivateDuringEvictionAndRebalance(IgniteClusterActivateDeactivateTestWithPersistence.java:425)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.apache.ignite.testframework.junits.GridAbstractTest$7.run(GridAbstractTest.java:2115)
	at java.lang.Thread.run(Thread.java:748)
{noformat}
",failover,['mvcc'],IGNITE,Bug,Major,2018-12-21 12:32:20,1
13205694,MVCC: Unexpected tx state exception in multithreaded tests," There is a number of tests in MVCC suite sporadically fail with the similar {{IgniteTxMvccVersionCheckedException}}. This problem occurs both on stable and unstable topologies.

These tests were muted on TC:
 * {{CacheMvccPartitionedCoordinatorFailoverTest}}
 ** {{testUpdate_N_Objects_ClientServer_Backups1__PutGet_CoordinatorFails}}
 ** {{testAccountsTxScan_ClientServer_Backups2_CoordinatorFails}}

 * {{CacheMvccReplicatedCoordinatorFailoverTest}}
 ** {{testUpdate_N_Objects_Servers_Backups0__PutGet_CoordinatorFails_Persistence}}
 ** {{testAccountsTxScan_Server_Backups0_CoordinatorFails}}

 * {{CacheMvccTransactionsTest}}
 ** {{testUpdate_N_Objects_ClientServer_Backups2_Get}}

* {{IgniteCacheGroupsTest.testScanQueryMvccTxReplicated}}
* {{CacheMvccReplicatedSqlCoordinatorFailoverTest.testAccountsTxSql_Server_Backups0_CoordinatorFails}}
* {{CacheMvccPartitionedSqlCoordinatorFailoverTest}} 
** {{testAccountsTxSql_ClientServer_Backups2_CoordinatorFails}}
 
{noformat}
junit.framework.AssertionFailedError: Unexpected error: junit.framework.AssertionFailedError: Unexpected tx exception. javax.cache.CacheException: class org.apache.ignite.IgniteCheckedException: Failed to update backup node: [localNodeId=fd28ba5c-6216-4aaa-a496-ba24cee00001, remoteNodeId=4198d600-48ee-4627-9802-0d1573800000]
 at org.apache.ignite.internal.processors.cache.GridCacheUtils.convertToCacheException(GridCacheUtils.java:1337)
 at org.apache.ignite.internal.processors.cache.IgniteCacheProxyImpl.cacheException(IgniteCacheProxyImpl.java:1756)
 at org.apache.ignite.internal.processors.cache.IgniteCacheProxyImpl.putAll(IgniteCacheProxyImpl.java:1171)
 at org.apache.ignite.internal.processors.cache.GatewayProtectedCacheProxy.putAll(GatewayProtectedCacheProxy.java:868)
 at org.apache.ignite.internal.processors.cache.mvcc.CacheMvccAbstractTest.writeAllByMode(CacheMvccAbstractTest.java:2021)
 at org.apache.ignite.internal.processors.cache.mvcc.CacheMvccAbstractTest$7.apply(CacheMvccAbstractTest.java:1143)
 at org.apache.ignite.internal.processors.cache.mvcc.CacheMvccAbstractTest$7.apply(CacheMvccAbstractTest.java:1116)
 at org.apache.ignite.internal.processors.cache.mvcc.CacheMvccAbstractTest$9.call(CacheMvccAbstractTest.java:1328)
 at org.apache.ignite.internal.processors.cache.mvcc.CacheMvccAbstractTest$9.call(CacheMvccAbstractTest.java:1323)
 at org.apache.ignite.testframework.GridTestThread.run(GridTestThread.java:84)
Caused by: class org.apache.ignite.IgniteCheckedException: Failed to update backup node: [localNodeId=fd28ba5c-6216-4aaa-a496-ba24cee00001, remoteNodeId=4198d600-48ee-4627-9802-0d1573800000]
 at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxAbstractEnlistFuture.onResult(GridDhtTxAbstractEnlistFuture.java:1012)
 at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter.processDhtTxQueryEnlistResponse(GridDhtTransactionalCacheAdapter.java:2342)
 at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter.access$1200(GridDhtTransactionalCacheAdapter.java:112)
 at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter$18.apply(GridDhtTransactionalCacheAdapter.java:257)
 at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter$18.apply(GridDhtTransactionalCacheAdapter.java:255)
 at org.apache.ignite.internal.processors.cache.GridCacheIoManager.processMessage(GridCacheIoManager.java:1127)
 at org.apache.ignite.internal.processors.cache.GridCacheIoManager.onMessage0(GridCacheIoManager.java:592)
 at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:391)
 at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:317)
 at org.apache.ignite.internal.processors.cache.GridCacheIoManager.access$100(GridCacheIoManager.java:108)
 at org.apache.ignite.internal.processors.cache.GridCacheIoManager$1.onMessage(GridCacheIoManager.java:307)
 at org.apache.ignite.internal.managers.communication.GridIoManager.invokeListener(GridIoManager.java:1568)
 at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:1196)
 at org.apache.ignite.internal.managers.communication.GridIoManager.access$4200(GridIoManager.java:127)
 at org.apache.ignite.internal.managers.communication.GridIoManager$9.run(GridIoManager.java:1092)
 at org.apache.ignite.internal.util.StripedExecutor$Stripe.body(StripedExecutor.java:505)
 at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120)
 at java.lang.Thread.run(Thread.java:748)
Caused by: class org.apache.ignite.IgniteCheckedException: Runtime failure on bounds: [lower=MvccMaxSearchRow [], upper=MvccMinSearchRow []]
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.visit(BPlusTree.java:1070)
 at org.apache.ignite.internal.processors.cache.IgniteCacheOffheapManagerImpl$CacheDataStoreImpl.mvccUpdate(IgniteCacheOffheapManagerImpl.java:1966)
 at org.apache.ignite.internal.processors.cache.IgniteCacheOffheapManagerImpl.mvccUpdate(IgniteCacheOffheapManagerImpl.java:544)
 at org.apache.ignite.internal.processors.cache.GridCacheMapEntry.mvccSet(GridCacheMapEntry.java:1142)
 at org.apache.ignite.internal.processors.cache.transactions.IgniteTxHandler.mvccEnlistBatch(IgniteTxHandler.java:1948)
 at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter.processDhtTxQueryEnlistRequest(GridDhtTransactionalCacheAdapter.java:2291)
 at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter.access$1100(GridDhtTransactionalCacheAdapter.java:112)
 at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter$17.apply(GridDhtTransactionalCacheAdapter.java:250)
 at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter$17.apply(GridDhtTransactionalCacheAdapter.java:248)
 ... 13 more
Caused by: class org.apache.ignite.internal.transactions.IgniteTxMvccVersionCheckedException: Unexpected state: [state=0, rowVer=1545032895009:306:1, txVer=1545032895009:310:1, localNodeId=4198d600-48ee-4627-9802-0d1573800000]
 at org.apache.ignite.internal.processors.cache.mvcc.MvccUtils.unexpectedStateException(MvccUtils.java:317)
 at org.apache.ignite.internal.processors.cache.mvcc.MvccUtils.unexpectedStateException(MvccUtils.java:304)
 at org.apache.ignite.internal.processors.cache.tree.mvcc.data.MvccUpdateDataRow.visit(MvccUpdateDataRow.java:416)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$TreeVisitor.visit(BPlusTree.java:3066)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$TreeVisitor.init(BPlusTree.java:3035)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$TreeVisitor.notFound(BPlusTree.java:2991)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$Search.run0(BPlusTree.java:308)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$GetPageHandler.run(BPlusTree.java:5659)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$Search.run(BPlusTree.java:273)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$GetPageHandler.run(BPlusTree.java:5644)
 at org.apache.ignite.internal.processors.cache.persistence.tree.util.PageHandler.readPage(PageHandler.java:168)
 at org.apache.ignite.internal.processors.cache.persistence.DataStructure.read(DataStructure.java:349)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.read(BPlusTree.java:5846)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.visitDown(BPlusTree.java:2630)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.doVisit(BPlusTree.java:2597)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.access$7900(BPlusTree.java:92)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$TreeVisitor.visit(BPlusTree.java:3193)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$TreeVisitor.access$4900(BPlusTree.java:2953)
 at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.visit(BPlusTree.java:1067)
 ... 21 more
{noformat}",MakeTeamcityGreenAgain failover,['mvcc'],IGNITE,Bug,Major,2018-12-20 11:25:36,1
13204482,MVCC: Test GridCacheDhtPreloadDelayedSelfTest fails in mvcc mode.,"Next Mvcc Cache 2 suite tests fails on TC with mvcc mode on:

GridCacheDhtPreloadDelayedSelfTest.testAutomaticPreload
 GridCacheDhtPreloadDelayedSelfTest.testAutomaticPreloadWithEmptyCache
 GridCacheDhtPreloadDelayedSelfTest.testDelayedPreload   

 

The main issue here GridCommonAbstractTest.dht() method expects nearCache is configured.",MakeTeamcityGreenAgain,['mvcc'],IGNITE,Test,Major,2018-12-14 13:59:34,1
13203738,GridCacheContextInfo should not use isCacheContextInited() method to calculate constant properties,"This appears to be a regression from IGNITE-6173. Current method {{isCacheContextInited}} is used to determine several properties (config, name, customAffinityMapper, groupId, cacheId, affinityNode). This is wrong, as all of these properties are ""constant"" and can be deduced form configuration.

One specific case when it breaks Ignite is {{customAffinityMapper}}. It is used to determine affinity key field in {{GridH2Table}} which will be used later on for partition pruning. However, when table is created on a client node and context is not initialized yet, it will return ""false"", and incorrect affinity key will be calculated in {{QueryUtils.typeForQueryEntity}} and in {{GridH2Table}} later on. Finally, when query is executed, incorrect partition might be derived from it leading to incorrect query result.

Solution: make all mentioned methods independent of cache state.",iep-24,['sql'],IGNITE,Bug,Major,2018-12-11 14:37:28,4
13203097,MVCC: mvcc history can be missed during remove operation.,"IgniteAtomicLongChangingTopologySelfTest.testClientAtomicLongCreateCloseFailover fails on closing IgniteAtomicLong datastructure.

CacheLateAffinityAssignmentTest.testNoForceKeysRequests() failed with same error.

The root cause is DhtEnlist request for REMOVE operation with no history fails on MOVING partition.

 
{noformat}
[2018-12-07 20:05:14,674][ERROR][sys-stripe-6-#10748%dht.IgniteAtomicLongChangingTopologySelfTest3%][IgniteTestResources] Critical system error detected. Will be handled accordingly to configured handler [hnd=NoOpFailureHandler [super=AbstractFailureHandler [ignoredFailureTypes=SingletonSet [SYSTEM_WORKER_BLOCKED]]], failureCtx=FailureContext [type=CRITICAL_ERROR, err=java.lang.AssertionError]]
java.lang.AssertionError
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxAbstractEnlistFuture.addToBatch(GridDhtTxAbstractEnlistFuture.java:701)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxAbstractEnlistFuture.processEntry(GridDhtTxAbstractEnlistFuture.java:651)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxAbstractEnlistFuture.continueLoop(GridDhtTxAbstractEnlistFuture.java:534)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxAbstractEnlistFuture.init(GridDhtTxAbstractEnlistFuture.java:363)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter.processNearTxEnlistRequest(GridDhtTransactionalCacheAdapter.java:2065)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter.access$900(GridDhtTransactionalCacheAdapter.java:112)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter$14.apply(GridDhtTransactionalCacheAdapter.java:229)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter$14.apply(GridDhtTransactionalCacheAdapter.java:227)
{noformat}",failover,"['data structures', 'mvcc']",IGNITE,Bug,Major,2018-12-07 17:27:17,1
13203024,MVCC: Incorrect data region metrics.,"IgnitePdsDataRegionMetricsTest.testMemoryUsageSingleNode failed.
{noformat}
junit.framework.AssertionFailedError: Number of allocated pages is different than in metrics for [node=db.IgnitePdsDataRegionMetricsTest0, cache=default] expected:<13542> but was:<13881>
at junit.framework.Assert.fail(Assert.java:57)
at junit.framework.Assert.failNotEquals(Assert.java:329)
at junit.framework.Assert.assertEquals(Assert.java:78)
at junit.framework.Assert.assertEquals(Assert.java:159)
at junit.framework.TestCase.assertEquals(TestCase.java:316)
at org.apache.ignite.internal.processors.cache.persistence.db.IgnitePdsDataRegionMetricsTest.checkMetricsConsistency(IgnitePdsDataRegionMetricsTest.java:337)
at org.apache.ignite.internal.processors.cache.persistence.db.IgnitePdsDataRegionMetricsTest.testMemoryUsageSingleNode(IgnitePdsDataRegionMetricsTest.java:155){noformat}",metrics,"['mvcc', 'persistence']",IGNITE,Bug,Major,2018-12-07 12:18:36,1
13202902,MVCC: Wal delta record consistency test failed.,"Next PDS 1 suite tests are failed in Mvcc mode:

CpTriggeredWalDeltaConsistencyTest.testPutRemoveCacheDestroy  
 ExplicitWalDeltaConsistencyTest.testNotEmptyPds  
 ExplicitWalDeltaConsistencyTest.testPutRemoveAfterCheckpoint  
 SysPropWalDeltaConsistencyTest.testPutRemoveMultinode",WAL,"['mvcc', 'persistence']",IGNITE,Bug,Major,2018-12-06 20:21:56,1
13202882,MVCC: Assertion on txLog state update when recovering from WAL.,"Assertion in txLog state update occurs sporadically during recovery from WAL. Reproducer: {{IgnitePdsContinuousRestartTest#testRebalancingDuringLoad_10_10_1_1}} with enabled MVCC.
 Stacktrace:
{noformat}
class org.apache.ignite.internal.processors.cache.persistence.tree.CorruptedTreeException: Runtime failure on search row: TxKey [major=1544121790766, minor=10468]

	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.invoke(BPlusTree.java:1812)
	at org.apache.ignite.internal.processors.cache.mvcc.txlog.TxLog.put(TxLog.java:245)
	at org.apache.ignite.internal.processors.cache.mvcc.MvccProcessorImpl.updateState(MvccProcessorImpl.java:609)
	at org.apache.ignite.internal.processors.cache.persistence.GridCacheDatabaseSharedManager.applyLogicalUpdates(GridCacheDatabaseSharedManager.java:2456)
	at org.apache.ignite.internal.processors.cache.persistence.GridCacheDatabaseSharedManager.startMemoryRestore(GridCacheDatabaseSharedManager.java:1934)
	at org.apache.ignite.internal.IgniteKernal.start(IgniteKernal.java:1050)
	at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start0(IgnitionEx.java:2040)
	at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start(IgnitionEx.java:1732)
	at org.apache.ignite.internal.IgnitionEx.start0(IgnitionEx.java:1158)
	at org.apache.ignite.internal.IgnitionEx.start(IgnitionEx.java:656)
	at org.apache.ignite.testframework.junits.GridAbstractTest.startGrid(GridAbstractTest.java:961)
	at org.apache.ignite.testframework.junits.GridAbstractTest.startGrid(GridAbstractTest.java:902)
	at org.apache.ignite.testframework.junits.GridAbstractTest.startGrid(GridAbstractTest.java:890)
	at org.apache.ignite.testframework.junits.GridAbstractTest.startGrid(GridAbstractTest.java:856)
	at org.apache.ignite.internal.processors.cache.persistence.IgnitePdsContinuousRestartTest.checkRebalancingDuringLoad(IgnitePdsContinuousRestartTest.java:302)
	at org.apache.ignite.internal.processors.cache.persistence.IgnitePdsContinuousRestartTest.testRebalancingDuringLoad_10_10_1_1(IgnitePdsContinuousRestartTest.java:221)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at org.apache.ignite.testframework.junits.GridAbstractTest.access$001(GridAbstractTest.java:149)
	at org.apache.ignite.testframework.junits.GridAbstractTest$6.evaluate(GridAbstractTest.java:2106)
	at org.apache.ignite.testframework.junits.GridAbstractTest$7.run(GridAbstractTest.java:2123)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: Unexpected new transaction state. [currState=2, newState=3, cntr=10468]
	at org.apache.ignite.internal.processors.cache.mvcc.txlog.TxLog$TxLogUpdateClosure.invalid(TxLog.java:581)
	at org.apache.ignite.internal.processors.cache.mvcc.txlog.TxLog$TxLogUpdateClosure.checkAborted(TxLog.java:562)
	at org.apache.ignite.internal.processors.cache.mvcc.txlog.TxLog$TxLogUpdateClosure.call(TxLog.java:451)
	at org.apache.ignite.internal.processors.cache.mvcc.txlog.TxLog$TxLogUpdateClosure.call(TxLog.java:393)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$Invoke.invokeClosure(BPlusTree.java:3755)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$Invoke.access$5900(BPlusTree.java:3649)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.invokeDown(BPlusTree.java:1901)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.invoke(BPlusTree.java:1779)
	... 24 more


{noformat}",WAL mvcc_stability,['mvcc'],IGNITE,Bug,Major,2018-12-06 18:51:10,1
13202863,MVCC: Error on txLog initialization.,"A sporadic error occurs during {{txLog}} initialization. Reproducer: {{IgnitePdsCacheAssignmentNodeRestartsTest#testAssignmentAfterRestarts}}. This error may be the result of the test settings. We need to check it more carefully.

Stacktrace:
{noformat}
javax.cache.CacheException: class org.apache.ignite.IgniteCheckedException: Failed to complete exchange process.

	at org.apache.ignite.internal.processors.cache.GridCacheUtils.convertToCacheException(GridCacheUtils.java:1337)
	at org.apache.ignite.internal.IgniteKernal.getOrCreateCaches(IgniteKernal.java:3068)
	at org.apache.ignite.internal.processors.cache.persistence.IgnitePdsCacheAssignmentNodeRestartsTest.testAssignmentAfterRestarts(IgnitePdsCacheAssignmentNodeRestartsTest.java:148)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at org.apache.ignite.testframework.junits.GridAbstractTest.access$001(GridAbstractTest.java:149)
	at org.apache.ignite.testframework.junits.GridAbstractTest$6.evaluate(GridAbstractTest.java:2106)
	at org.apache.ignite.testframework.junits.GridAbstractTest$7.run(GridAbstractTest.java:2123)
	at java.lang.Thread.run(Thread.java:748)
Caused by: class org.apache.ignite.IgniteCheckedException: Failed to complete exchange process.
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.createExchangeException(GridDhtPartitionsExchangeFuture.java:3041)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.sendExchangeFailureMessage(GridDhtPartitionsExchangeFuture.java:3069)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.finishExchangeOnCoordinator(GridDhtPartitionsExchangeFuture.java:3151)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.onAllReceived(GridDhtPartitionsExchangeFuture.java:3135)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.processSingleMessage(GridDhtPartitionsExchangeFuture.java:2748)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.access$100(GridDhtPartitionsExchangeFuture.java:138)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture$2.apply(GridDhtPartitionsExchangeFuture.java:2556)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture$2.apply(GridDhtPartitionsExchangeFuture.java:2544)
	at org.apache.ignite.internal.util.future.GridFutureAdapter.notifyListener(GridFutureAdapter.java:395)
	at org.apache.ignite.internal.util.future.GridFutureAdapter.listen(GridFutureAdapter.java:355)
	at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.onReceiveSingleMessage(GridDhtPartitionsExchangeFuture.java:2544)
	at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager.processSinglePartitionUpdate(GridCachePartitionExchangeManager.java:1807)
	at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager.access$1200(GridCachePartitionExchangeManager.java:145)
	at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$2.onMessage(GridCachePartitionExchangeManager.java:382)
	at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$2.onMessage(GridCachePartitionExchangeManager.java:340)
	at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$MessageHandler.apply(GridCachePartitionExchangeManager.java:3294)
	at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$MessageHandler.apply(GridCachePartitionExchangeManager.java:3273)
	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.processMessage(GridCacheIoManager.java:1059)
	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.onMessage0(GridCacheIoManager.java:584)
	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:383)
	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:309)
	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.access$100(GridCacheIoManager.java:100)
	at org.apache.ignite.internal.processors.cache.GridCacheIoManager$1.onMessage(GridCacheIoManager.java:299)
	at org.apache.ignite.internal.managers.communication.GridIoManager.invokeListener(GridIoManager.java:1568)
	at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:1196)
	at org.apache.ignite.internal.managers.communication.GridIoManager.access$4200(GridIoManager.java:127)
	at org.apache.ignite.internal.managers.communication.GridIoManager$9.run(GridIoManager.java:1092)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	... 1 more
	Suppressed: class org.apache.ignite.IgniteCheckedException: Failed to initialize exchange locally [locNodeId=73aa6171-b23f-45bb-aad5-68f1d2600003]
		at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.onCacheChangeRequest(GridDhtPartitionsExchangeFuture.java:1196)
		at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.init(GridDhtPartitionsExchangeFuture.java:737)
		at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body0(GridCachePartitionExchangeManager.java:2864)
		at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body(GridCachePartitionExchangeManager.java:2721)
		at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120)
		... 1 more
	Caused by: java.lang.IllegalStateException: Failed to get page IO instance (page content is corrupted)
		at org.apache.ignite.internal.processors.cache.persistence.tree.io.IOVersions.forVersion(IOVersions.java:85)
		at org.apache.ignite.internal.processors.cache.persistence.tree.io.IOVersions.forPage(IOVersions.java:97)
		at org.apache.ignite.internal.processors.cache.persistence.freelist.PagesList.init(PagesList.java:177)
		at org.apache.ignite.internal.processors.cache.persistence.tree.reuse.ReuseListImpl.<init>(ReuseListImpl.java:56)
		at org.apache.ignite.internal.processors.cache.mvcc.txlog.TxLog.init(TxLog.java:161)
		at org.apache.ignite.internal.processors.cache.mvcc.txlog.TxLog.<init>(TxLog.java:87)
		at org.apache.ignite.internal.processors.cache.mvcc.MvccProcessorImpl.ensureStarted(MvccProcessorImpl.java:315)
		at org.apache.ignite.internal.processors.cache.GridCacheProcessor.createCacheContext(GridCacheProcessor.java:1520)
		at org.apache.ignite.internal.processors.cache.GridCacheProcessor.prepareCacheContext(GridCacheProcessor.java:2286)
		at org.apache.ignite.internal.processors.cache.GridCacheProcessor.lambda$null$fd62dedb$1(GridCacheProcessor.java:2129)
		at org.apache.ignite.internal.processors.cache.GridCacheProcessor.lambda$prepareStartCachesIfPossible$6(GridCacheProcessor.java:2067)
		at org.apache.ignite.internal.processors.cache.GridCacheProcessor.lambda$prepareStartCaches$937cbe24$1(GridCacheProcessor.java:2126)
		at org.apache.ignite.internal.util.IgniteUtils.lambda$null$1(IgniteUtils.java:10678)
		at java.util.concurrent.FutureTask.run(FutureTask.java:266)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
		... 1 more
		Suppressed: java.lang.IllegalStateException: Failed to get page IO instance (page content is corrupted)
			at org.apache.ignite.internal.processors.cache.persistence.tree.io.IOVersions.forVersion(IOVersions.java:85)
			at org.apache.ignite.internal.processors.cache.persistence.tree.io.IOVersions.forPage(IOVersions.java:97)
			at org.apache.ignite.internal.processors.cache.persistence.freelist.PagesList.init(PagesList.java:177)
			at org.apache.ignite.internal.processors.cache.persistence.tree.reuse.ReuseListImpl.<init>(ReuseListImpl.java:56)
			at org.apache.ignite.internal.processors.cache.mvcc.txlog.TxLog.init(TxLog.java:161)
			at org.apache.ignite.internal.processors.cache.mvcc.txlog.TxLog.<init>(TxLog.java:87)
			at org.apache.ignite.internal.processors.cache.mvcc.MvccProcessorImpl.ensureStarted(MvccProcessorImpl.java:315)
			at org.apache.ignite.internal.processors.cache.GridCacheProcessor.createCacheContext(GridCacheProcessor.java:1520)
			at org.apache.ignite.internal.processors.cache.GridCacheProcessor.prepareCacheContext(GridCacheProcessor.java:2286)
			at org.apache.ignite.internal.processors.cache.GridCacheProcessor.lambda$null$fd62dedb$1(GridCacheProcessor.java:2129)
			at org.apache.ignite.internal.processors.cache.GridCacheProcessor.lambda$prepareStartCachesIfPossible$6(GridCacheProcessor.java:2067)
			at org.apache.ignite.internal.processors.cache.GridCacheProcessor.lambda$prepareStartCaches$937cbe24$1(GridCacheProcessor.java:2126)
			at org.apache.ignite.internal.util.IgniteUtils.doInParallel(IgniteUtils.java:10697)
			at org.apache.ignite.internal.processors.cache.GridCacheProcessor.prepareStartCaches(GridCacheProcessor.java:2121)
			at org.apache.ignite.internal.processors.cache.GridCacheProcessor.prepareStartCachesIfPossible(GridCacheProcessor.java:2065)
			at org.apache.ignite.internal.processors.cache.CacheAffinitySharedManager.processCacheStartRequests(CacheAffinitySharedManager.java:929)
			at org.apache.ignite.internal.processors.cache.CacheAffinitySharedManager.onCacheChangeRequest(CacheAffinitySharedManager.java:813)
			at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.onCacheChangeRequest(GridDhtPartitionsExchangeFuture.java:1185)
			at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.init(GridDhtPartitionsExchangeFuture.java:737)
			at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body0(GridCachePartitionExchangeManager.java:2864)
			at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body(GridCachePartitionExchangeManager.java:2721)
			at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120)
			... 1 more
		Suppressed: java.lang.IllegalStateException: Failed to get page IO instance (page content is corrupted)
			... 17 more

{noformat}",Muted_test pagememory,['mvcc'],IGNITE,Bug,Major,2018-12-06 17:24:37,1
13202613,MVCC: Fix MVCC cache rebalance.,"Unexpected transaction state may be observed on some nodes after rebalance. Reproducer: {{GridCacheRebalancingSyncSelfTest#testComplexRebalancing}}

Stacktrace:
{noformat}
javax.cache.CacheException: class org.apache.ignite.IgniteCheckedException: Runtime failure on bounds: [lower=MvccSnapshotSearchRow [res=null, snapshot=MvccSnapshotResponse [futId=149236, crdVer=1544033736224, cntr=800063, opCntr=1073741823, txs=null, cleanupVer=0, tracking=0]], upper=MvccMinSearchRow []]

	at org.apache.ignite.internal.processors.cache.GridCacheUtils.convertToCacheException(GridCacheUtils.java:1337)
	at org.apache.ignite.internal.processors.cache.IgniteCacheProxyImpl.cacheException(IgniteCacheProxyImpl.java:1756)
	at org.apache.ignite.internal.processors.cache.IgniteCacheProxyImpl.get(IgniteCacheProxyImpl.java:931)
	at org.apache.ignite.internal.processors.cache.GatewayProtectedCacheProxy.get(GatewayProtectedCacheProxy.java:640)
	at org.apache.ignite.internal.processors.cache.distributed.rebalancing.GridCacheRebalancingSyncSelfTest.checkData(GridCacheRebalancingSyncSelfTest.java:251)
	at org.apache.ignite.internal.processors.cache.distributed.rebalancing.GridCacheRebalancingSyncSelfTest.checkData(GridCacheRebalancingSyncSelfTest.java:213)
	at org.apache.ignite.internal.processors.cache.distributed.rebalancing.GridCacheRebalancingSyncSelfTest.testComplexRebalancing(GridCacheRebalancingSyncSelfTest.java:588)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at org.apache.ignite.testframework.junits.GridAbstractTest.access$001(GridAbstractTest.java:149)
	at org.apache.ignite.testframework.junits.GridAbstractTest$6.evaluate(GridAbstractTest.java:2106)
	at org.apache.ignite.testframework.junits.GridAbstractTest$7.run(GridAbstractTest.java:2123)
	at java.lang.Thread.run(Thread.java:748)
Caused by: class org.apache.ignite.IgniteCheckedException: Runtime failure on bounds: [lower=MvccSnapshotSearchRow [res=null, snapshot=MvccSnapshotResponse [futId=149236, crdVer=1544033736224, cntr=800063, opCntr=1073741823, txs=null, cleanupVer=0, tracking=0]], upper=MvccMinSearchRow []]
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.iterate(BPlusTree.java:1035)
	at org.apache.ignite.internal.processors.cache.IgniteCacheOffheapManagerImpl$CacheDataStoreImpl.mvccFind(IgniteCacheOffheapManagerImpl.java:2849)
	at org.apache.ignite.internal.processors.cache.IgniteCacheOffheapManagerImpl.mvccRead(IgniteCacheOffheapManagerImpl.java:695)
	at org.apache.ignite.internal.processors.cache.GridCacheAdapter.getAllAsync0(GridCacheAdapter.java:2024)
	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtCacheAdapter.getDhtAllAsync(GridDhtCacheAdapter.java:807)
	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtGetSingleFuture.getAsync(GridDhtGetSingleFuture.java:399)
	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtGetSingleFuture.map0(GridDhtGetSingleFuture.java:277)
	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtGetSingleFuture.map(GridDhtGetSingleFuture.java:259)
	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtGetSingleFuture.init(GridDhtGetSingleFuture.java:182)
	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtCacheAdapter.getDhtSingleAsync(GridDhtCacheAdapter.java:918)
	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtCacheAdapter.processNearSingleGetRequest(GridDhtCacheAdapter.java:933)
	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter$2.apply(GridDhtTransactionalCacheAdapter.java:152)
	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTransactionalCacheAdapter$2.apply(GridDhtTransactionalCacheAdapter.java:150)
	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.processMessage(GridCacheIoManager.java:1059)
	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.onMessage0(GridCacheIoManager.java:584)
	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:383)
	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:309)
	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.access$100(GridCacheIoManager.java:100)
	at org.apache.ignite.internal.processors.cache.GridCacheIoManager$1.onMessage(GridCacheIoManager.java:299)
	at org.apache.ignite.internal.managers.communication.GridIoManager.invokeListener(GridIoManager.java:1568)
	at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:1196)
	at org.apache.ignite.internal.managers.communication.GridIoManager.access$4200(GridIoManager.java:127)
	at org.apache.ignite.internal.managers.communication.GridIoManager$9.run(GridIoManager.java:1092)
	at org.apache.ignite.internal.util.StripedExecutor$Stripe.body(StripedExecutor.java:505)
	at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120)
	... 1 more
Caused by: class org.apache.ignite.internal.transactions.IgniteTxMvccVersionCheckedException: Unexpected state: [state=0, rowVer=1544033736224:446552:1, txVer=1544033736224:800063:1073741823, localNodeId=e60be4d5-b1d7-4c09-8b88-9b8964400002]
	at org.apache.ignite.internal.processors.cache.mvcc.MvccUtils.unexpectedStateException(MvccUtils.java:317)
	at org.apache.ignite.internal.processors.cache.mvcc.MvccUtils.unexpectedStateException(MvccUtils.java:304)
	at org.apache.ignite.internal.processors.cache.mvcc.MvccUtils.isVisible(MvccUtils.java:271)
	at org.apache.ignite.internal.processors.cache.mvcc.MvccUtils.isVisible(MvccUtils.java:210)
	at org.apache.ignite.internal.processors.cache.mvcc.MvccUtils$GetVisibleState.apply(MvccUtils.java:906)
	at org.apache.ignite.internal.processors.cache.mvcc.MvccUtils$GetVisibleState.apply(MvccUtils.java:890)
	at org.apache.ignite.internal.processors.cache.mvcc.MvccUtils.invoke(MvccUtils.java:618)
	at org.apache.ignite.internal.processors.cache.mvcc.MvccUtils.getVisibleState(MvccUtils.java:362)
	at org.apache.ignite.internal.processors.cache.tree.mvcc.search.MvccSnapshotSearchRow.apply(MvccSnapshotSearchRow.java:88)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$ClosureCursor.fillFromBuffer0(BPlusTree.java:5446)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$AbstractForwardCursor.fillFromBuffer(BPlusTree.java:5316)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$AbstractForwardCursor.init(BPlusTree.java:5241)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$GetCursor.notFound(BPlusTree.java:2935)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$Search.run0(BPlusTree.java:306)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$GetPageHandler.run(BPlusTree.java:5651)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$Search.run(BPlusTree.java:271)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$GetPageHandler.run(BPlusTree.java:5636)
	at org.apache.ignite.internal.processors.cache.persistence.tree.util.PageHandler.readPage(PageHandler.java:159)
	at org.apache.ignite.internal.processors.cache.persistence.DataStructure.read(DataStructure.java:334)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.findDown(BPlusTree.java:1309)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.findDown(BPlusTree.java:1318)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.doFind(BPlusTree.java:1276)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.access$8700(BPlusTree.java:90)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$AbstractForwardCursor.find(BPlusTree.java:5325)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$ClosureCursor.iterate(BPlusTree.java:5475)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree$ClosureCursor.access$5000(BPlusTree.java:5401)
	at org.apache.ignite.internal.processors.cache.persistence.tree.BPlusTree.iterate(BPlusTree.java:1032)
	... 25 more
{noformat}
 ",mvcc_stability,['mvcc'],IGNITE,Bug,Critical,2018-12-05 18:27:30,1
13202584,MVCC: IgniteWalReader test failed.,"Wal iterator doesn't handle Mvcc wal records.
 This causes IgniteWalReader tests failures in Mvcc Pds2 suite.",WAL,"['mvcc', 'persistence']",IGNITE,Bug,Major,2018-12-05 16:28:12,1
13202566,.NET: Jars are not copied to target dir under .NET Core,"We use PowerShell script to update post-build event in the target project and copy jar files to target directory during build.

However, this no longer works with .NET Core.
nuspec file should be updated with new format, see example from https://github.com/NuGet/Samples/blob/master/ContentFilesExample/authoring/ContentFilesExample.nuspec:

{code}
<?xml version=""1.0""?>
<package>
  <metadata minClientVersion=""3.3.0"">
    <id>ContentFilesExample</id>
    <version>1.0.0</version>
    <authors>nuget</authors>
    <owners>nuget</owners>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>A content v2 example package.</description>
    <tags>contentv2 contentFiles</tags>
    <!-- Build actions for items in the contentFiles folder -->
    <contentFiles>
        <!-- Include Assets as Content -->
        <files include=""**/images/*.*"" buildAction=""Content"" />
        <files include=""**/data.txt"" buildAction=""Content"" />
        <!-- Copy tool scripts to the output folder -->
        <files include=""**/tools/*"" buildAction=""None"" flatten=""false"" copyToOutput=""true"" />
    </contentFiles>
  </metadata>
</package
{code}


*UPDATE: this breaks NuGet package usage completely under .NET Core 3.0*
[NuGet behavior has changed|https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0#build-copies-dependencies] in .NET Core 3.0:

??The dotnet build command now copies NuGet dependencies for your application from the NuGet cache to the build output folder??

In .NET Core 2.x dependencies are used directly from NuGet cache, so JAR files are resolved.
In 3.0 this does not work anymore, we should find a way to copy JAR files to the output folder.

Test cases:
* .NET 4.x
* .NET Core 2.x, 3.x Windows & Linux
* LINQPad
* Binary zip distribution (examples, .NET Core examples)",.NET,['platforms'],IGNITE,Bug,Critical,2018-12-05 15:22:26,0
13202208,MVCC: Update operation may hangs on backup on unstable topology. ,"Update operation may hangs on backup awaiting next topology.

Symptoms: 
 # Exchange for topology version 6.1 has been finished.
 # Exchange for topology version 6.2 awaits for partition release.
 # DhtTxRemote waits for exchange.

Seems, tx maps on outdated topology version.

Reproducer IgniteTxCachePrimarySyncTest.testSingleKeyCommit()  in Mvcc mode.",Hanging failover,['mvcc'],IGNITE,Bug,Critical,2018-12-04 09:07:28,1
13201780,.NET: Compiler warning when building examples,"When building examples from dotnetcore folder:

{{warning CS0618: 'CacheConfiguration.CacheConfiguration(string, params Type[])' is obsolete}}",.NET,['platforms'],IGNITE,Bug,Major,2018-12-01 06:44:24,0
13201190,.NET: Persistence does not work with custom affinity function,"To reproduce: assign custom affinity function in {{PersistenceTest.TestCacheDataSurvivesNodeRestart}}.

As a result, node restart fails with the following exception:
{code}
Apache.Ignite.Core.Common.IgniteException : An error occurred during cache configuration loading from file [file=C:\Users\tps0\AppData\Local\Temp\Ignite_ihxso0zq.tw0\Store\node00-263cfb5e-ec70-4378-8cbb-62b6fcc8043b\cache-persistentCache\cache_data.dat]
  ----> Apache.Ignite.Core.Common.JavaException : class org.apache.ignite.IgniteException: An error occurred during cache configuration loading from file [file=C:\Users\tps0\AppData\Local\Temp\Ignite_ihxso0zq.tw0\Store\node00-263cfb5e-ec70-4378-8cbb-62b6fcc8043b\cache-persistentCache\cache_data.dat]
	at org.apache.ignite.internal.util.IgniteUtils.convertException(IgniteUtils.java:1027)
	at org.apache.ignite.internal.processors.platform.PlatformAbstractBootstrap.start(PlatformAbstractBootstrap.java:48)
	at org.apache.ignite.internal.processors.platform.PlatformIgnition.start(PlatformIgnition.java:74)
Caused by: class org.apache.ignite.IgniteCheckedException: An error occurred during cache configuration loading from file [file=C:\Users\tps0\AppData\Local\Temp\Ignite_ihxso0zq.tw0\Store\node00-263cfb5e-ec70-4378-8cbb-62b6fcc8043b\cache-persistentCache\cache_data.dat]
	at org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.readCacheData(FilePageStoreManager.java:902)
	at org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.readCacheConfigurations(FilePageStoreManager.java:844)
	at org.apache.ignite.internal.processors.cache.GridCacheProcessor.addCacheOnJoinFromConfig(GridCacheProcessor.java:891)
	at org.apache.ignite.internal.processors.cache.GridCacheProcessor.restoreCacheConfigurations(GridCacheProcessor.java:756)
	at org.apache.ignite.internal.processors.cache.GridCacheProcessor.access$1300(GridCacheProcessor.java:204)
	at org.apache.ignite.internal.processors.cache.GridCacheProcessor$CacheRecoveryLifecycle.onReadyForRead(GridCacheProcessor.java:5456)
	at org.apache.ignite.internal.processors.cache.persistence.GridCacheDatabaseSharedManager.notifyMetastorageReadyForRead(GridCacheDatabaseSharedManager.java:412)
	at org.apache.ignite.internal.processors.cache.persistence.GridCacheDatabaseSharedManager.readMetastore(GridCacheDatabaseSharedManager.java:724)
	at org.apache.ignite.internal.processors.cache.persistence.GridCacheDatabaseSharedManager.notifyMetaStorageSubscribersOnReadyForRead(GridCacheDatabaseSharedManager.java:4473)
	at org.apache.ignite.internal.IgniteKernal.start(IgniteKernal.java:1047)
	at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start0(IgnitionEx.java:2040)
	at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start(IgnitionEx.java:1732)
	at org.apache.ignite.internal.IgnitionEx.start0(IgnitionEx.java:1158)
	at org.apache.ignite.internal.IgnitionEx.start(IgnitionEx.java:656)
	at org.apache.ignite.internal.processors.platform.PlatformAbstractBootstrap.start(PlatformAbstractBootstrap.java:43)
	... 1 more
Caused by: class org.apache.ignite.IgniteCheckedException: Failed to deserialize object with given class loader: sun.misc.Launcher$AppClassLoader@18b4aac2
	at org.apache.ignite.marshaller.jdk.JdkMarshaller.unmarshal0(JdkMarshaller.java:147)
	at org.apache.ignite.marshaller.AbstractNodeNameAwareMarshaller.unmarshal(AbstractNodeNameAwareMarshaller.java:93)
	at org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.readCacheData(FilePageStoreManager.java:898)
	... 15 more
Caused by: java.lang.IllegalArgumentException: Ignite instance name thread local must be set or this method should be accessed under org.apache.ignite.thread.IgniteThread
	at org.apache.ignite.internal.IgnitionEx.localIgnite(IgnitionEx.java:1413)
	at org.apache.ignite.internal.binary.GridBinaryMarshaller.threadLocalContext(GridBinaryMarshaller.java:398)
	at org.apache.ignite.internal.binary.BinaryObjectImpl.readExternal(BinaryObjectImpl.java:695)
	at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:2116)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2065)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1571)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
	at org.apache.ignite.internal.processors.platform.cache.affinity.PlatformAffinityFunction.readExternal(PlatformAffinityFunction.java:257)
	at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:2116)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2065)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1571)
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2285)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2209)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2067)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1571)
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2285)
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2209)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2067)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1571)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
	at org.apache.ignite.marshaller.jdk.JdkMarshaller.unmarshal0(JdkMarshaller.java:139)
	... 17 more

   at Apache.Ignite.Core.Ignition.Start(IgniteConfiguration cfg) in C:\w\ignite\modules\platforms\dotnet\Apache.Ignite.Core\Ignition.cs:line 323
   at Apache.Ignite.Core.Tests.Cache.PersistenceTest.TestCacheDataSurvivesNodeRestart() in C:\w\ignite\modules\platforms\dotnet\Apache.Ignite.Core.Tests\Cache\PersistenceTest.cs:line 132
--JavaException
   at Apache.Ignite.Core.Impl.Unmanaged.Jni.Env.ExceptionCheck() in C:\w\ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Unmanaged\Jni\Env.cs:line 490
   at Apache.Ignite.Core.Impl.Unmanaged.Jni.Env.CallStaticVoidMethod(GlobalRef cls, IntPtr methodId, Int64* argsPtr) in C:\w\ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Unmanaged\Jni\Env.cs:line 169
   at Apache.Ignite.Core.Impl.Unmanaged.UnmanagedUtils.IgnitionStart(Env env, String cfgPath, String gridName, Boolean clientMode, Boolean userLogger, Int64 igniteId, Boolean redirectConsole) in C:\w\ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Unmanaged\UnmanagedUtils.cs:line 52
   at Apache.Ignite.Core.Ignition.Start(IgniteConfiguration cfg) in C:\w\ignite\modules\platforms\dotnet\Apache.Ignite.Core\Ignition.cs:line 271
{code}",.NET 2.7.6-rc0,['platforms'],IGNITE,Bug,Major,2018-11-28 20:46:58,0
13201031,Remove dead code from IGNITE-9988,Some dead code remained after IGNITE-9988 implementation. Need to remove it.,vulnerability,"['jdbc', 'security', 'thin client']",IGNITE,Task,Major,2018-11-28 08:22:19,4
13200837,MVCC: Assertion in checkpointer thread.,"Reproducers:
 * {{WalModeChangeAdvancedSelfTest#testJoin}} with enabled MVCC.
 * {{IgniteDynamicCacheStartFailWithPersistenceTest}}

{noformat}
[2018-11-27 14:56:47,548][ERROR][db-checkpoint-thread-#358%srv_3%][IgniteTestResources] Critical system error detected. Will be handled accordingly to configured handler [hnd=NoOpFailureHandler [super=AbstractFailureHandler [ignoredFailureTypes=SingletonSet [SYSTEM_WORKER_BLOCKED]]], failureCtx=FailureContext [type=CRITICAL_ERROR, err=class o.a.i.IgniteCheckedException: Compound exception for CountDownFuture.]]
class org.apache.ignite.IgniteCheckedException: Compound exception for CountDownFuture.
	at org.apache.ignite.internal.util.future.CountDownFuture.addError(CountDownFuture.java:72)
	at org.apache.ignite.internal.util.future.CountDownFuture.onDone(CountDownFuture.java:46)
	at org.apache.ignite.internal.util.future.CountDownFuture.onDone(CountDownFuture.java:28)
	at org.apache.ignite.internal.util.future.GridFutureAdapter.onDone(GridFutureAdapter.java:474)
	at org.apache.ignite.internal.processors.cache.persistence.GridCacheDatabaseSharedManager$WriteCheckpointPages.run(GridCacheDatabaseSharedManager.java:3957)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
	Suppressed: java.lang.AssertionError: off=0000000000003000, allocated=0000000000001000, pageId=0002ffff00000002, file=/home/gridgain/Documents/work/incubator-ignite/work/db/node02-20092321-f30d-498f-8609-21ff87e4d104/TxLog/index.bin
		at org.apache.ignite.internal.processors.cache.persistence.file.FilePageStore.write(FilePageStore.java:550)
		at org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.writeInternal(FilePageStoreManager.java:520)
		at org.apache.ignite.internal.processors.cache.persistence.GridCacheDatabaseSharedManager$WriteCheckpointPages.writePages(GridCacheDatabaseSharedManager.java:4022)
		at org.apache.ignite.internal.processors.cache.persistence.GridCacheDatabaseSharedManager$WriteCheckpointPages.run(GridCacheDatabaseSharedManager.java:3930)
		... 3 more
	Suppressed: java.lang.AssertionError: off=0000000000004000, allocated=0000000000001000, pageId=0002ffff00000003, file=/home/gridgain/Documents/work/incubator-ignite/work/db/node02-20092321-f30d-498f-8609-21ff87e4d104/TxLog/index.bin
		at org.apache.ignite.internal.processors.cache.persistence.file.FilePageStore.write(FilePageStore.java:550)
		at org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.writeInternal(FilePageStoreManager.java:520)
		at org.apache.ignite.internal.processors.cache.persistence.GridCacheDatabaseSharedManager$WriteCheckpointPages.writePages(GridCacheDatabaseSharedManager.java:4022)
		at org.apache.ignite.internal.processors.cache.persistence.GridCacheDatabaseSharedManager$WriteCheckpointPages.run(GridCacheDatabaseSharedManager.java:3930)
		... 3 more
	Suppressed: java.lang.AssertionError: off=0000000000002000, allocated=0000000000001000, pageId=0002ffff00000001, file=/home/gridgain/Documents/work/incubator-ignite/work/db/node02-20092321-f30d-498f-8609-21ff87e4d104/TxLog/index.bin
		at org.apache.ignite.internal.processors.cache.persistence.file.FilePageStore.write(FilePageStore.java:550)
		at org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.writeInternal(FilePageStoreManager.java:520)
		at org.apache.ignite.internal.processors.cache.persistence.GridCacheDatabaseSharedManager$WriteCheckpointPages.writePages(GridCacheDatabaseSharedManager.java:4022)
		at org.apache.ignite.internal.processors.cache.persistence.GridCacheDatabaseSharedManager$WriteCheckpointPages.run(GridCacheDatabaseSharedManager.java:3930)
		... 3 more

{noformat}",WAL,"['mvcc', 'persistence']",IGNITE,Bug,Critical,2018-11-27 12:21:27,1
13200796,MVCC: TxRollbackOnIncorrectParamsTest fails if Mvcc enabled.,"{noformat}
class org.apache.ignite.internal.processors.query.IgniteSQLException: Transaction is already completed.
at org.apache.ignite.internal.processors.cache.mvcc.MvccUtils.checkActive(MvccUtils.java:660)
at org.apache.ignite.internal.processors.cache.mvcc.MvccUtils.requestSnapshot(MvccUtils.java:816)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxLocal.mvccPutAllAsync0(GridNearTxLocal.java:740)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxLocal.putAsync0(GridNearTxLocal.java:580)
at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxLocal.putAsync(GridNearTxLocal.java:446)
at org.apache.ignite.internal.processors.cache.GridCacheAdapter$22.op(GridCacheAdapter.java:2504)
at org.apache.ignite.internal.processors.cache.GridCacheAdapter$22.op(GridCacheAdapter.java:2502)
at org.apache.ignite.internal.processors.cache.GridCacheAdapter.syncOp(GridCacheAdapter.java:4323)
at org.apache.ignite.internal.processors.cache.GridCacheAdapter.put0(GridCacheAdapter.java:2502)
at org.apache.ignite.internal.processors.cache.GridCacheAdapter.put(GridCacheAdapter.java:2483)
at org.apache.ignite.internal.processors.cache.GridCacheAdapter.put(GridCacheAdapter.java:2460)
at org.apache.ignite.internal.processors.cache.IgniteCacheProxyImpl.put(IgniteCacheProxyImpl.java:1105)
at org.apache.ignite.internal.processors.cache.GatewayProtectedCacheProxy.put(GatewayProtectedCacheProxy.java:820)
at org.apache.ignite.internal.processors.cache.transactions.TxRollbackOnIncorrectParamsTest.testLabelFilledLocalGuarantee(TxRollbackOnIncorrectParamsTest.java:122)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at junit.framework.TestCase.runTest(TestCase.java:176)
at org.apache.ignite.testframework.junits.GridAbstractTest.runTestInternal(GridAbstractTest.java:2166)
at org.apache.ignite.testframework.junits.GridAbstractTest.access$000(GridAbstractTest.java:144)
at org.apache.ignite.testframework.junits.GridAbstractTest$5.run(GridAbstractTest.java:2082)
at java.lang.Thread.run(Thread.java:748){noformat}",transactions,['mvcc'],IGNITE,Bug,Major,2018-11-27 08:41:16,1
13200550,.NET Failed to run ScanQuery with custom filter after server node restart,"Scenario:
1. Start server
2. Start client.
3. Restart server and wait for client reconnects the server.
4. Put some data to cache and run ScanQuery with custom filter
 
StackTrace:

{code:java}
class org.apache.ignite.IgniteCheckedException: Failed to inject resource [method=setIgniteInstance, target=org.apache.ignite.internal.processors.platform.cache.PlatformCacheEntryFilterImpl@6225c21c, rsrc=IgniteKernal [cfg=IgniteConfiguration [igniteInstanceName=CashflowCluster, pubPoolSize=8, svcPoolSize=8, callbackPoolSize=8, stripedPoolSize=8, sysPoolSize=8, mgmtPoolSize=4, igfsPoolSize=4, dataStreamerPoolSize=8,
 utilityCachePoolSize=8, utilityCacheKeepAliveTime=60000, p2pPoolSize=2, qryPoolSize=8, igniteHome=C:\Job\fd-tasks\7404\IgniteTests2\packages\Apache.Ignite.2.6.0, igniteWorkDir=C:\Job\fd-tasks\7404\IgniteTests2\packages\Apache.Ignite.2.6.0\work, mbeanSrv=com.sun.jmx.mbeanserver.JmxMBeanServer@49993335, nodeId=3f4aadd9-01b3-4ffe-b629-895fb6ac886f, marsh=org.apache.ignite.internal.binary.BinaryMarshaller@77a57272, mar
shLocJobs=false, daemon=false, p2pEnabled=false, netTimeout=5000, sndRetryDelay=1000, sndRetryCnt=3, metricsHistSize=10000, metricsUpdateFreq=2000, metricsExpTime=9223372036854775807, discoSpi=TcpDiscoverySpi [addrRslvr=null, sockTimeout=5000, ackTimeout=5000, marsh=JdkMarshaller [clsFilter=org.apache.ignite.marshaller.MarshallerUtils$1@65b1c1e3], reconCnt=10, reconDelay=2000, maxAckTimeout=600000, forceSrvMode=fals
e, clientReconnectDisabled=false, internalLsnr=null], segPlc=STOP, segResolveAttempts=2, waitForSegOnStart=true, allResolversPassReq=true, segChkFreq=10000, commSpi=TcpCommunicationSpi [connectGate=org.apache.ignite.spi.communication.tcp.TcpCommunicationSpi$ConnectGateway@4737110c, connPlc=org.apache.ignite.spi.communication.tcp.TcpCommunicationSpi$6@bce0ed4, enableForcibleNodeKill=false, enableTroubleshootingLog=fa
lse, srvLsnr=org.apache.ignite.spi.communication.tcp.TcpCommunicationSpi$2@11c20519, locAddr=null, locHost=0.0.0.0/0.0.0.0, locPort=47100, locPortRange=100, shmemPort=-1, directBuf=true, directSndBuf=false, idleConnTimeout=600000, connTimeout=5000, maxConnTimeout=600000, reconCnt=10, sockSndBuf=32768, sockRcvBuf=32768, msgQueueLimit=0, slowClientQueueLimit=0, nioSrvr=GridNioServer [selectorSpins=0, filterChain=Filte
rChain[filters=[GridNioCodecFilter [parser=org.apache.ignite.internal.util.nio.GridDirectParser@6839fd4e, directMode=true], GridConnectionBytesVerifyFilter], lsnr=org.apache.ignite.spi.communication.tcp.TcpCommunicationSpi$2@11c20519, closed=false, directBuf=true, tcpNoDelay=true, sockSndBuf=32768, sockRcvBuf=32768, writeTimeout=2000, idleTimeout=600000, skipWrite=false, skipRead=false, locAddr=0.0.0.0/0.0.0.0:47100
, order=LITTLE_ENDIAN, sndQueueLimit=0, directMode=true, metricsLsnr=org.apache.ignite.spi.communication.tcp.TcpCommunicationMetricsListener@4e41089d, sslFilter=null, msgQueueLsnr=null, readerMoveCnt=0, writerMoveCnt=0, readWriteSelectorsAssign=false], shmemSrv=null, usePairedConnections=false, connectionsPerNode=1, tcpNoDelay=true, filterReachableAddresses=false, ackSndThreshold=32, unackedMsgsBufSize=0, sockWriteT
imeout=2000, lsnr=org.apache.ignite.internal.managers.communication.GridIoManager$2@432d2e4e, boundTcpPort=47100, boundTcpShmemPort=-1, selectorsCnt=4, selectorSpins=0, addrRslvr=null, ctxInitLatch=java.util.concurrent.CountDownLatch@70beb599[Count = 0], stopping=false, metricsLsnr=org.apache.ignite.spi.communication.tcp.TcpCommunicationMetricsListener@4e41089d], evtSpi=org.apache.ignite.spi.eventstorage.NoopEventSt
orageSpi@32a068d1, colSpi=NoopCollisionSpi [], deploySpi=LocalDeploymentSpi [lsnr=org.apache.ignite.internal.managers.deployment.GridDeploymentLocalStore$LocalDeploymentListener@3c6df856], indexingSpi=org.apache.ignite.spi.indexing.noop.NoopIndexingSpi@282003e1, addrRslvr=null, clientMode=false, rebalanceThreadPoolSize=1, txCfg=org.apache.ignite.configuration.TransactionConfiguration@7fad8c79, cacheSanityCheckEnable
d=true, discoStartupDelay=60000, deployMode=SHARED, p2pMissedCacheSize=100, locHost=null, timeSrvPortBase=31100, timeSrvPortRange=100, failureDetectionTimeout=10000, clientFailureDetectionTimeout=30000, metricsLogFreq=60000, hadoopCfg=null, connectorCfg=org.apache.ignite.configuration.ConnectorConfiguration@71a794e5, odbcCfg=null, warmupClos=null, atomicCfg=AtomicConfiguration [seqReserveSize=1000, cacheMode=PARTITI
ONED, backups=1, aff=null, grpName=null], classLdr=null, sslCtxFactory=null, platformCfg=PlatformDotNetConfiguration [binaryCfg=null], binaryCfg=null, memCfg=null, pstCfg=null, dsCfg=DataStorageConfiguration [sysRegionInitSize=41943040, sysCacheMaxSize=104857600, pageSize=4096, concLvl=0, dfltDataRegConf=DataRegionConfiguration [name=default, maxSize=3405547110, initSize=268435456, swapPath=null, pageEvictionMode=DI
SABLED, evictionThreshold=0.9, emptyPagesPoolSize=100, metricsEnabled=false, metricsSubIntervalCount=5, metricsRateTimeInterval=60000, persistenceEnabled=false, checkpointPageBufSize=0], storagePath=null, checkpointFreq=180000, lockWaitTime=10000, checkpointThreads=4, checkpointWriteOrder=SEQUENTIAL, walHistSize=20, walSegments=10, walSegmentSize=67108864, walPath=db/wal, walArchivePath=db/wal/archive, metricsEnable
d=false, walMode=LOG_ONLY, walTlbSize=131072, walBuffSize=0, walFlushFreq=2000, walFsyncDelay=1000, walRecordIterBuffSize=67108864, alwaysWriteFullPages=false, fileIOFactory=org.apache.ignite.internal.processors.cache.persistence.file.AsyncFileIOFactory@1dd02175, metricsSubIntervalCnt=5, metricsRateTimeInterval=60000, walAutoArchiveAfterInactivity=-1, writeThrottlingEnabled=false, walCompactionEnabled=false], active
OnStart=true, autoActivation=true, longQryWarnTimeout=3000, sqlConnCfg=null, cliConnCfg=ClientConnectorConfiguration [host=null, port=10800, portRange=100, sockSndBufSize=0, sockRcvBufSize=0, tcpNoDelay=true, maxOpenCursorsPerConn=128, threadPoolSize=8, idleTimeout=0, jdbcEnabled=true, odbcEnabled=true, thinCliEnabled=true, sslEnabled=false, useIgniteSslCtxFactory=true, sslClientAuth=false, sslCtxFactory=null], auth
Enabled=false, failureHnd=null, commFailureRslvr=null], igniteInstanceName=CashflowCluster, startTime=1543228541082, rsrcCtx=null, reconnectState=org.apache.ignite.internal.IgniteKernal$ReconnectState@472ee9a1]]
        at org.apache.ignite.internal.processors.resource.GridResourceUtils.inject(GridResourceUtils.java:88)
        at org.apache.ignite.internal.processors.resource.GridResourceBasicInjector.inject(GridResourceBasicInjector.java:59)
        at org.apache.ignite.internal.processors.resource.GridResourceIoc$ClassDescriptor.injectInternal(GridResourceIoc.java:446)
        at org.apache.ignite.internal.processors.resource.GridResourceIoc$ClassDescriptor.inject(GridResourceIoc.java:470)
        at org.apache.ignite.internal.processors.resource.GridResourceProcessor.inject(GridResourceProcessor.java:278)
        at org.apache.ignite.internal.processors.resource.GridResourceProcessor.inject(GridResourceProcessor.java:162)
        at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.injectResources(GridCacheQueryManager.java:884)
        at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.scanIterator(GridCacheQueryManager.java:809)
        at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.executeQuery(GridCacheQueryManager.java:592)
        at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.queryResult(GridCacheQueryManager.java:1494)
        at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.runQuery(GridCacheQueryManager.java:1130)
        at org.apache.ignite.internal.processors.cache.query.GridCacheDistributedQueryManager.processQueryRequest(GridCacheDistributedQueryManager.java:230)
        at org.apache.ignite.internal.processors.cache.query.GridCacheDistributedQueryManager$2.apply(GridCacheDistributedQueryManager.java:108)
        at org.apache.ignite.internal.processors.cache.query.GridCacheDistributedQueryManager$2.apply(GridCacheDistributedQueryManager.java:106)
        at org.apache.ignite.internal.processors.cache.GridCacheIoManager.processMessage(GridCacheIoManager.java:1054)
        at org.apache.ignite.internal.processors.cache.GridCacheIoManager.onMessage0(GridCacheIoManager.java:579)
        at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:378)
        at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:304)
        at org.apache.ignite.internal.processors.cache.GridCacheIoManager.access$100(GridCacheIoManager.java:99)
        at org.apache.ignite.internal.processors.cache.GridCacheIoManager$1.onMessage(GridCacheIoManager.java:293)
        at org.apache.ignite.internal.managers.communication.GridIoManager.invokeListener(GridIoManager.java:1556)
        at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:1184)
        at org.apache.ignite.internal.managers.communication.GridIoManager.access$4200(GridIoManager.java:125)
        at org.apache.ignite.internal.managers.communication.GridIoManager$9.run(GridIoManager.java:1091)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.apache.ignite.internal.processors.resource.GridResourceUtils.inject(GridResourceUtils.java:85)
        ... 26 more
Caused by: class org.apache.ignite.IgniteException: Cannot find schema for object with compact footer [typeId=283075424, schemaId=-1794545082]
        at org.apache.ignite.internal.processors.platform.callback.PlatformCallbackUtils.inLongOutLong(Native Method)
        at org.apache.ignite.internal.processors.platform.callback.PlatformCallbackGateway.cacheEntryFilterCreate(PlatformCallbackGateway.java:128)
        at org.apache.ignite.internal.processors.platform.cache.PlatformCacheEntryFilterImpl.setIgniteInstance(PlatformCacheEntryFilterImpl.java:105)
        ... 31 more

{code}

Reproducer is attached








",.net,['platforms'],IGNITE,Bug,Major,2018-11-26 12:19:53,0
13200224,MVCC: Invoke request fails on backup while rebalance is in progress.,"Invoke request fails with Assertion on backup while rebalance is in progress.

Enlist request handler expects entry processor instead of value in case of Invoke operation,
but when rebalance is in progress we pass entry history to backup side. This causes assertion triggering.

We have to handle correctly this case and apply history and then entry processor.

 ",transactions,['mvcc'],IGNITE,Bug,Major,2018-11-23 10:37:02,1
13200060,MVCC: Incorrect exception is thrown if no data nodes found for a partition.,"See NotMappedPartitionInTxTest.

ClusterTopologyServerNotFoundException is expected, instead of ""ClusterTopologyCheckedException: Failed to get primary node"" ",transactions,['mvcc'],IGNITE,Bug,Major,2018-11-22 12:00:34,1
13199786,MVCC: P2P deployment for EntryProcessor looks broken.,"GridCacheTransactionalEntryProcessorDeploymentSelfTest and GridCacheBinaryTransactionalEntryProcessorDeploymentSelfTest fail with ClassNotFoundException.

 

 
{noformat}
[11:34:44]W: [org.apache.ignite:ignite-core] [2018-11-21 08:34:44,810][ERROR][sys-stripe-15-#41929%cache.GridCacheTransactionalEntryProcessorDeploymentSelfTest0%][GridCacheIoManager] Failed to
[11:34:44]W: [org.apache.ignite:ignite-core] class org.apache.ignite.IgniteCheckedException: Failed to send response to node. Unsupported direct type [message=GridNearTxEnlistRequest [threadId
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.processors.cache.GridCacheIoManager.processFailedMessage(GridCacheIoManager.java:1043)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.processors.cache.GridCacheIoManager.onMessage0(GridCacheIoManager.java:577)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:378)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:304)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.processors.cache.GridCacheIoManager.access$100(GridCacheIoManager.java:100)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.processors.cache.GridCacheIoManager$1.onMessage(GridCacheIoManager.java:294)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.managers.communication.GridIoManager.invokeListener(GridIoManager.java:1568)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:1196)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.managers.communication.GridIoManager.access$4200(GridIoManager.java:127)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.managers.communication.GridIoManager$9.run(GridIoManager.java:1092)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.util.StripedExecutor$Stripe.body(StripedExecutor.java:505)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120)
[11:34:44]W: [org.apache.ignite:ignite-core] at java.lang.Thread.run(Thread.java:748)
[11:34:44]W: [org.apache.ignite:ignite-core] Caused by: class org.apache.ignite.IgniteCheckedException: org.apache.ignite.tests.p2p.CacheDeploymentBinaryEntryProcessor
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.util.IgniteUtils.unmarshal(IgniteUtils.java:10136)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.util.IgniteUtils.unmarshal(IgniteUtils.java:10188)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.processors.cache.distributed.dht.GridInvokeValue.finishUnmarshal(GridInvokeValue.java:108)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxEnlistRequest.finishUnmarshal(GridNearTxEnlistRequest.java:359)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.processors.cache.GridCacheIoManager.unmarshall(GridCacheIoManager.java:1527)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.processors.cache.GridCacheIoManager.onMessage0(GridCacheIoManager.java:574)
[11:34:44]W: [org.apache.ignite:ignite-core] ... 11 more
[11:34:44]W: [org.apache.ignite:ignite-core] Caused by: class org.apache.ignite.binary.BinaryInvalidTypeException: org.apache.ignite.tests.p2p.CacheDeploymentBinaryEntryProcessor
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.binary.BinaryContext.descriptorForTypeId(BinaryContext.java:707)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.binary.BinaryContext.descriptorForTypeId(BinaryContext.java:704)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.binary.BinaryReaderExImpl.deserialize0(BinaryReaderExImpl.java:1757)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.binary.BinaryReaderExImpl.deserialize(BinaryReaderExImpl.java:1716)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.binary.GridBinaryMarshaller.deserialize(GridBinaryMarshaller.java:313)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.binary.BinaryMarshaller.unmarshal0(BinaryMarshaller.java:101)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.marshaller.AbstractNodeNameAwareMarshaller.unmarshal(AbstractNodeNameAwareMarshaller.java:81)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.util.IgniteUtils.unmarshal(IgniteUtils.java:10130)
[11:34:44]W: [org.apache.ignite:ignite-core] ... 16 more
[11:34:44]W: [org.apache.ignite:ignite-core] Caused by: java.lang.ClassNotFoundException: org.apache.ignite.tests.p2p.CacheDeploymentBinaryEntryProcessor
[11:34:44]W: [org.apache.ignite:ignite-core] at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
[11:34:44]W: [org.apache.ignite:ignite-core] at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
[11:34:44]W: [org.apache.ignite:ignite-core] at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.maven.surefire.booter.IsolatedClassLoader.loadClass(IsolatedClassLoader.java:100)
[11:34:44]W: [org.apache.ignite:ignite-core] at java.lang.Class.forName0(Native Method)
[11:34:44]W: [org.apache.ignite:ignite-core] at java.lang.Class.forName(Class.java:348)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.util.IgniteUtils.forName(IgniteUtils.java:8761)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.MarshallerContextImpl.getClass(MarshallerContextImpl.java:349)
[11:34:44]W: [org.apache.ignite:ignite-core] at org.apache.ignite.internal.binary.BinaryContext.descriptorForTypeId(BinaryContext.java:698)
[11:34:44]W: [org.apache.ignite:ignite-core] ... 23 more
{noformat}
 

 

 ",transactions,['mvcc'],IGNITE,Bug,Minor,2018-11-21 08:55:47,1
13199353,Add Ignite.NET configuration for disk page compression ,CacheConfiguration and DataStorageMetrics were changed.,.NET,"['cache', 'platforms']",IGNITE,New Feature,Major,2018-11-19 14:48:38,0
13198986,SQL: Extract partition info from JOINs,"Currently we do not extract partitions when JOINs are involved. Let's implement it. We may start with relatively simple rules:
# No subqueries
# No GROUP BY
Then walk through JOINed tables and extract partitions from AND clauses. 

There are some tricky things to consider:
# Resulting model (tree) must be craefted carefully so that we can reuse it later in thin clients for efficient co-location.
# Resulting model may affect how we group tables during push-down phase. Probably this would be huuuge thing, so may be it is better to implement it in separate ticket
# When JOIN is performed partition info might be ""transferred"" between tables. E.g.:
{code}
a INNER JOIN b ON a.id = b.affinity_id WHERE a.id = :1
{code}
In this case if tables are co-located (we may infer it automatically in some cases), then {{a.id=:1}} partition rule can be ""transferred"" to {{b.affinity_id=:1}}.

Very good test coverage would be needed here.",iep-24,['sql'],IGNITE,Task,Major,2018-11-16 17:48:24,4
13198617,Thin client is unable to get affinity mapping in some cases,"Reproducer test for C++:

{code:cpp}
BOOST_AUTO_TEST_CASE(CacheClientDefaultDynamicCacheThreeNodes)
{
    StartNode(""node1"");
    StartNode(""node2"");

    IgniteClientConfiguration cfg;
    cfg.SetEndPoints(""127.0.0.1:11110..11120"");

    IgniteClient client = IgniteClient::Start(cfg);

    cache::CacheClient<std::string, int64_t> cache =
        client.CreateCache<std::string, int64_t>(""defaultdynamic3"");

    cache.RefreshAffinityMapping();

    for (int64_t i = 1; i < 1000; ++i)
        cache.Put(ignite::common::LexicalCast<std::string>(i * 39916801), i * 5039);

    for (int64_t i = 1; i < 1000; ++i)
    {
        int64_t val;
        LocalPeek(cache, ignite::common::LexicalCast<std::string>(i * 39916801), val);

        BOOST_CHECK_EQUAL(val, i * 5039);
    }
}
{code}",cpp,['thin client'],IGNITE,Bug,Major,2018-11-15 12:43:31,3
13198471,MVCC: Concurrent cache stop can cause vacuum failure.," 

Vacuum.cleanup() can fails on cctx.gate().enter() if cache is stopped concurrently.
ctx.gate().enter() method fails with IllegalStateException and we've got stacktrace in log for every cache partition.

Replacing enter() with enterIfNotStopped() resolves the issue.",Hanging,"['cache', 'mvcc']",IGNITE,Bug,Minor,2018-11-14 22:25:25,1
13198358,MVCC: invokeAll may hangs on unstable topology.,Test IgniteCacheEntryProcessorNodeJoinTest.testEntryProcessorNodeLeave() hangs with TRANSACTIONAL_SNAPSHOT cache mode.,Hanging,['mvcc'],IGNITE,Bug,Major,2018-11-14 15:07:58,1
13197983,SQL: Extract partition pruning logic from splitter,"We will need this in multiple places outside of splitter. Ideally, it should be H2-agnostic.",iep-24,['sql'],IGNITE,Task,Major,2018-11-13 08:06:02,4
13197783,MVCC: TX: Backup node update may fail after lost tx rollback.,"The use case:
 # Start Tx and update entry.
 # Kill backup.
 # Rollback Tx (backup miss this tx state change due to outage)
 # Start backup.
 # Update same entry may fails with unknown tx state for latest entry version.

Backup won't rebalance partition for the key as rollback doesn't increment partition counter and can't found active transaction for latest entry version as TxLog contains neither commit nor rollback record.

Also Tx can't be detected as rolled back as mvcc coordinator version hasn't changed during backup node outage.

 

Possible solutions are
 # Increment mvcc coordinator version on every node join event that need to be carefully tested.
 # Scan cache to cleanup such entries on node startup (right after recovery from WAL) which is inefficient.
 # Or may be log Tx start in TxLog and rollback all active Tx on node startup.",transactions,['mvcc'],IGNITE,Bug,Major,2018-11-12 12:17:21,1
13196576,CPP thin: Headers are not installed on make install,"Currently, {{make install}} command from {{platforms/cpp}} does not install headers for C++ thin client.",cpp,"['platforms', 'thin client']",IGNITE,Bug,Critical,2018-11-06 14:42:36,3
13195272,.NET: Avoid binary configurations of Ignite Java service params and result when calling it from Ignite.NET,"Presently if there is an Ignite Java service taking parameters of complex (composite) types and returning a result of complex type then all the complex types must be explicitly specified in the binary configuration.

We need to enhance Ignite not to require binary configuration assuming that we use the same type, package/namespace and field/property names on both the .NET and Java sides (or provide a custom name mapper for relaxed naming conventions).
h2. Reproducer

[https://github.com/kukushal/apache-ignite-issue10075.git]
h3. ICalculator.java
{code:java}
package Apache.Ignite.Issue10075;

public interface ICalculator {
    Result Calculate(Parameter p);
}
{code}
h3. Parameter.java
{code:java}
package Apache.Ignite.Issue10075;

public final class Parameter {
    private int id;
    private double val;

    public int getId() {
        return id;
    }

    public Parameter setId(int id) {
        this.id = id;
        return this;
    }

    public double getValue() {
        return val;
    }

    public Parameter setValue(double val) {
        this.val = val;
        return this;
    }
}
{code}
h3. Result .java
{code:java}
package Apache.Ignite.Issue10075;

public final class Result {
    private int id;
    private double value;

    public int getId() {
        return id;
    }

    public Result setId(int id) {
        this.id = id;
        return this;
    }

    public double getValue() {
        return value;
    }

    public Result setValue(double val) {
        this.value = val;
        return this;
    }
}
{code}
h3. IgniteCalculatorService.java
{code:java}
package Apache.Ignite.Issue10075;

import org.apache.ignite.services.Service;
import org.apache.ignite.services.ServiceContext;

public final class IgniteCalculatorService implements Service, ICalculator {
    @Override public Result Calculate(Parameter p) {
        return new Result().setId(p.getId()).setValue(p.getValue() * p.getValue());
    }

    @Override public void cancel(ServiceContext ctx) {
    }

    @Override public void init(ServiceContext ctx) {
    }

    @Override public void execute(ServiceContext ctx) {
    }
}
{code}
h3. build.gradle
{code:groovy}
plugins {
    id 'java'
}

group 'apache.ignite.issue10075'
version '1.0.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

def igniteVer='2.9.0'

dependencies {
    compile group: 'org.apache.ignite', name: 'ignite-core', version: igniteVer

    testCompile group: 'junit', name: 'junit', version: '4.12'
}
{code}
h3. Apache.Ignite.Issue10075/ignite-config.xml
{code:xml}
<?xml version=""1.0"" encoding=""utf-8"" ?>

<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"">
    <bean id=""ignite.cfg"" class=""org.apache.ignite.configuration.IgniteConfiguration"">
        <property name=""serviceConfiguration"">
            <list>
                <bean class=""org.apache.ignite.services.ServiceConfiguration"">
                    <property name=""name"" value=""IgniteCalculatorService""/>
                    <property name=""maxPerNodeCount"" value=""1""/>
                    <property name=""totalCount"" value=""0""/>
                    <property name=""service"">
                        <bean class=""Apache.Ignite.Issue10075.IgniteCalculatorService""/>
                    </property>
                </bean>
            </list>
        </property>

        <property name=""discoverySpi"">
            <bean class=""org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi"">
                <property name=""ipFinder"">
                    <bean class=""org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder"">
                        <property name=""addresses"">
                            <list>
                                <value>127.0.0.1:47500</value>
                            </list>
                        </property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
</beans>
{code}
h3. Apache.Ignite.Issue10075/ICalculator.cs
{code:c#}
namespace Apache.Ignite.Issue10075
{
    public interface ICalculator
    {
        Result Calculate(Parameter p);
    }
}
{code}
h3. Apache.Ignite.Issue10075/Parameter.cs
{code:c#}
namespace Apache.Ignite.Issue10075
{
    public class Parameter
    {
        public int Id { get; set; }
        public double Value { get; set; }
    }
}
{code}
h3. Apache.Ignite.Issue10075/Result.cs
{code:c#}
namespace Apache.Ignite.Issue10075
{
    public class Result
    {
        public int Id { get; set; }
        public double Value { get; set; }
    }
}
{code}
h3. Apache.Ignite.Issue10075/Program.cs
{code:c#}
using Apache.Ignite.Core;
using System;

namespace Apache.Ignite.Issue10075
{
    class Program
    {
        static void Main(string[] args)
        {
            IgniteConfiguration CommonConfig(string name) => new IgniteConfiguration
            {
                IgniteInstanceName = name,
                SpringConfigUrl = ""ignite-config.xml"",
                JvmClasspath = ""apache-ignite-issue10075-1.0.0-SNAPSHOT.jar""
            };

            var igniteServerCfg = CommonConfig(""server1"");

            var igniteAppCfg = CommonConfig(""app"");
            igniteAppCfg.ClientMode = true;

            using var _ = Ignition.Start(igniteServerCfg);
            using var ignite = Ignition.Start(igniteAppCfg);
            var calc = ignite.GetServices().GetServiceProxy<ICalculator>(""IgniteCalculatorService"");
            var res = calc.Calculate(new Parameter { Id = 2, Value = 2.0 });
            Console.WriteLine($"">>>>> {res.Value}"");
        }
    }
}
{code}
h3. Apache.Ignite.Issue10075/Apache.Ignite.Issue10075.csproj
{code:java}
<Project Sdk=""Microsoft.NET.Sdk"">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp3.1</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <None Include=""apache-ignite-issue10075-1.0.0-SNAPSHOT.jar"">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include=""Apache.Ignite"" Version=""2.9.0"" />
  </ItemGroup>

  <ItemGroup>
    <None Update=""ignite-config.xml"">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

</Project> {code}
h2. Actual Result Exception
{code:java}
Unhandled exception. Apache.Ignite.Core.Services.ServiceInvocationException: Proxy method invocation failed with an exception. Examine InnerException for details.
 ---> Apache.Ignite.Core.Common.IgniteException: Java exception occurred [class=org.apache.ignite.binary.BinaryInvalidTypeException, message=Requesting mapping from grid failed for [platformId=0, typeId=-960631211]]
 ---> Apache.Ignite.Core.Common.JavaException: class org.apache.ignite.binary.BinaryInvalidTypeException: Requesting mapping from grid failed for [platformId=0, typeId=-960631211]
        at org.apache.ignite.internal.binary.BinaryContext.descriptorForTypeId(BinaryContext.java:689)
        at org.apache.ignite.internal.binary.BinaryReaderExImpl.deserialize0(BinaryReaderExImpl.java:1757)
        at org.apache.ignite.internal.binary.BinaryReaderExImpl.deserialize(BinaryReaderExImpl.java:1716)
        at org.apache.ignite.internal.binary.BinaryObjectImpl.deserializeValue(BinaryObjectImpl.java:796)
        at org.apache.ignite.internal.binary.BinaryObjectImpl.deserialize(BinaryObjectImpl.java:637)
        at org.apache.ignite.internal.processors.platform.utils.PlatformUtils.unwrapBinary(PlatformUtils.java:927)
        at org.apache.ignite.internal.processors.platform.utils.PlatformUtils.unwrapBinariesInArray(PlatformUtils.java:995)
        at org.apache.ignite.internal.processors.platform.services.PlatformServices$ServiceProxyHolder.invoke(PlatformServices.java:593)
        at org.apache.ignite.internal.processors.platform.services.PlatformServices.processInObjectStreamOutObjectStream(PlatformServices.java:288)
        at org.apache.ignite.internal.processors.platform.PlatformTargetProxyImpl.inObjectStreamOutObjectStream(PlatformTargetProxyImpl.java:172)
Caused by: java.lang.ClassNotFoundException: Requesting mapping from grid failed for [platformId=0, typeId=-960631211]
        at org.apache.ignite.internal.MarshallerContextImpl.getClassName(MarshallerContextImpl.java:429)
        at org.apache.ignite.internal.MarshallerContextImpl.getClassName(MarshallerContextImpl.java:384)
        at org.apache.ignite.internal.MarshallerContextImpl.getClass(MarshallerContextImpl.java:371)
        at org.apache.ignite.internal.binary.BinaryContext.descriptorForTypeId(BinaryContext.java:680)
        ... 9 more   --- End of inner exception stack trace ---
   --- End of inner exception stack trace ---
   at Apache.Ignite.Core.Impl.Services.ServiceProxySerializer.ReadInvocationResult(IBinaryStream stream, Marshaller marsh, Boolean keepBinary)
   at Apache.Ignite.Core.Impl.Services.Services.<InvokeProxyMethod>b__2a(IBinaryStream stream, IPlatformTargetInternal res)
   at Apache.Ignite.Core.Impl.PlatformJniTarget.InObjectStreamOutObjectStream[TR](Int32 type, Action`1 writeAction, Func`3 readAction, IPlatformTargetInternal arg)
   at Apache.Ignite.Core.Impl.PlatformTargetAdapter.DoOutInOp[TR](Int32 type, Action`1 outAction, Func`3 inAction, IPlatformTargetInternal arg)
   at Apache.Ignite.Core.Impl.Services.Services.InvokeProxyMethod(IPlatformTargetInternal proxy, String methodName, MethodBase method, Object[] args, PlatformType platformType)
   at Apache.Ignite.Core.Impl.Services.Services.<>c__DisplayClass22`1.<GetServiceProxy>b__21(MethodBase method, Object[] args)
   at Apache.Ignite.Issue10075.Program.Main(String[] args) in C:\Dev\github.com\kukushal\apache-ignite-issue10075\Apache.Ignite.Issue10075\Program.cs:line 25
{code}",.NET sbcf,['platforms'],IGNITE,Improvement,Major,2018-10-30 23:54:37,2
13195265,.NET: Add NuGet package without embedded Ignite JARs,"The existing Apache.Ignite NuGet package includes Ignite JARs deployed into the ""libs"" directory in the .NET project output directory upon the package installation.

We prefer using external Ignite JARs from $IGNITE_HOME/libs instead of the JARs in the local libs directory.

Right now we have to manually remove local ""libs"" directory after every Apache.Ignite package installation or upgrade.

It would help us having another Ignite NuGet package without the embedded Ignite JARs.",.NET sbcf,"['documentation', 'platforms']",IGNITE,Improvement,Major,2018-10-30 23:35:01,0
13194431,CPP: Runtime code deployment,"It would be useful for a user to have an ability to deploy code (dll, so, etc) in cluster on a selected subset of nodes.

This task can be split in a 3 steps:
1. Uploading module to selected subset of nodes.
2. Loading module dynamically on the whole subset.
3. Initializing of a module (i.e. registering callables, declared in the module within Ignite)

This also may require partial implementation of a Cluster API - IGNITE-5708",cpp,['platforms'],IGNITE,New Feature,Major,2018-10-26 14:38:37,3
13194167,ODBC: SQLColumns does not work for tables with escape sequences in name,"Table names with escaped underscore '\_' or percent '\%' characters is not recognized by the ODBC driver. I.e. the following table pattern:
{noformat}
TEST\_TABLE
{noformat}
Should match the following table:
{noformat}
TEST_TABLE
{noformat}

But currently it does not. Needs to be fixed.
",odbc,['odbc'],IGNITE,Bug,Major,2018-10-25 15:06:30,3
13193864,Thin client: integration with 3rd party security may not work properly,"Current thin client handler can delegate to 3rd party security if it is enabled. However, it fails to set proper security context. As a result, certain operations may remain unauthorized.",security vulnerability,"['security', 'sql']",IGNITE,Task,Major,2018-10-24 13:09:32,4
13191967,CPP Thin: Implement atomic part of Cache API for C++ thin client,"Need to implement atomic part of cache API: 
# {{ReplaceIfEquals}}
# {{RemoveIfEquals}}
# {{GetAndPut}}
# {{GetAndRemove}}
# {{GetAndReplace}}
# {{PutIfAbsent}}
# {{GetAndPutIfAbsent}}",cpp,['thin client'],IGNITE,New Feature,Major,2018-10-16 16:13:50,3
13191654,MVCC: Exchange hangs on mvcc coordinator fail,"Test {{CacheMvccPartitionedSqlCoordinatorFailoverTest#testAccountsTxSql_Server_Backups0_CoordinatorFails}} hangs sporadically on exchange.

Stacktrace:

{code:java}
[11:33:18]W:         [org.apache.ignite:ignite-indexing] Thread [name=""exchange-worker-#151671%mvcc.CacheMvccPartitionedSqlCoordinatorFailoverTest1%"", id=165981, state=TIMED_WAITING, blockCnt=69, waitCnt=36]
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at sun.misc.Unsafe.park(Native Method)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:338)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.i.util.future.GridFutureAdapter.get0(GridFutureAdapter.java:219)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.i.util.future.GridFutureAdapter.get(GridFutureAdapter.java:160)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.i.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.waitPartitionRelease(GridDhtPartitionsExchangeFuture.java:1433)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.i.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.distributedExchange(GridDhtPartitionsExchangeFuture.java:1271)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.i.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.init(GridDhtPartitionsExchangeFuture.java:789)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.i.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body0(GridCachePartitionExchangeManager.java:2657)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.i.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body(GridCachePartitionExchangeManager.java:2529)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.i.util.worker.GridWorker.run(GridWorker.java:120)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at java.lang.Thread.run(Thread.java:748)
[11:33:18]W:         [org.apache.ignite:ignite-indexing] Thread [name=""test-runner-#151510%mvcc.CacheMvccPartitionedSqlCoordinatorFailoverTest%"", id=165803, state=RUNNABLE, blockCnt=70, waitCnt=1710]
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at sun.management.ThreadImpl.dumpThreads0(Native Method)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at sun.management.ThreadImpl.dumpAllThreads(ThreadImpl.java:454)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.i.util.IgniteUtils.dumpThreads(IgniteUtils.java:1356)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.testframework.junits.common.GridCommonAbstractTest.awaitPartitionMapExchange(GridCommonAbstractTest.java:724)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.testframework.junits.common.GridCommonAbstractTest.awaitPartitionMapExchange(GridCommonAbstractTest.java:549)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.testframework.junits.common.GridCommonAbstractTest.awaitPartitionMapExchange(GridCommonAbstractTest.java:533)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.i.processors.cache.mvcc.CacheMvccAbstractTest.readWriteTest(CacheMvccAbstractTest.java:1382)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.i.processors.cache.mvcc.CacheMvccAbstractTest.accountsTxReadAll(CacheMvccAbstractTest.java:773)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.i.processors.cache.mvcc.CacheMvccAbstractSqlCoordinatorFailoverTest.testAccountsTxSql_Server_Backups0_CoordinatorFails(CacheMvccAbstractSqlCoordinatorFailoverTest.java:35)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at java.lang.reflect.Method.invoke(Method.java:498)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at junit.framework.TestCase.runTest(TestCase.java:176)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.testframework.junits.GridAbstractTest.runTestInternal(GridAbstractTest.java:2176)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.testframework.junits.GridAbstractTest.access$000(GridAbstractTest.java:142)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at o.a.i.testframework.junits.GridAbstractTest$5.run(GridAbstractTest.java:2091)
[11:33:18]W:         [org.apache.ignite:ignite-indexing]         at java.lang.Thread.run(Thread.java:748)
{code}


",Hanging failover,['mvcc'],IGNITE,Bug,Major,2018-10-15 16:42:12,1
13191648,ODBC: SQLTables does not work with list of table types,{{SQLTables}} do not work with list of table types as stated in https://docs.microsoft.com/en-us/sql/odbc/reference/syntax/sqltables-function?view=sql-server-2017,odbc,['odbc'],IGNITE,Bug,Major,2018-10-15 16:30:42,3
13191472,.NET: LINQ does not work under .NET Core 2.1 - AmbiguousMatchException,"One of the string methods is causing an exception:

{code}
Unhandled Exception: System.TypeInitializationException: The type initializer for 'Apache.Ignite.Linq.Impl.MethodVisitor' threw an exception. ---> System.Reflection.AmbiguousMatchException: Ambiguous match found.
   at System.RuntimeType.GetMethodImplCommon(String name, Int32 genericParameterCount, BindingFlags bindingAttr, Binder binder, CallingConventions callConv, Type[] types, ParameterModifier[] modifiers)
   at System.RuntimeType.GetMethodImpl(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConv, Type[] types, ParameterModifier[] modifiers)
   at System.Type.GetMethod(String name, BindingFlags bindingAttr)
   at Apache.Ignite.Linq.Impl.MethodVisitor.GetMethod(Type type, String name, Type[] argTypes, VisitMethodDelegate del)
   at Apache.Ignite.Linq.Impl.MethodVisitor.GetStringMethod(String name, Type[] argTypes, VisitMethodDelegate del)
   at Apache.Ignite.Linq.Impl.MethodVisitor..cctor()
{code}

We should clarify the signature of all string methods to avoid this in future.",.NET,['platforms'],IGNITE,Bug,Critical,2018-10-14 20:28:07,0
13191469,.NET: Thin Client: Implement Best Effort Affinity,"See linked IEP-23.

First iteration is going to be an ""experimental feature"" with the following limitations:
* No reconnect support for failed nodes
* No AffinityKeyMapped support",.NET iep-23,"['platforms', 'thin client']",IGNITE,New Feature,Major,2018-10-14 19:20:31,0
13188591,"С++: DetachCurrentThread is never called, causing Java thread leak","JNI method AttrachCurrentThread must be called on every thread that performs JNI calls.
This causes Thread object to be created on Java side, with a bunch of thread-local values (both managed and unmanaged). To clean this up we must call DetachCurrentThread JNI method.

Ignite C++ seems to never do this. Same issue as IGNITE-9638 for .NET, known to cause OOM in a scenario where lots of threads are created and destroyed.",C++,['platforms'],IGNITE,Bug,Major,2018-10-01 17:07:11,3
13185804,".NET: JVM keeps track of CLR Threads, even when they are finished ","When you create a Thread in C#, JVM creates corresponding thread ""Thread-NNNN"" which is visible in jstack. When C# joins this thread, it is not removed from JVM and is kept around. This means that jstack may show thousands of threads which are not there. Reproducer is attached. It is presumed that memory will be exhausted eventually.",.NET,['platforms'],IGNITE,Bug,Major,2018-09-18 13:28:06,0
13185756,Partitions intersection for AND condition of same key,GridSqlQuerySplitter when extractPartition for AND operation type should calculate intersection of resolved partitions for the same key,iep-24,['sql'],IGNITE,Improvement,Major,2018-09-18 09:41:28,4
13184813,Fix failures in CacheMvccSelectForUpdateQueryAbstractTest,Caused by badly formed test itself.,MakeTeamcityGreenAgain,['mvcc'],IGNITE,Task,Major,2018-09-13 07:42:57,4
13184278,.NET: Change MVCC enabled configuration.,MVCC enabled configuration has changed from the node global flag to per-cache atomicity mode setting {{CacheAtomicityMode#TRANSACTIONAL_SNAPSHOT}}. We need to reflect this change in .NET API.,.net,"['mvcc', 'platforms']",IGNITE,Task,Major,2018-09-11 09:34:02,4
13182131,Create suites for MVCC tests on TC.,"MVCC tests suites should be created on Ignite TeamCity.
 * org.apache.ignite.testsuites;.MvccQueryTrackerImpl
 * org.apache.ignite.jdbc.suite.IgniteJdbcDriverMvccTestSuite
 * org.apache.ignite.testsuites.IgniteCacheMvccTestSuite

""MVCC Run All"" should be created as well to run mvcc tests only.

Mvcc tests should be added to ""Run All"" as well.

 ",teamcity,['mvcc'],IGNITE,Task,Blocker,2018-08-30 13:47:53,4
13180775,Jetty tests forget to stop nodes on finished.,JettyRestProcessorCommonSelfTest.afterTestsStopped() method should call it's super.,MakeTeamcityGreenAgain,['clients'],IGNITE,Improvement,Major,2018-08-23 17:07:47,1
13179366,.NET: Support dependency injection for user-defined classes that are instantiated by Ignite,"Ignite instantiates some of user-defined classes like Services, Compute Jobs, and so on.
There is no way to inject user-specific dependencies into these objects.

See StackOverflow question for more details:
https://stackoverflow.com/questions/51872358/dependency-injection-in-apache-ignite-net-service

In java there is {{@ SpringResource}}, we need to come up with a similar solution.",.NET,['platforms'],IGNITE,Improvement,Major,2018-08-16 14:15:11,0
13179291,Make remove explicit locks async when node left.,"GridCacheMvccManager.removeExplicitNodeLocks() run synchronously in discovery and exchange threads. This introduce unnecessary delays in discovery and exchange process.

Also, this may cause a deadlock on node stop if user transaction holds an entry lock and awaits some Ignite manager response (e.g. cache store or DR or CQ), as manager stops right after last exchange has finished so managers can't detect node is stopping. 

 

[1] [http://apache-ignite-developers.2346864.n4.nabble.com/Synchronous-tx-entries-unlocking-in-discovery-exchange-threads-td33827.html] ",deadlock,['cache'],IGNITE,Bug,Critical,2018-08-16 08:08:11,1
13178250,CPP Thin: implement operations with multiple keys and values,"Need to implement GetAll, PutAll, ContainsKeys, RemoveAll, ClearAll in C++ Thin client.
",cpp,['thin client'],IGNITE,New Feature,Major,2018-08-10 10:30:47,3
13177299,".NET `TestRemoteNodes` fails with ""Failed to map SQL query to topology""","Tests constantly fails with exception `Failed to map SQL query to topology.`
* ExamplesTest.TestRemoteNodes(BinaryModeExample) 	
* ExamplesTest.TestRemoteNodes(LinqExample)
* ExamplesTest.TestRemoteNodes(SqlExample) 

{code:java}
Test(s) failed. Apache.Ignite.Core.Cache.CacheException : Failed to map SQL query to topology. ----> Apache.Ignite.Core.Common.JavaException : javax.cache.CacheException: Failed to map SQL query to topology.
at org.apache.ignite.internal.processors.query.h2.twostep.GridReduceQueryExecutor.query(GridReduceQueryExecutor.java:577)
at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing$8.iterator(IgniteH2Indexing.java:1447)
at org.apache.ignite.internal.processors.cache.QueryCursorImpl.iterator(QueryCursorImpl.java:95)
at org.apache.ignite.internal.processors.platform.cache.query.PlatformAbstractQueryCursor.processInLongOutLong(PlatformAbstractQueryCursor.java:147)
at org.apache.ignite.internal.processors.platform.PlatformTargetProxyImpl.inLongOutLong(PlatformTargetProxyImpl.java:55)
{code}

https://ci.ignite.apache.org/project.html?projectId=IgniteTests24Java8&testNameId=-3155722801840665529&branch=%3Cdefault%3E&tab=testDetails",MakeTeamcityGreenAgain sql-stability,"['platforms', 'sql']",IGNITE,Test,Blocker,2018-08-07 05:46:10,4
13176338,CPP: Get rid of additional copy on Get,"Currently, helper classes from {{operations.h}} header file, e.g. {{Out1Operation}} contain additional value, that can't be optimized-out by the compiler on return, even though the operation itself is a temporary object.

As a solution, such classes should accept and operate on a reference to a temporary object, so that [copy elision|https://en.wikipedia.org/wiki/Copy_elision] can be used by a compiler.",cpp,['platforms'],IGNITE,Improvement,Major,2018-08-02 07:24:10,3
13175281,.NET: LINQ: CacheConfiguration.SqlSchema is ignored,"{{CacheConfiguration.SqlSchema}} and {{CacheClientConfiguration.SqlSchema}} are ignored by LINQ provider, schema name is inferred only from cache name.

See {{ExpressionWalker.GetTableNameWithSchema}}.",.NET,['platforms'],IGNITE,Improvement,Major,2018-07-27 22:05:32,0
13175186,CPP Thin: Implement SQL API,Need to implement SQL API for C++ thin client.,important,['platforms'],IGNITE,New Feature,Major,2018-07-27 14:58:59,3
13174325,ODBC: Wrong error message on handshake failure,"Currently, on handshake failure ODBC driver prints the following message:

{noformat}

Unsupported version. Current node Apache Ignite version: X.X.X, driver protocol version introduced in version: Y.Y.Y.

{noformat}

It should say about node's *protocol* version, not the version of the node itself.",odbc,['odbc'],IGNITE,Bug,Major,2018-07-25 10:19:46,3
13171131,CPP Thin: Add thin client example,Add thin C++ client example that shows its basic functionality.,cpp,['platforms'],IGNITE,Improvement,Major,2018-07-10 12:27:56,3
13170116,ODBC: Cursors are not closed when used through Go,"Client used: https://github.com/alexbrainman/odbc

Example app for reproducing: [https://github.com/nombiezinja/ignite-cursor-example]

After several execution of statements user begins to get the following error:
{noformat}
2018/06/29 20:46:06 SQLExecute: {HY000} Too many open cursors (either close
other open cursors or increase the limit through
ClientConnectorConfiguration.maxOpenCursorsPerConnection) [maximum=128,
current=128]{noformat}",odbc,['odbc'],IGNITE,Bug,Major,2018-07-04 17:05:32,3
13170090,Hangs when executing an SQL query when there are LOST partitions,"If there are partitions in the LOST state, SQL query hang.",sql-stability,['sql'],IGNITE,Bug,Major,2018-07-04 14:11:04,4
13168850,Iterating over large dataset via ScanQuery can fails with OOME.,"Seems, iterating over query iterator (ScanQuery at least, but may be other affected as well) on client node cause memory leakage.

The use case is quite simple.
 Start server and client. Put much data into cache, then iterate over all entries via ScanQuery.
 Looks like JVM crashed due to OOM as GridCacheDistributedQueryFuture.allCol map contains to many entries.

I've put 15kk entries into cache and client failed with OOM after iterating over 10kk entry.
 In heapdump I observer 10kk GridCacheDistributedQueryFuture entries. 

We have to check if collection cleared correctly and it is really need to collect all entries.

PFA repro.",OutOfMemoryError,['cache'],IGNITE,Bug,Critical,2018-06-28 12:24:20,1
13168535,.NET: CachePartialUpdateException: failed to update keys (using Cache.PutAsync),"The issue happens when we try to call PutAsync(KeyObject, ValueObject) where ValueObject's field refers to KeyObject. Reproducer is attached.

 
{code:java}
Apache.Ignite.Core.Cache.CachePartialUpdateException: Failed to update keys (retry update if possible).: [server_node.TradeId [idHash=573136580, hash=31459296, Number=2]]
at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
at server_node.Program.<PutGetComplexTypeAsyncSharedRef>d__2.MoveNext() in C:\Users\user\source\repos\IginteAsyncTest\server-node\server-node\Program.cs:line 61
--- End of stack trace from previous location where exception was thrown ---
at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
at server_node.Program.Main(String[] args) in C:\Users\user\source\repos\IginteAsyncTest\server-node\server-node\Program.cs:line 22
{code}
 

 Also, when we use the default logger, Cache.PutAsync doesn't throw an exception but when we try to get value back from the cache the different exception happens:

 
{code:java}
System.ArgumentException: Seek before origin: -25
at Apache.Ignite.Core.Impl.Memory.PlatformMemoryStream.Seek(Int32 offset, SeekOrigin origin)
at Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadHandleObject[T](Int32 pos, Type typeOverride)
at Apache.Ignite.Core.Impl.Binary.BinaryReader.TryDeserialize[T](T& res, Type typeOverride)
at Apache.Ignite.Core.Impl.Binary.BinaryReader.Deserialize[T](Type typeOverride)
at Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadObject[T](String fieldName)
at lambda_method(Closure , Object , IBinaryReader )
at Apache.Ignite.Core.Impl.Binary.BinaryReflectiveSerializerInternal.Apache.Ignite.Core.Impl.Binary.IBinarySerializerInternal.ReadBinary[T](BinaryReader reader, IBinaryTypeDescriptor desc, Int32 pos, Type typeOverride)
at Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadFullObject[T](Int32 pos, Type typeOverride)
at Apache.Ignite.Core.Impl.Binary.BinaryReader.TryDeserialize[T](T& res, Type typeOverride)
at Apache.Ignite.Core.Impl.Binary.BinaryReader.Deserialize[T](Type typeOverride)
at Apache.Ignite.Core.Impl.Binary.BinaryReader.ReadBinaryObject[T](Boolean doDetach)
at Apache.Ignite.Core.Impl.Binary.BinaryReader.TryDeserialize[T](T& res, Type typeOverride)
at Apache.Ignite.Core.Impl.Binary.BinaryReader.Deserialize[T](Type typeOverride)
at Apache.Ignite.Core.Impl.Binary.Marshaller.Unmarshal[T](IBinaryStream stream, Boolean keepBinary)
at Apache.Ignite.Core.Impl.PlatformJniTarget.InStreamOutLong[TR](Int32 type, Action`1 outAction, Func`3 inAction, Func`2 readErrorAction)
at Apache.Ignite.Core.Impl.Cache.CacheImpl`2.Get(TK key)
at server_node.Program.<PutGetComplexTypeAsyncSharedRef>d__2.MoveNext() in C:\Users\user\source\repos\IginteAsyncTest\server-node\server-node\Program.cs:line 62
--- End of stack trace from previous location where exception was thrown ---
at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
at server_node.Program.Main(String[] args) in C:\Users\user\source\repos\IginteAsyncTest\server-node\server-node\Program.cs:line 22
{code}
 

 There are two workarounds:
 # Do not use the same object as key and the value's field.
 # Put data into the cache using the synchronous method.

 

Reproducer is attached: [^Program.cs]

 ",.NET,['platforms'],IGNITE,Bug,Major,2018-06-27 07:02:51,0
13167120,Query cursor is open after INSERT call ,"Ignite ODBC driver returns open cursor for an insert command.

{code}

AddStatusRecord: Adding new record: Query cursor is in open state already., rowNum: 0, columnNum: 0
 SQLGetDiagField: SQLGetDiagField called: 1
 PutString: value: HY010
 SQLGetDiagField: SQLGetDiagField called: 2
 SQLGetDiagRec: SQLGetDiagRec called
 SQLGetDiagRec: SQLGetDiagRec called
 SQLGetDiagRec: SQLGetDiagRec called
 SQLParamOptions: SQLParamOptions called
 SQLBindParameter: SQLBindParameter called: 1, 1, 12
 SQLBindParameter: SQLBindParameter called: 2, 1, 12
 SQLBindParameter: SQLBindParameter called: 3, 1, 12

{code}",cpp,"['odbc', 'platforms', 'sql']",IGNITE,Bug,Major,2018-06-20 09:46:18,3
13166093,CPP Thin: Implement Best Effort Affinity,"Implement Best Effort Affinity.
 
The scenario is following:
1. Thin client connects to one of the node from the user provided address list.
2. When user create instance of CacheClient, thin client requests partition mapping for the cache.
3. Client establishes connections to nodes, which are both in the list, provided by user and in a server node response.
4. When user makes put/get/some other cache operation, thin client makes the best effort to send the request to the node, which stores the data.
5. To update partition mapping, thin client can provide public API, or do it with some timeout. Also, we can add ""miss"" flag to cache operation response, which will indicate, that operation was not local for the server node and which thin client can use to understand, that partition mapping has changed to request server node for an update.",cpp iep-23,['platforms'],IGNITE,New Feature,Major,2018-06-14 12:50:47,3
13165100,Informatica can not connect to a cluster using ODBC driver on Windows,It crashes or returns garbage on attempt to connect to a server node.,odbc,['odbc'],IGNITE,Bug,Major,2018-06-09 11:13:49,3
13164889,Remove\RemoveAll method should not count expired entry as removed.,"We have 2 TCK 1.0 test that are passed due to we have eagerTtl=true by default.
The reason is remove() return true even if an expired entry was removed.
Seems, we have to evict expired entry from cache on remove(), but do not count it as removed.

java.lang.AssertionError
 at org.jsr107.tck.expiry.CacheExpiryTest.expire_whenAccessed(CacheExpiryTest.java:326)

java.lang.AssertionError: expected:<0> but was:<1> at org.jsr107.tck.expiry.CacheExpiryTest.testCacheStatisticsRemoveAll(CacheExpiryTest.java:160)",MakeTeamcityGreenAgain tck test-failure,['cache'],IGNITE,Bug,Major,2018-06-08 09:49:07,1
13164627,.NET: intermittent failures in DataStreamerTest.TestFinalizer test,"{{DataStreamerTest.TsetFinalizer}} constantly fails on some TC agents, while work OK on others. Most likely we have an environmental issue.

OK:
# publicagent01_03_9090
# publicagent02_02_9090

Not OK:
# publicagent01_01_9090
# publicagent01_02_9090
# publicagent02_01_9090
# publicagent02_03_9090

Quick comparison of agent's configuration reveals only one difference - version of PowerShell. On ""good"" machines it is {{5.1.16299.15}}, on ""bad"" machines it is {{5.1.17134.1}}.
PowerShell is essential part of build infrastructure so chances that some incorrect dependencies are linked at some point. I am not sure that this might be the root cause of failures, but at the very least we can try.

Let's downgrade PowerShell on one of affected machines and see if it works.",MakeTeamcityGreenAgain,['platforms'],IGNITE,Task,Major,2018-06-07 08:03:47,0
13164401,Documentation about using of the C++ BinaryWriter/BinaryReader should be updated,"The usage that should be documented:

1)In case if you get some writer from BinaryWriter then you started writing session. Until method close will not be called for this writer you can't get another writer. 
  
 For example, next code isn't correct:
{code:java}
BinaryMapWriter<int64_t, int64_t> field1Writer = writer.WriteMap<int64_t, int64_t>(""field1"", MapType::HASH_MAP); //here you start writing session
BinaryMapWriter<int64_t, int64_t> field2Writer = writer.WriteMap<int64_t, int64_t>(""field2"", MapType::HASH_MAP); //here you start another writing session - error

{code}
Should be:
  
{code:java}
BinaryMapWriter<int64_t, int64_t> field1Writer = writer.WriteMap<int64_t, int64_t>(""field1"", MapType::HASH_MAP); //here you start writing session

//do something

field1Writer.Close() //here you end writing session

BinaryMapWriter<int64_t, int64_t> field2Writer = writer.WriteMap<int64_t, int64_t>(""field2"", MapType::HASH_MAP); //here you start another writing session

//do something

field2Writer.Close() //here you end another writing session
{code}
 
 2) In case if you get some reader from BinaryWriter then you started reading session. Until something will not be read from this reader you can't get another reader. 
  
 For example, next code isn't correct:
  
{code:java}
BinaryMapReader<int64_t, int64_t> field1Reader = reader.ReadMap<int64_t, int64_t>(""field1""); //start reading session
BinaryMapReader<int64_t, int64_t> field2Reader = reader.ReadMap<int64_t, int64_t>(""field2""); //start another read session - error

{code}
Should be for example:
{code:java}
BinaryMapReader<int64_t, int64_t> field1Reader = reader.ReadMap<int64_t, int64_t>(""field1""); //start reading session

...
field1Reader.GetNext(key, val);  //reading done
...

BinaryMapReader<int64_t, int64_t> field2Reader = reader.ReadMap<int64_t, int64_t>(""field2""); //start another read session

...
field2Reader.GetNext(key, val);  //reading done
...{code}
 
  
  
 In the case of the writer, it looks like expected. In case of the reader, it looks a little bit confusing.
  
 These two behaviors should be described in the documentation as well.",c++,['documentation'],IGNITE,Improvement,Major,2018-06-06 08:56:05,3
13163452,Using ExpiryPolicy with persistence causes significant slowdown.,"Almost all ignite operations calls CU.unwindEvicts() on finish to help to evict expired entries.
In unwindEvicts(), threads iterate over all node partitions and check every partition PendingTree for expired entries. This costs too much.

We already have a flag on per-cachegroup basis that indicated ExpiryPolicy is used. It raised once expiring entry has been put to cache or we initialize non-empty pending tree from persistence.
So, we have to optimize a case when there is no expired pending entries, but pending tree is non-empty.


We can add some throttling on per-partition basis to reduce useless pending tree lookups. 
E.g. if there is nothing to clean, no thread should check partition during next 100ms interval.",performance,['cache'],IGNITE,Improvement,Critical,2018-06-01 14:24:27,1
13163238,Fix flacky test  PdsWithTtlCompatibilityTest.testNodeStartByOldVersionPersistenceData_2_1,"Looks like 2.1 node that is started in separate JVM, fails with OOM.

 ",MakeTeamcityGreenAgain,[],IGNITE,Test,Minor,2018-05-31 18:32:48,1
13161695,SQL: Sort links on index pages in physical page order before row access,"When index page match condition, we eagerly read all matched data rows. This leads to a number of random disk reads.as Ignite use heap-organized storage. We can pre-sort all matched row links in accordance to their physical location, and then read them in batch. This will give us two important advantages:
1) Data reads will be more sequential, this is especially important for HDDs
2) This could decrease number of page reads in case of dense data placement, because there will be less evictions.

In future we should expand this optimization to several index pages in the same way it is done in major databases. ",performance,['sql'],IGNITE,Task,Major,2018-05-24 08:21:38,4
13159467,Fix wrong GridCacheMapEntry startVersion initialization.,"GridCacheMapEntry initialize startVersion in wrong way.
This leads to IgnitePdsWithTtlTest.testTtlIsAppliedAfterRestart failure and reason is ""Entry which should be expired by TTL policy is available after grid restart.""

 

Test was added during https://issues.apache.org/jira/browse/IGNITE-5874 development.

This test restarts grid and checks all entries are not present in grid.

But with high possiblity one from 7000 entries to be expired is resurrected instead and returned by cache get.
{noformat}
After timeout {{
>>> 
>>> Cache memory stats [igniteInstanceName=db.IgnitePdsWithTtlTest0, cache=expirableCache]
>>>  Cache size: 0
>>>  Cache partition topology stats [igniteInstanceName=db.IgnitePdsWithTtlTest0, grp=group1]
>>> 
>>> Cache event manager memory stats [igniteInstanceName=db.IgnitePdsWithTtlTest0, cache=expirableCache, stats=N/A]
>>>
>>> Query manager memory stats [igniteInstanceName=db.IgnitePdsWithTtlTest0, cache=expirableCache]
>>>   threadsSize: 0
>>>   futsSize: 0
>>>
>>> TTL processor memory stats [igniteInstanceName=db.IgnitePdsWithTtlTest0, cache=expirableCache]
>>>   pendingEntriesSize: 0
}} After timeout
{noformat}
[https://ci.ignite.apache.org/project.html?projectId=IgniteTests24Java8&testNameId=5798755758125626876&tab=testDetails&branch_IgniteTests24Java8=%3Cdefault%3E]",MakeTeamcityGreenAgain Muted_test tck,"['cache', 'persistence']",IGNITE,Improvement,Major,2018-05-15 16:55:37,1
13159369,CPP Thin: Implement Thin CPP client,We need a thin client for C++.,cpp,['platforms'],IGNITE,New Feature,Major,2018-05-15 10:30:52,3
13158511,Adding and searching UUIDs in index tree produces a lot of garbage,"Seems, optimization for UUIDs was missed in IGNITE-5918.
PFA patch.",performance,['sql'],IGNITE,Improvement,Major,2018-05-10 16:11:32,1
13157587,.NET: DataStreamer.perThreadBufferSize ,"Need to add support of DataStreamer#perThreadBuffer property.
It was added in IGNITE-6699.

Related failed test - DataStreamerTest.TestBufferSize

https://ci.ignite.apache.org/project.html?projectId=IgniteTests24Java8&testNameId=-7699185391938208048&branch=%3Cdefault%3E&tab=testDetails",.NET MakeTeamcityGreenAgain,['platforms'],IGNITE,Bug,Major,2018-05-07 13:38:12,2
13157063,.NET: Service proxies do not work on .NET Core,"Service proxies do not work on .NET Core because of conditional compilation in {{ServiceProxyTypeGenerator}}.

We only compile for a single target, so {{NETCOREAPP2_0}} branch is never used.
Except in tests, so they pass.",.NET,['platforms'],IGNITE,Bug,Major,2018-05-04 06:59:41,0
13155714,CacheGroupMetricsMBeanTest.testCacheGroupMetrics fails on master.,"CacheGroupMetricsMBeanTest.testCacheGroupMetrics fails due to a race.
Seems, we should pause rebalance to see expected instant metrics.


{code:java}
junit.framework.AssertionFailedError
 at junit.framework.Assert.fail(Assert.java:55)
 at junit.framework.Assert.assertTrue(Assert.java:22)
 at junit.framework.Assert.assertTrue(Assert.java:31)
 at junit.framework.TestCase.assertTrue(TestCase.java:201)
 at org.apache.ignite.internal.processors.cache.CacheGroupMetricsMBeanTest.testCacheGroupMetrics(CacheGroupMetricsMBeanTest.java:262)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at junit.framework.TestCase.runTest(TestCase.java:176)
 at org.apache.ignite.testframework.junits.GridAbstractTest.runTestInternal(GridAbstractTest.java:2080)
 at org.apache.ignite.testframework.junits.GridAbstractTest.access$000(GridAbstractTest.java:140)
 at org.apache.ignite.testframework.junits.GridAbstractTest$5.run(GridAbstractTest.java:1995)
 at java.lang.Thread.run(Thread.java:748){code}",MakeTeamcityGreenAgain,[],IGNITE,Test,Minor,2018-04-27 13:53:10,1
13155361,ODBC: Can not establish SSL connection to remote host.,"Driver connects to the local server, but when connecting to remote server client sometimes returns error when trying to establish async connection, though the connection established successfully, if the error is ignored.",odbc ssl tls,['odbc'],IGNITE,Bug,Major,2018-04-26 10:31:36,3
13153767,.NET: Thin client: Run in browser with Blazor,"Blazor runs .NET IL code in browser with WebAssembly.

Investigate if we can make Ignite.NET thin client run there.",.NET,['platforms'],IGNITE,Task,Trivial,2018-04-19 16:50:42,0
13153344,CPP: Remove strong dependency on Boost 1.58.0,"Currently, tests for C++ client and ODBC depend on the Boost 1.58.0. There is a strong dependency on the exact version, which causes troubles for the developers and which should not be there from the very beginning as we do not really need some features from this particular version.",boost cpp odbc,"['odbc', 'platforms']",IGNITE,Improvement,Major,2018-04-18 13:28:25,3
13152354,TDE - Encryption/Decryption of pages,"When data for an encrypted cache are written to the persistence store. 
Data page should be encrypted through configured encryption provider. 

* Encryption/decryption should be implemented",IEP-18,[],IGNITE,Sub-task,Major,2018-04-13 17:30:35,2
13152090,.NET: Use default scheduler when starting Tasks,"Default scheduler should be specified explicitly when starting new tasks to avoid deadlocks: http://blog.stephencleary.com/2013/10/continuewith-is-dangerous-too.html

This applies to {{StartNew}}, {{ConyinueWith}}, etc.",.NET,['platforms'],IGNITE,Bug,Major,2018-04-12 21:17:43,0
13151489,.NET: Invalid cast to CacheEvent,"Subscribed to all events

config.IncludedEventTypes = EventType.All;
ignite = Ignition.Start(config);
 var events = ignite.GetEvents();
 var listener = new CacheEventListener();
 events.LocalListen(listener, EventType.All);

and got exceptions:

[23:56:22 ERR] Failure in Java callback
System.InvalidCastException: Unable to cast object of type 'Apache.Ignite.Core.Events.CacheQueryExecutedEvent' to type 'Apache.Ignite.Core.Events.CacheEvent'.
 at Apache.Ignite.Core.Events.EventReader.Read[T](BinaryReader reader)
 at Apache.Ignite.Core.Impl.Events.Events.InvokeLocalListener[T](IBinaryStream stream, IEventListener`1 listener)
 at Apache.Ignite.Core.Impl.Events.Events.LocalHandledEventFilter.Invoke(IBinaryStream stream)
 at Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.EventFilterApply(Int64 ptr, Int64 memPtr, Int64 unused, Void* arg)
 at Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongLongLongObjectOutLong(Void* target, Int32 type, Int64 val1, Int64 val2, Int64 val3, Void* arg)
[23:56:22 ERR] Failure in Java callback
System.InvalidCastException: Unable to cast object of type 'Apache.Ignite.Core.Events.CacheQueryExecutedEvent' to type 'Apache.Ignite.Core.Events.CacheEvent'.
 at Apache.Ignite.Core.Events.EventReader.Read[T](BinaryReader reader)
 at Apache.Ignite.Core.Impl.Events.Events.InvokeLocalListener[T](IBinaryStream stream, IEventListener`1 listener)
 at Apache.Ignite.Core.Impl.Events.Events.LocalHandledEventFilter.Invoke(IBinaryStream stream)
 at Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.EventFilterApply(Int64 ptr, Int64 memPtr, Int64 unused, Void* arg)
 at Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongLongLongObjectOutLong(Void* target, Int32 type, Int64 val1, Int64 val2, Int64 val3, Void* arg)
[23:56:22 ERR] Failure in Java callback
System.InvalidCastException: Unable to cast object of type 'Apache.Ignite.Core.Events.DiscoveryEvent' to type 'Apache.Ignite.Core.Events.CacheEvent'.
 at Apache.Ignite.Core.Events.EventReader.Read[T](BinaryReader reader)
 at Apache.Ignite.Core.Impl.Events.Events.InvokeLocalListener[T](IBinaryStream stream, IEventListener`1 listener)
 at Apache.Ignite.Core.Impl.Events.Events.LocalHandledEventFilter.Invoke(IBinaryStream stream)
 at Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.EventFilterApply(Int64 ptr, Int64 memPtr, Int64 unused, Void* arg)
 at Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.InLongLongLongObjectOutLong(Void* target, Int32 type, Int64 val1, Int64 val2, Int64 val3, Void* arg)
[23:56:22 ERR] Unexpected exception in listener notification for event: CacheQueryExecutedEvent [qryType=SCAN, cacheName=ignite-sys-cache, clsName=null, clause=null, scanQryFilter=ServiceAssignmentsPredicate [], contQryFilter=null, args=null, subjId=782e4d31-f4c5-4bea-a9fb-0f2e4d6b602f, taskName=null, nodeId8=782e4d31, msg=Scan query executed., type=CACHE_QUERY_EXECUTED, tstamp=1523393782062]
[23:56:23 ERR] Unexpected exception in listener notification for event: CacheQueryExecutedEvent [qryType=CONTINUOUS, cacheName=Authorization, clsName=null, clause=null, scanQryFilter=null, contQryFilter=o.a.i.i.processors.platform.cache.query.PlatformContinuousQueryImpl@1b84f475, args=null, subjId=782e4d31-f4c5-4bea-a9fb-0f2e4d6b602f, taskName=null, nodeId8=782e4d31, msg=Continuous query executed., type=CACHE_QUERY_EXECUTED, tstamp=1523393782095]
[23:56:23 ERR] Unexpected exception in listener notification for event: DiscoveryEvent [evtNode=TcpDiscoveryNode [id=0ee0988a-8364-4560-8215-e1dbe673bcd5, addrs=[0:0:0:0:0:0:0:1, 10.77.6.203, 127.0.0.1, 192.168.2.21], sockAddrs=[WA/192.168.2.21:47500, /10.77.6.203:47500, /0:0:0:0:0:0:0:1:47500, /127.0.0.1:47500], discPort=47500, order=1, intOrder=1, lastExchangeTime=1523393780217, loc=false, ver=2.3.0#20171028-sha1:8add7fd5, isClient=false], topVer=3, nodeId8=782e4d31, msg=Metrics were updated: TcpDiscoveryNode [id=0ee0988a-8364-4560-8215-e1dbe673bcd5, addrs=[0:0:0:0:0:0:0:1, 10.77.6.203, 127.0.0.1, 192.168.2.21], sockAddrs=[WA/192.168.2.21:47500, /10.77.6.203:47500, /0:0:0:0:0:0:0:1:47500, /127.0.0.1:47500], discPort=47500, order=1, intOrder=1, lastExchangeTime=1523393780217, loc=false, ver=2.3.0#20171028-sha1:8add7fd5, isClient=false], type=NODE_METRICS_UPDATED, tstamp=1523393782728]",.NET,['platforms'],IGNITE,Bug,Major,2018-04-10 21:42:01,0
13150343,ODBC driver should check schema on connection start,"We need to add validation of schema in odbc driver.
1) Need to update protocol to send schema with connection start.
2) Forbid empty sql id (\""\"") as sql schema. 
see IGNITE-7743 for details
",newbie,['odbc'],IGNITE,Bug,Minor,2018-04-05 15:35:00,3
13147440,".NET: Add ""authenticationEnabled"" flag to IgniteConfiguration",Need to pass flag added as a part of IGNITE-7436.,MakeTeamcityGreenAgain,['platforms'],IGNITE,Task,Major,2018-03-23 11:22:45,0
13147094,CPP: Check pending snapshots in BinaryTypeManager::GetHandler,"This will improve performance a lot, when using operations like {{PutAll()}}",cpp,['platforms'],IGNITE,Improvement,Major,2018-03-22 09:14:11,3
13147092,CPP: BinaryWriter::WriteElement should accept const reference instead of value.,This will improve performance in case when large objects are used.,cpp,['platforms'],IGNITE,Improvement,Major,2018-03-22 09:11:18,3
13145102,TestDistributedJoins fails in CPP Win32 suite,"https://ci.ignite.apache.org/project.html?projectId=IgniteTests24Java8&testNameId=4177000054190398412&branch=%3Cdefault%3E&tab=testDetails

   Ignite Platform CPP Win32 [ tests 1 TC_EXIT_CODE ]  
      IgniteOdbcTest: QueriesTestSuite: TestDistributedJoins (fail rate 9,8%) 

{noformat}
check env != 0 passed
check dbc != 0 passed
check stmt != 0 passed
check rowsNum > 0 passed
check rowsNum < entriesNum passed
check env != 0 passed
check dbc != 0 passed
check stmt != 0 passed
check rowsNum == entriesNum failed [2565 != 1000]
{noformat}",MakeTeamcityGreenAgain,['platforms'],IGNITE,Task,Major,2018-03-14 17:17:48,3
13140934,ODBC: Implement connection failover,"Currently user has to manually connect to some specific Ignite server.
Implement some kind of automatic failover where ODBC driver knows about multiple nodes.",odbc,['odbc'],IGNITE,New Feature,Major,2018-02-26 14:59:47,3
13139625,Ignite CPP tests win32 failure,"https://ci.ignite.apache.org/viewType.html?buildTypeId=IgniteTests24Java8_IgnitePlatformCppWin32
 
aborted
std::exception: Failed to load JVM library.",MakeTeamcityGreenAgain Muted_test,[],IGNITE,Task,Critical,2018-02-20 10:24:48,3
13139518,Streamer fails if IgniteUuid is indexed,"IgniteDataStreamer are failed to put data to the cache if IgniteUuid is IndexedType.

Spark tests in IGNITE-7227 are failed because of this issue.

Reproducer:

{code:java}
    public void testStreamer() throws Exception {
        Ignite client = grid(""client"");

        CacheConfiguration ccfg = new CacheConfiguration(""UUID_CACHE"");

        ccfg.setIndexedTypes(IgniteUuid.class, String.class);

        client.createCache(ccfg);

        try(IgniteDataStreamer<IgniteUuid, String> cache =
                client.dataStreamer(""UUID_CACHE"")) {

            for(Integer i=0; i<2; i++)
                cache.addData(IgniteUuid.randomUuid(), i.toString());
        }
    }
{code}

Exception stack trace:

{noformat}
[23:43:35] (err) Failed to execute compound future reducer: GridCompoundFuture [rdc=null, initFlag=1, lsnrCalls=0, done=false, cancelled=false, err=null, futs=[true, true]][23:43:35] (err) Failed to execute compound future reducer: GridCompoundFuture [rdc=null, initFlag=1, lsnrCalls=0, done=false, cancelled=false, err=null, futs=[true, true]]class org.apache.ignite.IgniteCheckedException: DataStreamer request failed [node=57961924-82ec-4d56-81eb-1a4109a00000]
	at org.apache.ignite.internal.processors.datastreamer.DataStreamerImpl$Buffer.onResponse(DataStreamerImpl.java:1900)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamerImpl$3.onMessage(DataStreamerImpl.java:344)
	at org.apache.ignite.internal.managers.communication.GridIoManager.invokeListener(GridIoManager.java:1554)
	at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:1182)
	at org.apache.ignite.internal.managers.communication.GridIoManager.access$4200(GridIoManager.java:125)
	at org.apache.ignite.internal.managers.communication.GridIoManager$9.run(GridIoManager.java:1089)
	at org.apache.ignite.internal.util.StripedExecutor$Stripe.run(StripedExecutor.java:499)
	at java.lang.Thread.run(Thread.java:748)
Caused by: class org.apache.ignite.IgniteException: Failed to set initial value for cache entry
	at org.apache.ignite.internal.processors.datastreamer.DataStreamerImpl$IsolatedUpdater.receive(DataStreamerImpl.java:2135)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamerUpdateJob.call(DataStreamerUpdateJob.java:140)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamProcessor.localUpdate(DataStreamProcessor.java:397)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamProcessor.processRequest(DataStreamProcessor.java:302)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamProcessor.access$000(DataStreamProcessor.java:59)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamProcessor$1.onMessage(DataStreamProcessor.java:89)
	... 6 more
Caused by: class org.apache.ignite.IgniteCheckedException: Failed to update index, incorrect key class [expCls=org.apache.ignite.lang.IgniteUuid, actualCls=org.apache.ignite.internal.binary.BinaryObjectImpl]
	at org.apache.ignite.internal.processors.query.GridQueryProcessor.typeByValue(GridQueryProcessor.java:1954)
	at org.apache.ignite.internal.processors.query.GridQueryProcessor.store(GridQueryProcessor.java:1877)
	at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.store(GridCacheQueryManager.java:403)
	at org.apache.ignite.internal.processors.cache.IgniteCacheOffheapManagerImpl$CacheDataStoreImpl.finishUpdate(IgniteCacheOffheapManagerImpl.java:1343)
	at org.apache.ignite.internal.processors.cache.IgniteCacheOffheapManagerImpl$CacheDataStoreImpl.invoke(IgniteCacheOffheapManagerImpl.java:1207)
	at org.apache.ignite.internal.processors.cache.IgniteCacheOffheapManagerImpl.invoke(IgniteCacheOffheapManagerImpl.java:345)
	at org.apache.ignite.internal.processors.cache.GridCacheMapEntry.storeValue(GridCacheMapEntry.java:3527)
	at org.apache.ignite.internal.processors.cache.GridCacheMapEntry.initialValue(GridCacheMapEntry.java:2735)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamerImpl$IsolatedUpdater.receive(DataStreamerImpl.java:2113)
	... 11 more
class org.apache.ignite.IgniteCheckedException: DataStreamer request failed [node=57961924-82ec-4d56-81eb-1a4109a00000]
	at org.apache.ignite.internal.processors.datastreamer.DataStreamerImpl$Buffer.onResponse(DataStreamerImpl.java:1900)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamerImpl$3.onMessage(DataStreamerImpl.java:344)
	at org.apache.ignite.internal.managers.communication.GridIoManager.invokeListener(GridIoManager.java:1554)
	at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:1182)
	at org.apache.ignite.internal.managers.communication.GridIoManager.access$4200(GridIoManager.java:125)
	at org.apache.ignite.internal.managers.communication.GridIoManager$9.run(GridIoManager.java:1089)
	at org.apache.ignite.internal.util.StripedExecutor$Stripe.run(StripedExecutor.java:499)
	at java.lang.Thread.run(Thread.java:748)
Caused by: class org.apache.ignite.IgniteException: Failed to set initial value for cache entry
	at org.apache.ignite.internal.processors.datastreamer.DataStreamerImpl$IsolatedUpdater.receive(DataStreamerImpl.java:2135)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamerUpdateJob.call(DataStreamerUpdateJob.java:140)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamProcessor.localUpdate(DataStreamProcessor.java:397)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamProcessor.processRequest(DataStreamProcessor.java:302)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamProcessor.access$000(DataStreamProcessor.java:59)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamProcessor$1.onMessage(DataStreamProcessor.java:89)
	... 6 more
Caused by: class org.apache.ignite.IgniteCheckedException: Failed to update index, incorrect key class [expCls=org.apache.ignite.lang.IgniteUuid, actualCls=org.apache.ignite.internal.binary.BinaryObjectImpl]
	at org.apache.ignite.internal.processors.query.GridQueryProcessor.typeByValue(GridQueryProcessor.java:1954)
	at org.apache.ignite.internal.processors.query.GridQueryProcessor.store(GridQueryProcessor.java:1877)
	at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.store(GridCacheQueryManager.java:403)
	at org.apache.ignite.internal.processors.cache.IgniteCacheOffheapManagerImpl$CacheDataStoreImpl.finishUpdate(IgniteCacheOffheapManagerImpl.java:1343)
	at org.apache.ignite.internal.processors.cache.IgniteCacheOffheapManagerImpl$CacheDataStoreImpl.invoke(IgniteCacheOffheapManagerImpl.java:1207)
	at org.apache.ignite.internal.processors.cache.IgniteCacheOffheapManagerImpl.invoke(IgniteCacheOffheapManagerImpl.java:345)
	at org.apache.ignite.internal.processors.cache.GridCacheMapEntry.storeValue(GridCacheMapEntry.java:3527)
	at org.apache.ignite.internal.processors.cache.GridCacheMapEntry.initialValue(GridCacheMapEntry.java:2735)
	at org.apache.ignite.internal.processors.datastreamer.DataStreamerImpl$IsolatedUpdater.receive(DataStreamerImpl.java:2113)
	... 11 more
{noformat}",MakeTeamcityGreenAgain,['streaming'],IGNITE,Bug,Minor,2018-02-19 20:44:28,2
13138968,IgniteRDDSpec. Failing tests,"Two spark tests are broken.
Need to fix it.

1. IgniteRDDSpec.IgniteRDD should successfully store data to ignite using saveValues  
2. IgniteRDDSpec.IgniteRDD should successfully store data to ignite using saveValues with inline transformation",MakeTeamcityGreenAgain,['spark'],IGNITE,Bug,Major,2018-02-16 04:32:06,2
13137557,.NET: Target .NET Standard 2.0,"As explained in IGNITE-2662 and https://apacheignite-net.readme.io/v2.4/docs/cross-platform-support, our projects/assemblies still target .NET 4.0.

This simplifies build/release procedures, but has issues:
* Ignite.NET *can't be used from .NET Standard 2.0 libraries* (big one)
* Warning is displayed
* Incompatible API usages may sneak in despite tests

We should target {{netstandard2.0}} as well as .NET 4. Release package should contain two set of assemblies.",.NET xplat,['platforms'],IGNITE,Improvement,Major,2018-02-09 22:09:03,0
13136231,Thin client Java API - async API,"Implement Async version of all the Java thin client APIs:
* Cache
* Compute
* IgniteClient (applicable methods like createCache, destroyCache)",data important java thin,['clients'],IGNITE,Improvement,Major,2018-02-05 10:01:50,0
13134697,.NET: Build scripts: stop build when one of the steps fails,"We have multiple build scripts for various platforms:
* {{build.bat}} / {{build.ps1}} (Windows)
* {{build.sh}} (.NET Core Linux / macOS)
* {{build-mono.sh}} (Mono Linux / macOS)

Make sure that we stop build scripts execution when one of the steps fails.
For example, if Java build fails, we should show an error and stop instead of continuing to build .NET.",.NET,['platforms'],IGNITE,Improvement,Major,2018-01-30 09:22:07,0
13134557,.NET: Service proxy as dynamic object,"Currently we require user to provide an interface to interact with .NET and Java services.

We could also provide a dynamic API (based on {{dynamic}} keyword) like this:

{code}
IServices services = ignite.GetServices();
dynamic prx = services.GetDynamicServiceProxy(""someService"");
prx.Foo();
prx.Bar = 1;
{code}",.NET,['platforms'],IGNITE,Improvement,Major,2018-01-29 20:56:50,0
13133656,.NET: Poor performance & excessive memory usage in GetAll and query cursors in binary mode,"{{GetAll}} and query cursors do not use {{BinaryReader.DetachNext}}. So in binary mode for each binary object in a stream we copy entire stream content, see {{BinaryReader.ReadAsBinary}}, which calls {{Stream.GetArray()}}, which causes copying in {{PlatformMemoryStream}}.",.NET,['platforms'],IGNITE,Bug,Major,2018-01-25 11:40:02,0
13132941,.NET: Propagate WAL management API,"Add the following methods to .NET:
{code}
ICluster.disableWal member is missing in .NET.
ICluster.enableWal member is missing in .NET.
ICluster.isWalEnabled member is missing in .NET.
{code}",.NET,['platforms'],IGNITE,Task,Major,2018-01-23 07:20:16,0
13132176,Ignite.NET does not work on Java 9,"Ignite.NET does not work properly on Java 9 (IGNITE-6730).
Some additional JVM settings are required:

{code}
--add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/sun.nio.ch=ALL-UNNAMED --add-exports java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED --add-exports jdk.internal.jvmstat/sun.jvmstat.monitor=ALL-UNNAMED
{code}",.NET,['platforms'],IGNITE,Bug,Major,2018-01-19 13:05:51,0
13132135,".NET: ""Could not load file or assembly ConfigurationManager"" error on Linux","Steps to reproduce:

{code}
dotnet new console
dotnet add package Apache.Ignite
nano Program.cs  # Add Ignition.Start() line and a namespace import
dotnet run
{code}

Error:
{code}
Unhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Configuration.ConfigurationManager, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specified.
{code}

Works on Windows, does not work on Linux.
{{<PackageReference Include=""System.Configuration.ConfigurationManager"" Version=""4.4.0"" />}} is required to fix the issue.

However, {{ConfigurationManager}} is not necessary for code configuration, we should be able to start without it.",.NET xplat,['platforms'],IGNITE,Bug,Major,2018-01-19 10:23:05,0
13131842,.NET: SqlDdlExample fails with standalone node,"Exception on query:

{code}
Caches have distinct sets of data nodes [cache1=dummy_cache, cache2=SQL_PUBLIC_PERSON]
  ----> Apache.Ignite.Core.Common.JavaException : javax.cache.CacheException: Caches have distinct sets of data nodes [cache1=dummy_cache, cache2=SQL_PUBLIC_PERSON]
	at org.apache.ignite.internal.processors.query.h2.twostep.GridReduceQueryExecutor.stableDataNodes(GridReduceQueryExecutor.java:499)
	at org.apache.ignite.internal.processors.query.h2.twostep.GridReduceQueryExecutor.nodesForPartitions(GridReduceQueryExecutor.java:1486)
	at org.apache.ignite.internal.processors.query.h2.twostep.GridReduceQueryExecutor.query(GridReduceQueryExecutor.java:591)
	at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing$8.iterator(IgniteH2Indexing.java:1283)
	at org.apache.ignite.internal.processors.cache.QueryCursorImpl.iterator(QueryCursorImpl.java:95)
	at org.apache.ignite.internal.processors.platform.cache.query.PlatformAbstractQueryCursor.processInLongOutLong(PlatformAbstractQueryCursor.java:147)
	at org.apache.ignite.internal.processors.platform.PlatformTargetProxyImpl.inLongOutLong(PlatformTargetProxyImpl.java:55)


   at Apache.Ignite.Core.Impl.PlatformJniTarget.InLongOutLong(Int32 type, Int64 val) in C:\w\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\PlatformJniTarget.cs:line 379
   at Apache.Ignite.Core.Impl.Cache.Query.PlatformQueryQursorBase`1.InitIterator() in C:\w\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Cache\Query\PlatformQueryQursorBase.cs:line 74
   at Apache.Ignite.Core.Impl.Cache.Query.QueryCursorBase`1.GetEnumerator() in C:\w\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Cache\Query\QueryCursorBase.cs:line 125
   at Apache.Ignite.Examples.Sql.SqlDdlExample.Main() in C:\w\incubator-ignite\modules\platforms\dotnet\examples\Apache.Ignite.Examples\Sql\SqlDdlExample.cs:line 95
   at Apache.Ignite.Core.Tests.Examples.Example.Run() in C:\w\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core.Tests\Examples\Example.cs:line 52
   at Apache.Ignite.Core.Tests.Examples.ExamplesTest.TestRemoteNodes(Example example, Boolean clientMode) in C:\w\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core.Tests\Examples\ExamplesTest.cs:line 131
   at Apache.Ignite.Core.Tests.Examples.ExamplesTest.TestRemoteNodes(Example example) in C:\w\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core.Tests\Examples\ExamplesTest.cs:line 99
{code}",.NET,['platforms'],IGNITE,Bug,Major,2018-01-18 10:41:17,0
13131804,.NET: Thin client: OP_BINARY_TYPE_GET uses writeIntArray for schemas,"OP_BINARY_TYPE_GET uses writeIntArray for schemas, which is not consistent with OP_BINARY_TYPE_PUT.

Make sure to fix the spec and readme.io doc.",.NET,"['platforms', 'thin client']",IGNITE,Bug,Major,2018-01-18 06:33:11,0
13131027,SqlDmlExample: Incorrect result for Delete if run with standalone nodes (Java & .NET),"Datagrid.QueryDmlExample: Incorrect result for Delete if run with standalone nodes
 

without standalone nodes:

{code}
>>> Delete non-ASF employees 
>>> 1: John Doe, ASF, 4400 
>>> 2: Jane Roe, ASF, 5500
{code}
 

with standalone nodes:

{code}
>>> Delete non-ASF employees 
>>> 1: John Doe, ASF, 4400
>>> 4: Richard Miles, Eclipse, 3000 
>>> 2: Jane Roe, ASF, 5500
{code}",.NET,['platforms'],IGNITE,Bug,Minor,2018-01-15 13:28:45,0
13130539,.NET: Thin client: NullRefException on connection to arbitrary server,"Reproducer:

{code}
var cfg = new IgniteClientConfiguration { Host = ""ya.ru"", Port=80 };
var client = Ignition.StartClient(cfg);
{code}

Result:
{code}
Object reference not set to an instance of an object.
at Apache.Ignite.Core.Impl.Client.ClientSocket.Dispose()
   at Apache.Ignite.Core.Impl.Client.ClientSocket.ReceiveBytes(Int32 size)
   at Apache.Ignite.Core.Impl.Client.ClientSocket.Handshake(ClientProtocolVersion version)
   at Apache.Ignite.Core.Impl.Client.ClientSocket..ctor(IgniteClientConfiguration clientConfiguration, Nullable`1 version)
   at Apache.Ignite.Core.Impl.Client.IgniteClient..ctor(IgniteClientConfiguration clientConfiguration)
   at Apache.Ignite.Core.Ignition.StartClient(IgniteClientConfiguration clientConfiguration)
{code}",.NET,"['platforms', 'thin client']",IGNITE,Bug,Major,2018-01-12 14:29:45,0
13130200,.NET: Use InternalsVisibleTo for Core projects,"We can use {{#if}} condition and add {{InternalsVisibleTo}} attribute for .NET Core tests.
This will allow us to include more tests in .NET Core project and get rid of reflection in {{TestUtils}}.",.NET,['platforms'],IGNITE,Improvement,Major,2018-01-11 13:48:36,0
13127520,.NET: Thin client: SSL,Allow secure .NET thin client connection.,.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-12-28 12:47:39,0
13127106,.NET: Cluster auto activation (baseline topology),"Add auto activation related APIs to .NET, see https://cwiki.apache.org/confluence/display/IGNITE/IEP-4+Baseline+topology+for+caches",.NET IEP-4 Phase-1,['platforms'],IGNITE,Improvement,Major,2017-12-25 12:37:11,0
13126988,"""BinaryObjectException: Cannot find schema for object with compact footer"" when ""not null"" field is defined","If the following test:

org.apache.ignite.internal.processors.cache.index.H2DynamicTableSelfTest#testAffinityKey

is modified by adding ""not null"" constraint to ""age"" column definition in Person2 table:

{noformat}
                execute(""CREATE TABLE \""Person2\"" (\""id\"" int, \""city\"" varchar,"" +
                    "" \""name\"" varchar, \""surname\"" varchar, \""age\"" int not null, PRIMARY KEY (\""id\"", \""city\"")) WITH "" +
                    ""wrap_key,wrap_value,\""template=cache,affinity_key='city'\"""");}}
{noformat}

The test fails with the following stack trace during INSERT operation:

{noformat}
class org.apache.ignite.binary.BinaryObjectException: Cannot find schema for object with compact footer [typeId=-1199546406, schemaId=0]

	at org.apache.ignite.internal.binary.BinaryReaderExImpl.getOrCreateSchema(BinaryReaderExImpl.java:2020)
	at org.apache.ignite.internal.binary.BinaryObjectImpl.createSchema(BinaryObjectImpl.java:668)
	at org.apache.ignite.internal.binary.BinaryFieldImpl.fieldOrder(BinaryFieldImpl.java:284)
	at org.apache.ignite.internal.binary.BinaryFieldImpl.value(BinaryFieldImpl.java:106)
	at org.apache.ignite.internal.processors.query.property.QueryBinaryProperty.fieldValue(QueryBinaryProperty.java:243)
	at org.apache.ignite.internal.processors.query.property.QueryBinaryProperty.value(QueryBinaryProperty.java:139)
	at org.apache.ignite.internal.processors.query.QueryTypeDescriptorImpl.validateKeyAndValue(QueryTypeDescriptorImpl.java:512)
	at org.apache.ignite.internal.processors.query.h2.DmlStatementsProcessor.rowToKeyValue(DmlStatementsProcessor.java:1031)
	at org.apache.ignite.internal.processors.query.h2.DmlStatementsProcessor.doInsert(DmlStatementsProcessor.java:877)
	at org.apache.ignite.internal.processors.query.h2.DmlStatementsProcessor.processDmlSelectResult(DmlStatementsProcessor.java:438)
	at org.apache.ignite.internal.processors.query.h2.DmlStatementsProcessor.executeUpdateStatement(DmlStatementsProcessor.java:420)
	at org.apache.ignite.internal.processors.query.h2.DmlStatementsProcessor.updateSqlFields(DmlStatementsProcessor.java:194)
	at org.apache.ignite.internal.processors.query.h2.DmlStatementsProcessor.updateSqlFieldsDistributed(DmlStatementsProcessor.java:229)
	at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.queryDistributedSqlFields(IgniteH2Indexing.java:1568)
	at org.apache.ignite.internal.processors.query.GridQueryProcessor$6.applyx(GridQueryProcessor.java:1983)
	at org.apache.ignite.internal.processors.query.GridQueryProcessor$6.applyx(GridQueryProcessor.java:1979)
	at org.apache.ignite.internal.util.lang.IgniteOutClosureX.apply(IgniteOutClosureX.java:36)
	at org.apache.ignite.internal.processors.query.GridQueryProcessor.executeQuery(GridQueryProcessor.java:2465)
	at org.apache.ignite.internal.processors.query.GridQueryProcessor.querySqlFieldsNoCache(GridQueryProcessor.java:1988)
	at org.apache.ignite.internal.processors.query.GridQueryProcessor.querySqlFieldsNoCache(GridQueryProcessor.java:1944)
	at org.apache.ignite.internal.processors.cache.index.H2DynamicTableSelfTest.checkAffinityKey(H2DynamicTableSelfTest.java:1375)
	at org.apache.ignite.internal.processors.cache.index.H2DynamicTableSelfTest.testAffinityKey(H2DynamicTableSelfTest.java:1318)
{noformat}",sql-stability,"['binary', 'sql']",IGNITE,Bug,Major,2017-12-23 18:18:22,4
13126541,.NET: Thin client: Failover,"Currently user has to manually connect to some specific Ignite server.
Implement some kind of automatic failover where Thin Client knows about multiple nodes.",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-12-21 12:28:24,0
13126525,.NET: Compile on Linux,"Make it possible to develop Ignite.NET on Linux.
* Provide separate .NET Core csproj files for {{Core}} and {{Linq}} projects
* Make sure we can compile and run tests from scratch on Linux ({{git clone}} -> {{dotnet test}})
* Update DEVNOTES",.NET xplat,['platforms'],IGNITE,Improvement,Major,2017-12-21 11:04:55,0
13125626,".NET: remove localhost=""127.0.0.1"" from App.config to run cross-platform .NET examples with standalone node","need to remove localhost=""127.0.0.1"" from App.config to run cross-platform .NET examples with standalone node with default config",.NET,['platforms'],IGNITE,Bug,Major,2017-12-18 13:19:08,0
13125581,".NET: Rename ICache.QueryFields to Query, add FieldNames","Currently some queries share a single method, while others use a different name.
Rename {{QueryFields}} to {{Query}} to have a more consistent API.
Leave {{QueryContinuous}} as is because it is very different semantically (like an event subscription).
Keep old methods and mark them with {{[Obsolete]}}.

* {{ICacheClient}} uses same method name for all queries
* {{IgniteCache}} in Java uses same method name for all queries
",.NET,['platforms'],IGNITE,Improvement,Major,2017-12-18 10:20:17,0
13123395,.NET: IndexesAllocatedPages metrics,"New JMX metric implemented in IGNITE-6903.
We need to add support for this metric to .Net ",.NET iep-6,['platforms'],IGNITE,Sub-task,Major,2017-12-07 08:49:12,0
13123202,.NET: Thin client: Cache benchmark,"Add a benchmark to see how thin client compares to full mode, see existing {{PutBenchmark}} as an example.",.NET,['platforms'],IGNITE,Improvement,Major,2017-12-06 14:12:44,0
13123184,.NET: Verify metrics API parity with a test,Similar to IGNITE-6264 add tests for all metrics interfaces.,.NET,['platforms'],IGNITE,Improvement,Minor,2017-12-06 12:59:25,0
13122945,.NET: Classpath resolver relies on Java examples,We should rely solely on jar directory presence. See {{IgniteHome.IsIgniteHome}} method.,.NET,['platforms'],IGNITE,Bug,Major,2017-12-05 17:30:01,0
13122623,.NET: Thin client: Async cache operations,"Add async operations to {{ICacheClient}}.
Thin client suppots asynchrony with requestId mechanism. Make sure it works with .NET.",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-12-04 16:49:59,0
13122553,.NET: IIgnite.ReentrantLock,Propagate {{Ignite.reentrantLock}} to .NET.,.NET newbie,['platforms'],IGNITE,Improvement,Minor,2017-12-04 11:21:01,0
13122189,.NET: Thin client: LINQPad example,"Add thin client example to LINQPad: ""cache explorer"".

Connect to a local node with thin client, show all caches and data in them.
Use binary mode so that any data can be displayed.",.NET LINQPad,"['platforms', 'thin client']",IGNITE,Improvement,Minor,2017-12-01 15:16:04,0
13121841,Spark Data Frame Support. Strategy to convert complete query to Ignite SQL,"Basic support of Spark Data Frame for Ignite implemented in IGNITE-3084.

We need to implement custom spark strategy that can convert whole Spark SQL query to Ignite SQL Query if query consists of only Ignite tables.
The strategy does nothing if spark query includes not only Ignite tables.

Memsql implementation can be taken as an example - https://github.com/memsql/memsql-spark-connector

",bigdata,['spark'],IGNITE,New Feature,Major,2017-11-30 07:59:09,2
13120620,.NET: Ignite does not start on macOS,"Looks like dlopen code is incorrect for macOS:

{code}
Unhandled Exception: System.DllNotFoundException: Unable to load DLL 'libcoreclr.so': The specified module or one of its dependencies could not be found.
 (Exception from HRESULT: 0x8007007E)
   at Apache.Ignite.Core.Impl.Unmanaged.DllLoader.NativeMethodsCore.dlopen(String filename, Int32 flags)
   at Apache.Ignite.Core.Impl.Unmanaged.DllLoader.Load(String dllPath)
   at Apache.Ignite.Core.Impl.IgniteUtils.LoadDll(String filePath, String simpleName)
   at Apache.Ignite.Core.Impl.IgniteUtils.LoadJvmDll(String configJvmDllPath, ILogger log)
   at Apache.Ignite.Core.Impl.IgniteUtils.LoadDlls(String configJvmDllPath, ILogger log)
   at Apache.Ignite.Core.Ignition.Start(IgniteConfiguration cfg)
   at ignite_nuget_test.Program.Main(String[] args) in /Users/vveider/Development/VCS/Git/ignite-dotnetcore-demo/Program.cs:line 17
{code}

Steps to reproduce:
{code}
git clone https://github.com/ptupitsyn/ignite-dotnetcore-demo.git
cd ignite-dotnetcore-demo
dotnet run
{code}",.NET xplat,['platforms'],IGNITE,Bug,Major,2017-11-24 12:01:07,0
13120457,.NET: Add cross-platform examples on .NET Core,"Current examples are for .NET 4 and can only be run on Windows.
.NET Core is the latest and greatest .NET, IGNITE-2662 introduces support for that.

Add a separate examples project targeting .NET Core 2.0 which can be run on any OS.",.NET xplat,"['examples', 'platforms']",IGNITE,Improvement,Minor,2017-11-23 11:57:59,0
13120435,.NET: Thin client: Move ClientStatus to public API,"{{ClientStatus}} should be public, since we have {{IgniteClientException.ErrorCode}}.",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-11-23 10:28:13,0
13120211,.NET: Thin client: Remove OP_SQL_QUERY,OP_SQL_QUERY is not necessary and can be implemented on the client side with OP_SQL_FIELDS_QUERY.,.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-11-22 12:09:53,0
13120210,.NET: Thin client: Group operation codes by purpose,"Currently operation codes are in random order. Let's group things by purpose: cache operations, metadata, queries, etc.",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-11-22 12:07:48,0
13120208,.NET: Thin client: OP_CACHE_DESTROY should take cacheId instead of name,"All cache operations take cacheId, not cache name. Fix this for OP_CACHE_DESTROY.",.NET,"['platforms', 'thin client']",IGNITE,Bug,Major,2017-11-22 11:59:48,0
13119916,.NET: consoleWrite error during application shutdown,"from Gitter:

Hey all (again xD)! Using Apache Ignite .NET 2.3 I (sometimes) get an error when shutting down my application. The error is only observable on server nodes and not on every shutdown. Seems like a kind of race condition.
The application runs as windows service. The windows application event log shows the following error (see above) and a I get a hs_err_pid[PID].log like that (snip):
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  org.apache.ignite.internal.processors.platform.callback.PlatformCallbackUtils.consoleWrite(Ljava/lang/String;Z)V+0
j  org.apache.ignite.internal.processors.platform.callback.PlatformCallbackGateway.consoleWrite(Ljava/lang/String;Z)V+2
j  org.apache.ignite.internal.processors.platform.dotnet.PlatformDotNetConsoleStream.write([BII)V+18
j  java.io.PrintStream.write([BII)V+16
j  sun.nio.cs.StreamEncoder.writeBytes()V+120
j  sun.nio.cs.StreamEncoder.implFlushBuffer()V+11
j  sun.nio.cs.StreamEncoder.flushBuffer()V+15
j  java.io.OutputStreamWriter.flushBuffer()V+4
j  java.io.PrintStream.write(Ljava/lang/String;)V+27
j  java.io.PrintStream.print(Ljava/lang/String;)V+9
j  org.apache.ignite.internal.util.IgniteUtils.quiet(Z[Ljava/lang/Object;)V+126
j  org.apache.ignite.internal.IgniteKernal.stop0(Z)V+943
j  org.apache.ignite.internal.IgniteKernal.stop(Z)V+6
j  org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.stop0(Z)V+162
j  org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.stop(Z)V+26
j  org.apache.ignite.internal.IgnitionEx.stop(Ljava/lang/String;ZZ)Z+72
j  org.apache.ignite.Ignition.stop(Ljava/lang/String;Z)Z+3
j  org.apache.ignite.internal.processors.platform.PlatformIgnition.stop(Ljava/lang/String;Z)Z+2
v  ~StubRoutines::call_stub
For me it seems that the Java side wants to write something to the (.NET) console using a callback and the underlying memory is already freed - therefore we get a AccessViolation",.NET,['platforms'],IGNITE,Bug,Minor,2017-11-21 12:07:44,0
13119240,.NET: Support pointer serialization,"Serializing pointers does not make sense and we already throw on {{IntPtr}} fields.
However, .NET serializer ({{BinaryFormatter}}) supports both {{IntPtr}} and {{void*}}-style pointers.

Our goal is to replace standard serializer and allow seamless transition, so we should do the same.",.NET,['platforms'],IGNITE,Improvement,Major,2017-11-17 14:32:59,0
13118349,.NET: Optionally disable Java console redirect,"Java console redirect ({{PlatformCallbackUtils.consoleWrite}} involves JNI callback and, potentially, can affect performance and stability of the application.

It would be a good idea to disable this in production.
* Add {{IgniteConfiguration.EnableJavaConsoleRedirect}} propery.
* Disable callback on both .NET and Java sides",.NET,['platforms'],IGNITE,Improvement,Major,2017-11-14 20:09:58,0
13117989,.NET: support Multidimensional Arrays in binary serializer,"It is found that legacy 2D, 3D, etc. are not working in BinarySerializer.

Sample reproducer:
{code:java}
        [Test]
        public void TestXX()
        {
            var array2D = new float[32, 32];
            var res = TestUtils.SerializeDeserialize(array2D);
            Assert.AreEqual(array2D, res);
        }
{code}

BTW, please note that 2D array in Java (a[2][2]) is just a jugged array:

{noformat}
obj = {byte[2][]@1928}
 0 = {byte[2]@1974}
 1 = {byte[2]@1975}
{noformat}
",.NET,['platforms'],IGNITE,Bug,Major,2017-11-13 15:57:54,0
13117501,SQL: invalid security checks during query execution,"Currently security check is performed inside {{IgniteCacheProxy}}. This is wrong place. Instead, we should perform it inside query processor after parsing when all affected caches are known.",vulnerability,"['cache', 'sql']",IGNITE,Bug,Major,2017-11-10 07:41:04,4
13116935,ODBC: Add new version for multiple result set functionality,"Changes made in IGNITE-6357 changed ODBC protocol, but protocol version was not increased. Need to fix it.",odbc,['odbc'],IGNITE,Bug,Major,2017-11-08 10:35:56,3
13116689,ODBC driver should handle ungraceful tcp disconnects,"It is found that ungraceful TCP disconnect makes ODBC driver stuck at socket recv().
Ungraceful TCP disconnect could be caused:
1. Network failure (or new firewall rules)
2. Remote party shutdown (Half Closed Connection)

So, the proposal is:
setup socket  options: 
1) SO_KEEPALIVE enabled
2) TCP_KEEPIDLE to 60 sec. It is 2 hour by default
3) TCP_KEEPINTVL to 1 sec. It is 1 sec at Win and 75 sec at Linux by default.
4) send/receive buffers to some greater value (8k by default)
",odbc,['odbc'],IGNITE,Bug,Major,2017-11-07 14:42:04,3
13115345,ODBC: Add secure connection support,Need to add support of SSL/TLS for ODBC.,odbc,['odbc'],IGNITE,New Feature,Major,2017-11-01 12:42:35,3
13113308,С++: Continuous Query example: extra lines in log if run example with 3 standalone node,"С++: Continuous Query example: extra lines in log if run example with 3 standalone nodes

without standalone node or with 1 standalone node :

{code}
>>> Cache continuous query example started.

Queried entry [key=20, val=20]
Queried entry [key=21, val=21]
Queried entry [key=22, val=22]
Queried entry [key=23, val=23]
Queried entry [key=24, val=24]

>>> Press 'Enter' to continue...
{code}

with 3 standalone nodes :

{code}
>>> Cache continuous query example started.

Queried entry [key=20, val=20]
Queried entry [key=21, val=21]
Queried entry [key=22, val=22]
Queried entry [key=23, val=23]
Queried entry [key=24, val=24]
Queried entry [key=25, val=25]
Queried entry [key=26, val=26]
Queried entry [key=27, val=27]
Queried entry [key=28, val=28]

>>> Press 'Enter' to continue...
{code}",C++,['platforms'],IGNITE,Bug,Major,2017-10-31 13:48:38,3
13112564,.NET: Thin client: SQL & LINQ example,Update {{ThinClientQueryExample}} with SQL example once IGNITE-6337 and IGNITE-6336 are finished.,.NET,"['platforms', 'thin client']",IGNITE,Improvement,Minor,2017-10-27 10:54:42,0
13112344,.NET: Thin client: Cache id is calculated incorrectly,"We use {{BinaryUtiles.GetStringHashCode}} to get cache id, but this method uses uppercase characters only.

Make sure to add tests for cache names with same name in different case.",.NET,"['platforms', 'thin client']",IGNITE,Bug,Major,2017-10-26 16:55:46,0
13112293,ODBC: Error when closing executed DML statement.,"There is an error, on attempt to close executed DML statement:
{code}
SQLRETURN ret = SQLExecDirect(stmt, ""UPDATE Person SET salary=1000 WHERE _key=2"" , SQL_NTS);
assert(ret == SQL_SUCCESS);
ret = SQLFreeStmt(stmt, SQL_CLOSE);
assert(ret == SQL_SUCCESS);
{code}

The error message is ""Failed to close statement: HY000: Failed to find query with ID: <some_id>""",important odbc,['odbc'],IGNITE,Bug,Critical,2017-10-26 14:24:32,3
13111428,.NET: DataStorageConfiguration.WalAutoArchiveAfterInactivity,Add {{DataStorageConfiguration.WalAutoArchiveAfterInactivity}} property.,.NET newbie,['platforms'],IGNITE,Improvement,Minor,2017-10-23 14:21:29,0
13111377,.NET: CacheConfiguration missing properties,"IGNITE-6263 revealed a number of missing {{CacheConfiguration}} properties:

{code}
            ""IsOnheapCacheEnabled"",
            ""StoreConcurrentLoadAllThreshold"",
            ""isOnheapCacheEnabled"",
            ""RebalanceOrder"",
            ""RebalanceBatchesPrefetchCount"",
            ""MaxQueryIteratorsCount"",
            ""QueryDetailMetricsSize"",
            ""SqlSchema"",
            ""QueryParallelism""
{code}",.NET,['platforms'],IGNITE,Improvement,Minor,2017-10-23 11:38:34,0
13111376,.NET: CacheConfiguration.KeyConfiguration,"Propagate {{CacheCofiguration.KeyConfiguration}} to .NET, see IGNITE-5458",.NET,['platforms'],IGNITE,Improvement,Major,2017-10-23 11:36:16,0
13110940,SQL: Add data region option to CREATE TABLE,Subj. We need to be able to create tables in different data regions.,usability,['sql'],IGNITE,Bug,Major,2017-10-20 11:26:33,4
13110670,.NET: IGNITE_HOME is not detected automatically when using IgniteOutputCacheProvider,"Steps to reproduce:
1) Create a new C# Web application in the MS Visual Studio:
File -> New -> Project -> Visual C# -> Web -> ASP.NET Web Application

2) Install Apache.Ignite.AspNet NuGet package

3) Open Web.config file and add following code into beginning of ""configuration"" section:

{code:java}
<configSections>
<section name=""igniteConfiguration"" type=""Apache.Ignite.Core.IgniteConfigurationSection, Apache.Ignite.Core"" />
</configSections>

<igniteConfiguration>
<cacheConfiguration>
<cacheConfiguration name='myWebCache' />
</cacheConfiguration>
</igniteConfiguration>
{code}

And following code into beginning of ""system.web"" section:


{code:java}
<caching>
<outputCache defaultProvider=""apacheIgnite"">
<providers>
<add name=""apacheIgnite"" type=""Apache.Ignite.AspNet.IgniteOutputCacheProvider, Apache.Ignite.AspNet"" igniteConfigurationSectionName=""igniteConfiguration"" cacheName=""myWebCache"" />
</providers>
</outputCache>
</caching>

<sessionState mode=""Custom"" customProvider=""IgniteSessionStateProvider"">
<providers>
<add name=""IgniteSessionStateProvider""
type=""Apache.Ignite.AspNet.IgniteSessionStateStoreProvider, Apache.Ignite.AspNet"" />
</providers>
</sessionState>
{code}

Open Default.aspx.cs file and add the following to Page_Load method:

{code:java}
Session[""test""] = ""abc"";
{code}

4) Run project

Following exception appears in browser:


{code}
Configuration Error

Description: An error occurred during the processing of a configuration file required to service this request. Please review the specific error details below and modify your configuration file appropriately. 

Parser Error Message: Failed to initialize Apache.Ignite.AspNet.IgniteSessionStateStoreProvider: Apache.Ignite.Core.Common.IgniteException: Failed to initialize JVM. ---> Apache.Ignite.Core.Common.IgniteException: Java class is not found (did you set IGNITE_HOME environment variable?): org/apache/ignite/internal/processors/platform/utils/PlatformUtils ---> Apache.Ignite.Core.Common.JavaException
  --- End of inner exception stack trace ---
  --- End of inner exception stack trace ---
  at Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.Error(Void* target, Int32 errType, SByte* errClsChars, Int32 errClsCharsLen, SByte* errMsgChars, Int32 errMsgCharsLen, SByte* stackTraceChars, Int32 stackTraceCharsLen, Void* errData, Int32 errDataLen)
  at Apache.Ignite.Core.Impl.Unmanaged.IgniteJniNativeMethods.CreateContext(Void* opts, Int32 optsLen, Void* cbs)
  at Apache.Ignite.Core.Impl.IgniteManager.CreateJvm(IgniteConfiguration cfg, UnmanagedCallbacks cbs)
  at Apache.Ignite.Core.Impl.IgniteManager.CreateJvmContext(IgniteConfiguration cfg, UnmanagedCallbacks cbs, ILogger log)
  at Apache.Ignite.Core.Ignition.Start(IgniteConfiguration cfg)
  at Apache.Ignite.AspNet.Impl.ConfigUtil.InitializeCache[TK,TV](NameValueCollection config, Type callerType, String defaultCacheName)

Source Error: 


Line 29:     <sessionState mode=""Custom"" customProvider=""IgniteSessionStateProvider"">
Line 30:       <providers>
Line 31:         <add name=""IgniteSessionStateProvider"" type=""Apache.Ignite.AspNet.IgniteSessionStateStoreProvider, Apache.Ignite.AspNet"" />
Line 32:       </providers>
Line 33:     </sessionState>

Source File: c:\visual studio 2015\Projects\WebApplication10\WebApplication10\web.config    Line: 31 
{code}
",.NET NuGet,['platforms'],IGNITE,Bug,Major,2017-10-19 13:15:39,0
13109360,Optimize GridH2KeyValueRowOnheap.getValue() method,"There are some unnecessary operations around this method:
1) Redundant recursion
2) Too big value cache
Etc.

Need to optimize it.",performance,['sql'],IGNITE,Task,Major,2017-10-13 20:29:38,4
13109290,.NET: cache deserialization fails with complex value type & enum,"There is an deserialization issue with complex structure.

Please see the sample code below:
{noformat}
    public enum SampleEnum : byte
    {
        One = 0,
        Two = 1,
        Three = 2
    }
{noformat}
{noformat}
                var cache = ignite.GetOrCreateCache<string, Dictionary<SampleEnum, Dictionary<int, int>>>(""mySampleCache"");
                cache.Put(""DictData"", Dict);
                var result = cache.Get(""DictData"");                
{noformat}

var result = cache.Get(""DictData""); fails with exception:
{""The constructor to deserialize an object of type 'System.Collections.Generic.ObjectEqualityComparer`1[SampleProject.SampleEnum]' was not found.""}

If we change 
Dictionary<SampleEnum, Dictionary<int, int>>
to 
Dictionary<int, Dictionary<int, int>>
then everything works fine ",.NET,['platforms'],IGNITE,Bug,Major,2017-10-13 15:29:52,0
13109249,SQL: Avoid materializing rows when possible,"We need to filter backup keys during query execution. Currently to achieve this we do the following:
1) Get row link
2) Materialize the row (!!!)
3) Create H2 row (H2 wrapping)
4) Then get key from H2 row (unwrapping)
5) Calculate partition through affinity function

What it might look like:
1) Get row link
2) Get partition from link

This ticket is to implement row filtering on B+Tree level and avoid their materialization.",performance,"['cache', 'sql']",IGNITE,Task,Major,2017-10-13 12:18:57,4
13109235,SQL: IndexingQueryCacheFilter should use immediate partition data if possible,"We need to filter backup keys during query execution. Currently to achieve this we do the following:
1) Get row link
2) Materialize the row (!!!)
3) Create H2 row (H2 wrapping)
4) Then get key from H2 row (unwrapping)
5) Calculate partition through affinity function

What it might look like:
1) Get row link
2) Get partition from link

This ticket is to implement working with partitions rather than keys when possible,",performance,"['cache', 'sql']",IGNITE,Task,Major,2017-10-13 11:19:42,4
13109209,.NET: Disable thin client for 2.3 release,"2.3 is coming out soon, and thin client feature is far from being release-ready (small part of cache APIs is all we have), let's disable it in {{ignite-2.3}} branch to avoid confusing users.",.NET,"['platforms', 'thin client']",IGNITE,Task,Major,2017-10-13 09:42:58,0
13108943,.NET: Thin client: XML configuration,"Provide a way to configure {{IgniteClientConfiguration}} in XML, similar to {{IgniteConfiguration}}.",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-10-12 15:18:20,0
13108854,SQL: Merge and optimize backup query filter,"1) Merge two anonymous implementations as they does the same things.
2) Get rid of binary search in favor of hash-based lookup.
3) Do not create a filter for {{PARTITIONED}} cache with no backups when there are no explicit partitions.
4) In most cases we do not need real key/value! Only partition is needed.",performance,['sql'],IGNITE,Task,Major,2017-10-12 09:27:06,4
13108794,.NET: Improve LINQ documentation,"Document all recent improvements, in particular, IGNITE-4636, IGNITE-4425.

Look for others by linq tag.

https://apacheignite-net.readme.io/docs/linq",.NET LINQ,"['documentation', 'platforms']",IGNITE,Task,Major,2017-10-12 04:55:49,0
13108563,.NET: IIgnite.AddCacheConfiguration,"Propagate {{Ignite.addCacheConfiguration}} to .NET.

This allows adding cache templates at runtime. Important for DDL.",.NET newbie,['platforms'],IGNITE,Improvement,Minor,2017-10-11 11:16:18,0
13106624,Failure during Ignite Service.cancel() can break normal shutdown process.,"org.apache.ignite.services.Service is a public interface, but Ignite fully relies it's cacel method is implemented properly and throws no errors.
However, if one of services fails on cancel(), then other services may not be stopped properly as well as their executor pools.

We should wrap Service.cancel method in try-catch to avoid this.
",newbie,['managed services'],IGNITE,Bug,Major,2017-10-03 06:53:52,1
13105758,.NET: QueryField.NotNull,Add {{QueryField.NotNull}} property to reflect changes in Java: IGNITE-6509,.NET,['platforms'],IGNITE,Improvement,Major,2017-09-28 14:01:44,0
13105513,".NET: DataStreamer DefaultPerNodeBufferSize, DefaultParallelOpsMultiplier, Timeout","* Add default constants {{DefaultPerNodeBufferSize}} and {{DefaultParallelOpsMultiplier}} somewhere (interface does not allow them).
* Add {{IDataStreamer.Timeout}}",.NET,['platforms'],IGNITE,Improvement,Major,2017-09-27 17:23:52,4
13105511,.NET: PersistentStoreConfiguration.WriteThrottlingEnabled,Add {{PersistentStoreConfiguration.WriteThrottlingEnabled}} to .NET.,.NET,['platforms'],IGNITE,Improvement,Major,2017-09-27 17:19:33,0
13105508,.NET: Enable persistence on per-cache basis,Propagate new configuration to .NET: IGNITE-6030,.NET important,['platforms'],IGNITE,Improvement,Major,2017-09-27 17:16:11,0
13105406,ODBC: SQLGetDiagRec doesn't follow specification when buffer size is too small,"When buffer size provided for error message is not big enough to hold the entire error message, the function {{SqlGetDiagRec()}} returns wrong resulting string length (-4) and wrong result code ({{SQL_SUCCESS}} instead of {{SQL_SUCCESS_WITH_INFO}}).",usability,['odbc'],IGNITE,Bug,Major,2017-09-27 12:12:00,3
13104794,.NET: CacheConfiguration.WriteSynchronizationMode incorrect default value,"{{CacheConfiguration.WriteSynchronizationMode}} has no explicit default in .NET, which causes it to be {{FullSync}} (first enum value). Java-side default is {{PRIMARY_SYNC}}.

Write a test to make sure all defaults are the same (start a cache from Spring and get configuration).",.NET,['platforms'],IGNITE,Bug,Major,2017-09-25 14:07:54,0
13104264,.NET: ActiveOnStart does not work,"{{IgniteConfiguration.IsActiveOnStart}} seems to have no effect. The following code causes an exception on {{GetOrCreateCache}}:

{code}
var cfg = new IgniteConfiguration
{
    PersistentStoreConfiguration = new PersistentStoreConfiguration(),
    IsActiveOnStart = true
};

using (var ignite = Ignition.Start(cfg))
{
    var cache = ignite.GetOrCreateCache<int, int>(""foo"");
}
{code}",.NET,['platforms'],IGNITE,Bug,Major,2017-09-22 11:19:18,0
13102610,Failures in .NET test suite,"A kind of NPE. Affected tests:
{code}
ConsoleRedirectTest.TestStartupJavaError 	
ExceptionsTest.TestExceptions 	
ExceptionsTest.TestInvalidSpringUrl 	
LifecycleTest.TestError 	
MarshallerTest.TestInvalidMarshaller 
CustomLoggerTest.TestStartupDotNetError 	
CustomLoggerTest.TestStartupJavaError 
{code}",.NET,['platforms'],IGNITE,Bug,Major,2017-09-15 16:07:28,0
13102575,.NET: support ClientConnectorConfiguration,See {{IgniteConfiguration.clientConnectorConfiguration}}. We will use it instead of {{IgniteConfiguration.sqlConnectorConfiguration}}.,.NET,"['platforms', 'thin client']",IGNITE,Task,Major,2017-09-15 13:54:20,0
13102557,.NET: Thin client: basic cache operations,"We need to implement base cache operations, such as ""remove"", ""replace"", ""putIfAbsent"". ",.NET,"['clients', 'platforms']",IGNITE,Bug,Major,2017-09-15 12:39:00,0
13102245,.NET: Set up NDepend analysis on TeamCity,"NDepend provided 6 build machine licenses to Apache Ignite: https://svn.apache.org/repos/private/pmc/ignite/licenses/NDepend.txt

1) Install NDepend on Windows agents (https://www.ndepend.com/docs/teamcity-integration-ndepend)
2) Set up NDepend project, adjust rules
3) Add NDepend analysis to {{Platform .NET Inspections}}: https://ci.ignite.apache.org/viewType.html?buildTypeId=Ignite20Tests_IgnitePlatformNetInspections
4) Update wiki with instructions: https://cwiki.apache.org/confluence/display/IGNITE/Ignite.NET+Development",.NET,['platforms'],IGNITE,Improvement,Major,2017-09-14 12:59:35,0
13101983,.NET: Thin client example,Create an example for thin client (requires external node started with {{ignite.bat}} or {{Apache.Ignite.exe}}).,.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-09-13 15:10:44,0
13101634,.NET: DataStreamer does not work with complex object graphs,"Same issue as IGNITE-6081 with {{PutAll}}: {{DataStreamer}} does not detach objects.

Reproducer:

{code}
var obj1 = new Container();
var obj2 = new Container();
var obj3 = new Container();
var obj4 = new Container();

obj1.Inner = obj2;
obj2.Inner = obj1;
obj3.Inner = obj1;
obj4.Inner = obj3;

using (var ldr = _grid.GetDataStreamer<int, Container>(CacheName))
{
    ldr.AllowOverwrite = true;

    ldr.AddData(1, obj1);
    ldr.AddData(2, obj2);
    ldr.AddData(3, obj3);
    ldr.AddData(4, obj4);
}

var cache = _grid.GetCache<int, Container>(CacheName);

var res = cache[1];
Assert.AreEqual(res, res.Inner.Inner);

Assert.IsNotNull(cache[2].Inner);
Assert.IsNotNull(cache[2].Inner.Inner);
Assert.IsNotNull(cache[3].Inner);
Assert.IsNotNull(cache[3].Inner.Inner);
            
Assert.IsNotNull(cache[4].Inner);
Assert.IsNull(cache[4].Inner.Inner);
{code}",.NET,['platforms'],IGNITE,Bug,Major,2017-09-12 12:51:36,0
13101256,.NET: Thin client: LINQ,Make sure LINQ works via thin client. This requires implementing {{ICacheInternal}}.,.NET linq,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-09-11 13:18:17,0
13101255,.NET: Thin client: SQL queries,SQL and Fields queries in thin client.,.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-09-11 13:15:49,0
13101254,.NET: Thin client: Create cache,"Create, destroy and observer caches from thin client (by name and from {{CacheConfiguration}}).

* {{IIgniteClient.CreateCache}}, {{GetOrCreateCache}} overloads
* {{ICacheClient.GetConfiguration}}
* {{IIgnite.GetCacheNames}}
* {{IIgniteClient.DestroyCache}}",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-09-11 13:12:57,0
13101252,.NET: Thin client: cache binary mode,"{{WithKeepBinary}}, all operations in binary mode, {{IIgnite.GetBinary()}}.",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-09-11 13:11:04,0
13100710,"If getAll() fails with NPE, onHeap entry is not removed, for local cache","GridCacheLocalFullApiSelfTest.testGetAllWithNulls

{code}
    final Set<String> c = new HashSet<>();

        c.add(""key1"");
        c.add(null);

        GridTestUtils.assertThrows(log, new Callable<Void>() {
            @Override public Void call() throws Exception {
                cache.getAll(c);

                return null;
            }
        }, NullPointerException.class, null);
{code}

After getAll, entry with ""key1"" will be in heap map, it is dependent of order in collection for getAll();",MakeTeamcityGreenAgain,['cache'],IGNITE,Bug,Major,2017-09-08 08:09:09,2
13100503,.NET: GetAll should close query cursor,"{{QueryCursor}} in Java is closed automatically on {{getAll}} call, we should do the same in Ignite.NET.",.NET,['platforms'],IGNITE,Improvement,Major,2017-09-07 15:40:09,0
13100459,"SQL: Get rid of ""replicatedOnly"" flag","This flag acts as a hint that all tables are reside in {{REPLICATED}} cache. However, we already have this information in runtime! No need to ask users to think about it.

Let's deprecate that flag.",performance usability,['sql'],IGNITE,Task,Major,2017-09-07 13:23:34,4
13100458,ODBC: Propagate SQLSTATE error codes,"We should propagate SQLSTATE to ODBC usrs when it's server-side part is ready [1].

[1] IGNITE-5620",important,['odbc'],IGNITE,Task,Major,2017-09-07 13:17:53,3
13100169,C++: impossible to start node with persistent store,"C++: impossible to start node with persistent store. 

Add to config:

{code}
   <property name=""persistentStoreConfiguration"">
      <bean class=""org.apache.ignite.configuration.PersistentStoreConfiguration""/>
    </property>
{code}


After node started, error message appears:


{code}
[17:42:39] Topology snapshot [ver=1, servers=1, clients=0, CPUs=8, heap=0.89GB]
ERROR: Can not perform the operation because the cluster is inactive. Note, that the cluster is considered inactive by default if Ignite Persistent Store is used to let all the nodes join the cluster. To activate the cluster call Ignite.activate(true).
{code}


and after that node is stopped",C++ important,['platforms'],IGNITE,Bug,Blocker,2017-09-06 14:55:32,3
13100127,.NET: Decouple AbstractQueryCursor from PlatformTarget data exchange specifics,{{AbstractQueryCursor}} should be concerned only with iterator and cursor logic. Data exchange should be factored out. This will simplify code reuse for thin client.,.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-09-06 12:29:00,0
13099834,.NET: Propagate ServiceDeploymentException,IGNITE-5145 causes failures of some tests in ServiceTest class. The reason is changed services API and a new type of exception thrown from deployment methods.,.NET,['platforms'],IGNITE,Improvement,Major,2017-09-05 13:01:34,0
13099804,.NET: Get rid of Doxygen-specific files,"IGNITE-6253 replaces Doxygen with DocFX.
Remove Doxygen-specific files:
* {{Apache.Ignite.dxg}}
* {{header.html}}
* {{Package-Info.cs}}",.NET,['platforms'],IGNITE,Improvement,Major,2017-09-05 10:57:18,0
13099775,.NET: Verify Java API parity with a unit test,Write a unit test that compares Java and .NET Ignite APIs (like Cache and Compute) to make sure that new APIs are not missed in platforms.,.NET,['platforms'],IGNITE,Improvement,Major,2017-09-05 09:07:50,0
13099774,.NET: Verify Java config parity with a unit test,Write a unit test that compares .NET {{IgniteConfiguration}} and Java {{IgniteConfiguration}} and fails if some properties are different.,.NET,['platforms'],IGNITE,Improvement,Major,2017-09-05 09:06:39,0
13099685,ODBC support for Mac OSX,"In order for Ignite to be useful in analytics environment (accessing data via R / Most reporting engines), the ODBC access is required.

Analyst do use Mac OSX (not only Linux/Windows).

The current ODBC driver is not compilable on OSX due to 1-2 different kernel API functions.
Similar incompatibility issues are already resolved in similar projects using conditional macros in C language. i.e. it may not be a big challenge to make it work.

Thanks for planning and considerations!

PS:
For my use case the issue is a Blocker, because rJAVA is dead (requires Java 6 installation on Mac OSX) and even with rJAVA , the JDBC implementation is not working for R (class cast exceptions).",usability,['odbc'],IGNITE,Improvement,Major,2017-09-04 23:24:24,3
13099601,.NET: Thin client: Define metadata exchange protocol,"IGNITE-6236 introduced some metadata operations in client protocol.
Let's formalize these operations:
* Which operations should be present? PutMeta, PutMetas, GetMeta, GetSchema, etc.
* Do we need to retrieve schemas separately from entire metadata?
* Dynamic type registration",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-09-04 12:24:16,0
13099580,.NET: Fix TestAffinityCall to take late affinity assignment into account,"{{ComputeApiTest.TestAffinityCall}} fails because affinity assignment changes during test execution. Find a way to handle this (either retry the test, or wait for some cache event).",.NET MakeTeamcityGreenAgain,['platforms'],IGNITE,Improvement,Major,2017-09-04 10:11:59,0
13099574,.NET: Replace Doxygen with DocFX for API documentation generation,"Doxygen has recently became very slow on our code base (can take up to 30 minutes), and there seems to be no solution to this problem. There are other issues: documentation is a bit ugly, customization possibilities are limited, C# is not a first-class citizen there.

[DocFX|https://dotnet.github.io/docfx/] looks like an obvious replacement:
* It is a go-to documentation generator for .NET (included in .NET Foundation)
* Documentation looks nice (MSDN-like) out of the box
* Migration seems to be easy enough",.NET,"['documentation', 'platforms']",IGNITE,Improvement,Major,2017-09-04 09:44:18,0
13099567,.NET: Thin client: Basic exception handling,Exception handling in thin client: response includes a success flag. Define exception format protocol in case of failure.,.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-09-04 08:58:03,0
13099547,.NET: IgniteConfiguration.ConsistentId,"Propagate {{IgniteConfiguration.ConsistentId}} to .NET.

Java side requires {{Serializable}} there, and {{BinaryObject}} is {{Serializable}}, so we can provide any user-defined objects there.",.NET usability,['platforms'],IGNITE,Improvement,Major,2017-09-04 07:09:44,0
13099244,.NET: Thin client: ScanQuery,"Implement ScanQuery in thin client.

Challenges:
* Query cursor. This will require some kind of HandleRegistry on Java side, so we can pass an ID back to client (see {{OdbcRequestHandler.qryCursors}} as an example).
* Predicate. Thin client is not .NET-specific. We need a way to support predicates in (at least) Java and .NET, there should be some platform id.",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-09-01 14:46:27,0
13098891,.NET: Thin client: cache.Get and Put for user types,Cache operations on user types require proper metadata handling. Make sure dynamic type registration works.,.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-08-31 15:05:23,0
13098868,.NET: Extract type codes to a separate class,{{BinaryUtils}} class is a mess. First candidate for extraction is a set of type codes ({{TypeByte}} etc). {{BinarySystemHandlers.GetTypeId}} should be moved to the same class.,.NET,['platforms'],IGNITE,Improvement,Major,2017-08-31 12:28:42,0
13098844,.NET: Flusher.RunThread starts a new thread,"1) ThreadPool thread should be used instead
2) Exceptions are not handled, so entire process will crash",.NET,['platforms'],IGNITE,Bug,Major,2017-08-31 11:05:14,0
13098297,.NET: Add CheckpointWriteOrder enum in persistent store configuration,"Since 2.2 we have {{CheckpointWriteOrder}} property in {{PersistentStoreConfiguration}}. It should be possible to set through .NET configuration classes.
Default value should be {{CheckpointWriteOrder#SEQUENTIAL}}.",.NET usability,['platforms'],IGNITE,Improvement,Major,2017-08-29 15:03:57,0
13098275,.NET: Avoid inheritdoc on public APIs,"{{<inheritdoc />}} indicates inherited XMLDoc, which is used by documentation generators.

However, it is not recognized by .NET XML documentation generator (which produces Apache.Ignite.Core.xml file), so public APIs should never use that.",.NET,['platforms'],IGNITE,Bug,Major,2017-08-29 13:46:55,0
13098224,ODBC: SQLBindParameter should not unbind parameter if the ParameterValuePtr is NULL,"Currently, {{SQLBindParameter}} unbinds parameter if the {{ParameterValuePtr}} is {{NULL}} in analogy with {{SQLBindCol}}. Howeverm according to https://docs.microsoft.com/en-us/sql/odbc/reference/syntax/sqlbindparameter-function there should not be such a behaviour. {{ParameterValuePtr}} can be set to {{NULL}} for example if user wants to bind {{SQL_NULL_DATA}} parameter.",important,['odbc'],IGNITE,Bug,Major,2017-08-29 10:25:20,3
13098213,.NET: Build NuGet packages for Apache-Ignite release on CI,Create a suite to build Ignite.NET NuGet packages on TeamCity: https://ci.ignite.apache.org/project.html?projectId=IgniteRelease,.NET,['platforms'],IGNITE,Improvement,Major,2017-08-29 09:47:56,0
13097614,ODBC: SQLFreeStmt failing if called before all the rows from the result set were fetched.,"Steps to reproduce: 
1. Execute select query with more then 1 row in result set.
2. Fetch results and close the cursor before detecting end of result set.
3. Check for statement error.

Error message:
{noformat}
HY000: Failed to find query with ID: 10
{noformat}",important,['odbc'],IGNITE,Bug,Major,2017-08-25 13:41:44,3
13096759,C++: Query example: Incorrect output if run example with standalone node,"C++: Query example: Incorrect output if run example with standalone node

without standalone node:

{code}
Following people have 'Master' in their resumes: 
1 : Person [orgId=1, lastName=Doe, firstName=John, salary=2000, resume=John Doe has Master Degree.]
4 : Person [orgId=2, lastName=Smith, firstName=Jane, salary=2000, resume=Jane Smith has Master Degree.]

Following people have 'Bachelor' in their resumes: 
2 : Person [orgId=1, lastName=Doe, firstName=Jane, salary=1000, resume=Jane Doe has Bachelor Degree.]
3 : Person [orgId=2, lastName=Smith, firstName=John, salary=1000, resume=John Smith has Bachelor Degree.]
{code}

with standalone node (rows are repeated):
{code}
Following people have 'Master' in their resumes: 
1 : Person [orgId=1, lastName=Doe, firstName=John, salary=2000, resume=John Doe has Master Degree.]
1 : Person [orgId=1, lastName=Doe, firstName=John, salary=2000, resume=John Doe has Master Degree.]
4 : Person [orgId=2, lastName=Smith, firstName=Jane, salary=2000, resume=Jane Smith has Master Degree.]

Following people have 'Bachelor' in their resumes: 
2 : Person [orgId=1, lastName=Doe, firstName=Jane, salary=1000, resume=Jane Doe has Bachelor Degree.]
3 : Person [orgId=2, lastName=Smith, firstName=John, salary=1000, resume=John Smith has Bachelor Degree.]
2 : Person [orgId=1, lastName=Doe, firstName=Jane, salary=1000, resume=Jane Doe has Bachelor Degree.]
3 : Person [orgId=2, lastName=Smith, firstName=John, salary=1000, resume=John Smith has Bachelor Degree.]
{code}


",c++,['platforms'],IGNITE,Bug,Minor,2017-08-22 13:52:51,3
13095603,SQL: Add ability to do INSERT without specifying the column names,"Having the following classes
{code:java}
class PersonKey {
    private Long id;
}

class Person {
    private Long id;
    private String name;
}
{code}
with proper configuration it should be possible to execute queries 
of the following type passing {{id}} and {{name}} as the arguments
{code:sql}""insert into Person values(?,?)""{code}
",usability,['sql'],IGNITE,Task,Major,2017-08-18 10:19:32,4
13095335,ODBC: Implement SQLGetInfo for all info types,Currently not all the info types supported for {{SQLGetInfo}}. Need to implement fully. Details can be found here - https://docs.microsoft.com/en-us/sql/odbc/reference/syntax/sqlgetinfo-function,usability,['odbc'],IGNITE,Task,Major,2017-08-17 13:08:04,3
13094998,SQL: Batch DML updates on per-node basis,"Currently DML updates are batched and then applied using {{IgniteCache.invokeAll}}. See {{org.apache.ignite.internal.processors.query.h2.DmlStatementsProcessor#processPage}}. This is not efficient, because typical update will hit a lot of data nodes.

Instead, we should create separate batches for every primary node. This way we can significantly improve update performance.",performance,['sql'],IGNITE,Task,Major,2017-08-16 12:12:56,4
13094484,SQL: Add String length constraint,"We should support {{CHAR(X)}} and {{VARCHAR{X}} syntax. Currently, we ignore it. First, it affects semantics. E.g., one can insert a string with greater length into a cache/table without any problems. Second, it limits efficiency of our default configuration. E.g., index inline cannot be applied to {{String}} data type as we cannot guess it's length.",sql-engine,['sql'],IGNITE,Task,Major,2017-08-14 14:12:44,2
13093863,SQL: Optimize GridQueryNextPageResponse memory consumption,"Currently we store data in {{GridQueryNextPageResponse}} in message wrappers. This can be avoided easily, if we add custom converter interface which could be passed to our direct marshaller facility.",performance,['sql'],IGNITE,Task,Major,2017-08-10 17:31:24,4
13093435,[Test failed] GridCachePartitionedDataStructuresFailoverSelfTest.testSemaphoreNonFailoverSafe,"Example of fail
https://ci.ignite.apache.org/viewLog.html?buildId=762788&tab=buildResultsDiv&buildTypeId=Ignite20Tests_IgniteDataStrucutures

Typical problem is 
{code}
org.apache.ignite.IgniteInterruptedException: Failed to wait for asynchronous operation permit (thread got interrupted).
    at org.apache.ignite.internal.util.IgniteUtils$3.apply(IgniteUtils.java:805)
    at org.apache.ignite.internal.util.IgniteUtils$3.apply(IgniteUtils.java:803)
    at org.apache.ignite.internal.util.IgniteUtils.convertException(IgniteUtils.java:961)
    at org.apache.ignite.internal.processors.datastructures.GridCacheSemaphoreImpl.close(GridCacheSemaphoreImpl.java:1026)
    at org.apache.ignite.internal.processors.cache.datastructures.GridCacheAbstractDataStructuresFailoverSelfTest.testSemaphoreNonFailoverSafe(GridCacheAbstractDataStructuresFailoverSelfTest.java:458)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at junit.framework.TestCase.runTest(TestCase.java:176)
    at org.apache.ignite.testframework.junits.GridAbstractTest.runTestInternal(GridAbstractTest.java:2000)
    at org.apache.ignite.testframework.junits.GridAbstractTest.access$000(GridAbstractTest.java:132)
    at org.apache.ignite.testframework.junits.GridAbstractTest$5.run(GridAbstractTest.java:1915)
    at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.InterruptedException: null
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1301)
    at java.util.concurrent.Semaphore.acquire(Semaphore.java:317)
    at org.apache.ignite.internal.processors.cache.GridCacheAdapter.asyncOpAcquire(GridCacheAdapter.java:4314)
    at org.apache.ignite.internal.processors.cache.GridCacheAdapter.asyncOp(GridCacheAdapter.java:4177)
    at org.apache.ignite.internal.processors.cache.distributed.dht.colocated.GridDhtColocatedCache.getAsync(GridDhtColocatedCache.java:196)
    at org.apache.ignite.internal.processors.cache.GridCacheAdapter.get0(GridCacheAdapter.java:4509)
    at org.apache.ignite.internal.processors.cache.GridCacheAdapter.get(GridCacheAdapter.java:4490)
    at org.apache.ignite.internal.processors.cache.GridCacheAdapter.get(GridCacheAdapter.java:1324)
    at org.apache.ignite.internal.processors.cache.GridCacheProxyImpl.get(GridCacheProxyImpl.java:329)
    at org.apache.ignite.internal.processors.datastructures.DataStructuresProcessor$5.applyx(DataStructuresProcessor.java:635)
    at org.apache.ignite.internal.processors.datastructures.DataStructuresProcessor.retryTopologySafe(DataStructuresProcessor.java:1519)
    at org.apache.ignite.internal.processors.datastructures.DataStructuresProcessor.removeDataStructure(DataStructuresProcessor.java:629)
    at org.apache.ignite.internal.processors.datastructures.DataStructuresProcessor.removeSemaphore(DataStructuresProcessor.java:1188)
    at org.apache.ignite.internal.processors.datastructures.GridCacheSemaphoreImpl.close(GridCacheSemaphoreImpl.java:1023)
    at org.apache.ignite.internal.processors.cache.datastructures.GridCacheAbstractDataStructuresFailoverSelfTest.testSemaphoreNonFailoverSafe(GridCacheAbstractDataStructuresFailoverSelfTest.java:458)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at junit.framework.TestCase.runTest(TestCase.java:176)
    at org.apache.ignite.testframework.junits.GridAbstractTest.runTestInternal(GridAbstractTest.java:2000)
    at org.apache.ignite.testframework.junits.GridAbstractTest.access$000(GridAbstractTest.java:132)
    at org.apache.ignite.testframework.junits.GridAbstractTest$5.run(GridAbstractTest.java:1915)
    at java.lang.Thread.run(Thread.java:745)
{code}",MakeTeamcityGreenAgain,[],IGNITE,Bug,Major,2017-08-09 11:14:16,2
13093151,SQL: lazy ResultSet for map query,"Currently we move the whole {{ResultSet}} to memory when executing SQL query on mapper. If result set is large enough, this could easily bring server down due to high GC pressure or even OOME. 

To avoid that we should stream H2's {{ResultSet}} to our own consumer, which will construct a page and send it to the client  When a page is sent, consumer will block current thread until ""next page request"" is received. This approach has disadvantage - query thread will be blocked. However, implementation should be fairly easy and will allow us to avoid OOMEs on server. In future we will improve it to minimize blocking (or even avoid it completely).",important,['sql'],IGNITE,Improvement,Critical,2017-08-08 12:29:28,4
13093139,Fix failed test in .NET suite.,"Preface:
I've found we use closeQuiet() method in LuceneIndex.close() that suppress exceptions. 
So, this is why we have no issues here before.

I'd think when index is closing, it is expected that all queries being cancelled and at the moment all QueryCursors (which use IndexReaders) has been closed already.
But I' observe it is not true in some cases.

Looking at GridCacheProcessor.stopCache() method we call onCacheStop()-> unregisterCache -> table.onDrop() -> luceneIdx.close().

Looks like someone forget to close Cursor or\and Cursor wasn't closed during query cancelation.

We have to investigate this and ",MakeTeamcityGreenAgain,"['cache', 'platforms']",IGNITE,Test,Major,2017-08-08 11:45:46,1
13092902, Ignite Cache 6: Flaky failure IgniteOptimisticTxSuspendResumeMultiServerTest.testTxTimeoutOnSuspend on TC,"Test sometimes fails on teamcity, please see
http://ci.ignite.apache.org/project.html?projectId=Ignite20Tests&testNameId=-6026696383836355176&tab=testDetails

{noformat}
java.lang.AssertionError: Exception has not been thrown.
    at org.apache.ignite.testframework.GridTestUtils.assertThrowsWithCause(GridTestUtils.java:425)
    at org.apache.ignite.internal.processors.cache.distributed.IgniteOptimisticTxSuspendResumeTest$15.applyx(IgniteOptimisticTxSuspendResumeTest.java:464)
    at org.apache.ignite.internal.processors.cache.distributed.IgniteOptimisticTxSuspendResumeTest$15.applyx(IgniteOptimisticTxSuspendResumeTest.java:455)
    at org.apache.ignite.internal.processors.cache.distributed.IgniteOptimisticTxSuspendResumeTest$CI2Exc.apply(IgniteOptimisticTxSuspendResumeTest.java:697)
    at org.apache.ignite.internal.processors.cache.distributed.IgniteOptimisticTxSuspendResumeTest.executeTestForAllCaches(IgniteOptimisticTxSuspendResumeTest.java:669)
    at org.apache.ignite.internal.processors.cache.distributed.IgniteOptimisticTxSuspendResumeTest.testTxTimeoutOnSuspend(IgniteOptimisticTxSuspendResumeTest.java:455)
{noformat}

Test was created under issue IGNITE-5712

Does not reprocuced locally (30 runs on Win10).

But on CI server success rate is 94%",MakeTeamcityGreenAgain,[],IGNITE,Test,Major,2017-08-07 15:09:03,2
13092447,.NET: Incorrect conflicting type error,"Incorrect conflicting type error can occur when registering the same time from multiple threads simultaneously:

{code}
Conflicting type IDs [type1='Row', type2='Row', typeId=113114]
{code}

{{Marshaller.AddType}} should check if existing type is the same as new one (as we do it in {{AddUserType}}, see other usages of {{ThrowConflictingTypeError}}).",.NET,['platforms'],IGNITE,Bug,Critical,2017-08-04 11:19:41,0
13092270,.NET: DataTable can't be serialized,"{{System.Data.DataTable}} can't be serialized:

{code}
cache.Put(1, new DataTable());
{code}

results in exception:

{code}
System.InvalidCastException: Unable to cast object of type 'Apache.Ignite.Core.Impl.Binary.BinaryWriter' to type 'System.IConvertible'.
   at System.Convert.ToBoolean(Object value, IFormatProvider provider)
   at System.Data.DataTable.GetObjectData(SerializationInfo info, StreamingContext context)
   at Apache.Ignite.Core.Impl.Binary.SerializableSerializer.WriteBinary[T](T obj, BinaryWriter writer) in S:\W\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Binary\SerializableSerializer.cs:line 64
   at Apache.Ignite.Core.Impl.Binary.BinaryWriter.Write[T](T obj) in S:\W\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Binary\BinaryWriter.cs:line 1224
   at Apache.Ignite.Core.Impl.Binary.Marshaller.Marshal[T](T val, IBinaryStream stream) in S:\W\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Binary\Marshaller.cs:line 159
   at Apache.Ignite.Core.Impl.Binary.Marshaller.Marshal[T](T val) in S:\W\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Binary\Marshaller.cs:line 144
{code}

StackOverflow question: https://stackoverflow.com/questions/45490249/how-to-store-datatable-in-apache-ignite",.NET,['platforms'],IGNITE,Bug,Major,2017-08-03 18:29:14,0
13092235,.NET: Decouple Marshaller from Ignite,"{{Marshaller}} class has {{Ignite}} property, which is used everywhere as a convenient accessor.
With thin client we don't have an {{Ignite}} instance ({{IgniteClient}} is there instead). 
Also, {{Marshaller}} itself only needs {{Ignite.BinaryProcessor}}, which is also tied to JNI.

So the plan is:
* Add {{IBinaryProcessor}} interface
* Replace {{Marshaller.Ignite}} with {{Marshaller.BinaryProcessor}}
* Fix external {{Marshaller.Ignite}} usages in some way",.NET,"['platforms', 'thin client']",IGNITE,Improvement,Major,2017-08-03 16:23:48,0
13092173,.NET: EntryProcessorExample closes immediately after execution,"EntryProcessorExample closes immediately after execution. Please, add:

{code}
Console.WriteLine();
Console.WriteLine("">>> Example finished, press any key to exit ..."");
Console.ReadKey();
{code}",.NET,['platforms'],IGNITE,Improvement,Minor,2017-08-03 12:09:32,0
13091849,.NET: Thin client: cache.Get for primitives,"IGNITE-5899 implements cache.Get on Java side and includes a simple raw socket test.
Next step is to provide .NET thin client foundation, so that user can call something like 

{{Ignition.GetClient(ClientConfiguration).GetCache(string).Get(...)}}",.NET,"['platforms', 'thin client']",IGNITE,Task,Major,2017-08-02 10:28:21,0
13091566,Thin client: cache.Get for primitives,"Implement {{cache.Get}} for primitive data types via thin client protocol.

This will include:
* New client type in {{SqlListenerNioListener}}
* {{PlatformRequestHandler implements SqlListenerRequestHandler}}, {{PlatformMessageParser implements SqlListenerMessageParser}}
* Integration test in .NET (just because .NET is the first platform to adopt this; we could do tests in Java as well, but this is redundant for now)

Support only primitive types for now to avoid dealing with bynary type metadata, schemas, compact footers, etc.


",.NET,"['platforms', 'thin client']",IGNITE,Task,Major,2017-08-01 14:38:23,0
13091551,.NET: Datagrid.QueryDmlExample: Incorrect result if run example  with standalone Apache Ignite.NET node,"{{Datagrid.QueryDmlExample}}: Incorrect result if run example with standalone Apache Ignite.NET node

without standalone node:
{code}
>>> Inserted data
>>> 1: John Doe, ASF, 4000
>>> 2: Jane Roe, ASF, 5000
>>> 3: Mary Major, Eclipse, 2000
>>> 4: Richard Miles, Eclipse, 3000

>>> Update salary for ASF employees
>>> 1: John Doe, ASF, 4400
>>> 2: Jane Roe, ASF, 5500
>>> 3: Mary Major, Eclipse, 2000
>>> 4: Richard Miles, Eclipse, 3000

>>> Delete non-ASF employees
>>> 1: John Doe, ASF, 4400
>>> 2: Jane Roe, ASF, 5500
{code}

with standalone node:
{code}
>>> Inserted data
>>> 1: John Doe, ASF, 4000
>>> 3: Mary Major, Eclipse, 2000

>>> Update salary for ASF employees
>>> 1: John Doe, ASF, 4400
>>> 3: Mary Major, Eclipse, 2000

>>> Delete non-ASF employees
>>> 1: John Doe, ASF, 4400
{code}
",.NET,['platforms'],IGNITE,Bug,Minor,2017-08-01 13:55:13,0
13091539,Ignite Cache Full API Multi JVM: 7 test failed in master,"Failure on TC: http://ci.ignite.apache.org/viewLog.html?buildId=749671&tab=buildResultsDiv&buildTypeId=Ignite20Tests_IgniteCacheFullApiMultiJvm#testNameId-6305397409161667157

org.apache.ignite.internal.processors.cache.multijvm (7)
- GridCachePartitionedNearDisabledMultiJvmFullApiSelfTest.testTransformResourceInjection 	
- GridCachePartitionedNearDisabledMultiJvmP2PDisabledFullApiSelfTest.testTransformResourceInjection 	
- GridCachePartitionedNearDisabledOnheapMultiJvmFullApiSelfTest.testTransformResourceInjection 	
- GridCacheReplicatedMultiJvmFullApiSelfTest.testTransformResourceInjection 	
- GridCacheReplicatedMultiJvmP2PDisabledFullApiSelfTest.testTransformResourceInjection 	
- GridCacheReplicatedNearOnlyMultiJvmFullApiSelfTest.testTransformResourceInjection 	
- GridCacheReplicatedOnheapMultiJvmFullApiSelfTest.testTransformResourceInjection 

Stable reproducible locally
First failure changes:
http://ci.ignite.apache.org/viewLog.html?buildId=727280&tab=buildChangesDiv&buildTypeId=Ignite20Tests_IgniteCacheFullApiMultiJvm

{noformat}

IGNITE-5753: CPP Memory leak fixed.	Igor Sapego 
IGNITE-5444: Collections.singletonList is not properly serialized by binary marshaller. This closes #2217.	andrey.mashenkov 
ignite-5722 Cache entries stay in onheap after scan query execution for OFFHEAP_TIRED cache with expiry policy	Andrey Gura 
ignite-5489 Fixed possible connection leaks when loadPreviousValue set to true	tikhonovnicolay 
IGNITE-4831: Add an option to disable MBeans. This closes #2265.	andrey.mashenkov   
{noformat}
Stacktrace: 
{noformat}
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] class org.apache.ignite.IgniteCheckedException: java.lang.NullPointerException
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.store.GridCacheStoreManagerAdapter.loadFromStore(GridCacheStoreManagerAdapter.java:327)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.store.GridCacheStoreManagerAdapter.load(GridCacheStoreManagerAdapter.java:282)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.GridCacheMapEntry.readThrough(GridCacheMapEntry.java:445)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.GridCacheMapEntry.innerGet0(GridCacheMapEntry.java:699)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.GridCacheMapEntry.innerGet(GridCacheMapEntry.java:461)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxPrepareFuture.onEntriesLocked(GridDhtTxPrepareFuture.java:389)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxPrepareFuture.prepare0(GridDhtTxPrepareFuture.java:1213)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxPrepareFuture.mapIfLocked(GridDhtTxPrepareFuture.java:668)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxPrepareFuture.prepare(GridDhtTxPrepareFuture.java:1034)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTxLocal.prepareAsync(GridDhtTxLocal.java:410)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.transactions.IgniteTxHandler.prepareNearTx(IgniteTxHandler.java:459)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.transactions.IgniteTxHandler.processNearTxPrepareRequest(IgniteTxHandler.java:121)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.transactions.IgniteTxHandler.access$000(IgniteTxHandler.java:95)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.transactions.IgniteTxHandler$1.apply(IgniteTxHandler.java:141)
[2017-08-01 16:27:28,330][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.transactions.IgniteTxHandler$1.apply(IgniteTxHandler.java:139)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.processMessage(GridCacheIoManager.java:1042)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.onMessage0(GridCacheIoManager.java:561)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:378)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:304)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.GridCacheIoManager.access$100(GridCacheIoManager.java:99)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.GridCacheIoManager$1.onMessage(GridCacheIoManager.java:293)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.managers.communication.GridIoManager.invokeListener(GridIoManager.java:1556)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:1184)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.managers.communication.GridIoManager.access$4200(GridIoManager.java:126)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.managers.communication.GridIoManager$9.run(GridIoManager.java:1097)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.util.StripedExecutor$Stripe.run(StripedExecutor.java:483)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at java.lang.Thread.run(Thread.java:748)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] Caused by: javax.cache.integration.CacheLoaderException: java.lang.NullPointerException
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	... 27 more
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] Caused by: java.lang.NullPointerException
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.H2CacheStoreStrategy$H2CacheStore.getFromDb(H2CacheStoreStrategy.java:382)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.H2CacheStoreStrategy$H2CacheStore.load(H2CacheStoreStrategy.java:336)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.CacheStoreBalancingWrapper.load(CacheStoreBalancingWrapper.java:98)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	at org.apache.ignite.internal.processors.cache.store.GridCacheStoreManagerAdapter.loadFromStore(GridCacheStoreManagerAdapter.java:316)
[2017-08-01 16:27:28,346][INFO ][Thread-4][jvm-fe4cadea] 	... 26 more
{noformat}",MakeTeamcityGreenAgain,[],IGNITE,Bug,Critical,2017-08-01 13:35:25,2
13090845,Store TTL expire times in B+ tree on per-partition basis,"TTL expire times for entries are stored in PendingEntriesTree, which is singleton for cache. When expiration occurs, all system threads iterate through the tree in order to remove expired entries. Iterating through single tree causes contention and perfomance loss. 
Related performance issue: https://issues.apache.org/jira/browse/IGNITE-5793
We should keep instance of PendingEntriesTree for each partition, like we do for CacheDataTree.",MakeTeamcityGreenAgain,"['cache', 'persistence']",IGNITE,Improvement,Major,2017-07-28 17:56:48,1
13090753,JettyRestProcessorUnsignedSelfTest and JettyRestProcessorSignedSelfTest fails on master,"JettyRestProcessorSignedSelfTest and JettyRestProcessorUnsignedSelfTest fails on master
when run whole test class.
If run single method both tests succeed.

testMetadataLocal:

{noformat}
junit.framework.AssertionFailedError: expected:<5> but was:<6>
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.failNotEquals(Assert.java:329)
	at junit.framework.Assert.assertEquals(Assert.java:78)
	at junit.framework.Assert.assertEquals(Assert.java:234)
	at junit.framework.Assert.assertEquals(Assert.java:241)
	at junit.framework.TestCase.assertEquals(TestCase.java:409)
	at org.apache.ignite.internal.processors.rest.JettyRestProcessorAbstractSelfTest.testMetadataLocal(JettyRestProcessorAbstractSelfTest.java:1127)
{noformat}

testMetadataRemote
{noformat}
junit.framework.AssertionFailedError: expected:<6> but was:<7>
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.failNotEquals(Assert.java:329)
	at junit.framework.Assert.assertEquals(Assert.java:78)
	at junit.framework.Assert.assertEquals(Assert.java:234)
	at junit.framework.Assert.assertEquals(Assert.java:241)
	at junit.framework.TestCase.assertEquals(TestCase.java:409)
	at org.apache.ignite.internal.processors.rest.JettyRestProcessorAbstractSelfTest.testMetadataRemote(JettyRestProcessorAbstractSelfTest.java:1174)
{noformat}

",MakeTeamcityGreenAgain,['clients'],IGNITE,Bug,Minor,2017-07-28 11:51:07,2
13090720,.NET: LINQPad ComputeExample missing namespace import,"{{Apache.Ignite.Core.Deployment}} namespace import is missing in {{ComputeExample.linq}}, it does not compile without manual changes.",.NET,['platforms'],IGNITE,Bug,Major,2017-07-28 08:36:51,0
13090704,PlatformMessageParser & PlatformRequestHandler,"Inherit {{SqlListenerMessageParser}} and {{SqlListenerRequestHandler}}, implement basic handshake protocol (see how {{OdbcMessageParser}} works).",.NET,['platforms'],IGNITE,Sub-task,Major,2017-07-28 07:13:31,0
13090170,ODBC: Make sure ODBC driver works correctly with RazorSQL.,"Users often try to use ODBC driver to connect to Ignite with RazorSQL. However, it can't be used with our driver, as it tries to configure driver to act according to unsupported ODBC version. Here is the log:
{noformat}
razorsql        12d8-1374	ENTER SQLAllocEnv 
		HENV *              0x2FBEECB0

razorsql        12d8-1374	EXIT  SQLAllocEnv  with return code 0 (SQL_SUCCESS)
		HENV *              0x2FBEECB0 ( 0x003DE650)

razorsql        12d8-1374	ENTER SQLAllocConnect 
		HENV                0x003DE650
		HDBC *              0x2FBEEC10

razorsql        12d8-1374	EXIT  SQLAllocConnect  with return code 0 (SQL_SUCCESS)
		HENV                0x003DE650
		HDBC *              0x2FBEEC10 ( 0x003DE6D0)

razorsql        12d8-1374	ENTER SQLSetConnectOption 
		HDBC                0x003DE6D0
		SQLINTEGER                 103 <SQL_LOGIN_TIMEOUT>
		SQLPOINTER                35

razorsql        12d8-1374	EXIT  SQLSetConnectOption  with return code 0 (SQL_SUCCESS)
		HDBC                0x003DE6D0
		SQLINTEGER                 103 <SQL_LOGIN_TIMEOUT>
		SQLPOINTER                35

razorsql        12d8-1374	ENTER SQLDriverConnectW 
		HDBC                0x003DE6D0
		HWND                0x00000000
		WCHAR *             0x6F861F7C [      -3] ""******\ 0""
		SWORD                       -3 
		WCHAR *             0x6F861F7C 
		SWORD                       -3 
		SWORD *             0x00000000
		UWORD                        0 <SQL_DRIVER_NOPROMPT>

razorsql        12d8-1374	EXIT  SQLDriverConnectW  with return code -1 (SQL_ERROR)
		HDBC                0x003DE6D0
		HWND                0x00000000
		WCHAR *             0x6F861F7C [      -3] ""******\ 0""
		SWORD                       -3 
		WCHAR *             0x6F861F7C 
		SWORD                       -3 
		SWORD *             0x00000000
		UWORD                        0 <SQL_DRIVER_NOPROMPT>

		DIAG [S1000] ODBC version is not supported. (0) 

		DIAG [08001] Failed to establish connection with the host. (0) 

razorsql        12d8-1374	ENTER SQLErrorW 
		HENV                0x00000000
		HDBC                0x003DE6D0
		HSTMT               0x00000000
		WCHAR *             0x2FBEEAF4
		SDWORD *            0x2FBEEB3C
		WCHAR *             0x2FBEE6F4 
		SWORD                      300 
		SWORD *             0x2FBEEB38

razorsql        12d8-1374	EXIT  SQLErrorW  with return code 0 (SQL_SUCCESS)
		HENV                0x00000000
		HDBC                0x003DE6D0
		HSTMT               0x00000000
		WCHAR *             0x2FBEEAF4 [       5] ""S1000""
		SDWORD *            0x2FBEEB3C (0)
		WCHAR *             0x2FBEE6F4 [      30] ""ODBC version is not supported.""
		SWORD                      300 
		SWORD *             0x2FBEEB38 (30)

razorsql        12d8-1374	ENTER SQLErrorW 
		HENV                0x00000000
		HDBC                0x003DE6D0
		HSTMT               0x00000000
		WCHAR *             0x2FBEEAF4
		SDWORD *            0x2FBEEB3C
		WCHAR *             0x2FBEE6F4 
		SWORD                      300 
		SWORD *             0x2FBEEB38

razorsql        12d8-1374	EXIT  SQLErrorW  with return code 0 (SQL_SUCCESS)
		HENV                0x00000000
		HDBC                0x003DE6D0
		HSTMT               0x00000000
		WCHAR *             0x2FBEEAF4 [       5] ""08001""
		SDWORD *            0x2FBEEB3C (0)
		WCHAR *             0x2FBEE6F4 [      45] ""Failed to establish connection with the host.""
		SWORD                      300 
		SWORD *             0x2FBEEB38 (45)

razorsql        12d8-1374	ENTER SQLErrorW 
		HENV                0x00000000
		HDBC                0x003DE6D0
		HSTMT               0x00000000
		WCHAR *             0x2FBEEAF4
		SDWORD *            0x2FBEEB3C
		WCHAR *             0x2FBEE6F4 
		SWORD                      300 
		SWORD *             0x2FBEEB38

razorsql        12d8-1374	EXIT  SQLErrorW  with return code 100 (SQL_NO_DATA_FOUND)
		HENV                0x00000000
		HDBC                0x003DE6D0
		HSTMT               0x00000000
		WCHAR *             0x2FBEEAF4
		SDWORD *            0x2FBEEB3C
		WCHAR *             0x2FBEE6F4 
		SWORD                      300 
		SWORD *             0x2FBEEB38

razorsql        12d8-1374	ENTER SQLFreeConnect 
		HDBC                0x003DE6D0

razorsql        12d8-1374	EXIT  SQLFreeConnect  with return code 0 (SQL_SUCCESS)
		HDBC                0x003DE6D0

razorsql        12d8-1374	ENTER SQLFreeEnv 
		HENV                0x003DE650

razorsql        12d8-1374	EXIT  SQLFreeEnv  with return code 0 (SQL_SUCCESS)
		HENV                0x003DE650
{noformat}",important odbc,['odbc'],IGNITE,Improvement,Major,2017-07-26 11:09:45,3
13089950,.NET: Do not close transaction on async commit/rollback,Committed / rolled back transactions do not need to be closed. {{TransactionImpl.CloseWhenComplete}} and {{PlatformTransactions.txClose}} perform unnecessary work. This also causes problems with {{commitAsync}} and {{rollbackAsync}} since we close a transaction on another thread.,.NET,['platforms'],IGNITE,Improvement,Critical,2017-07-25 17:16:31,0
13089803,Abstract away Java->.NET calls,All calls from Java to platform go through static {{PlatformCallbackUtils}}. For thin client we are interested in {{inLongOutLong}} and {{inLongLongLongObjectOutLong}} only; these two should be abstracted in some way so we can replace JNI with RPC when needed.,.NET,['platforms'],IGNITE,Sub-task,Major,2017-07-25 08:43:45,0
13088463,.NET: Transaction fails with multiple write-through caches,"To reproduce: create two caches with {{WriteThrough=true}} and some {{CacheStore}} (implementation can be empty).

Attempt to update both caches within a transaction:

{code}
            using (var tx = ignite.GetTransactions().TxStart())
            {
                cache1.Put(1, 1);
                cache2.Put(1, 1);

                tx.Commit();
            }
{code}

Exception occurs:
{code}
(err) Failed to notify listener: o.a.i.i.processors.cache.distributed.near.GridNearTxLocal$16@17695df3javax.cache.integration.CacheWriterException: PlatformNativeException [cause=System.InvalidOperationException [idHash=1909546776, hash=1265661973, ClassName=System.InvalidOperationException, Data=null, ExceptionMethod=8
Get
Apache.Ignite.Core, Version=2.1.0.19388, Culture=neutral, PublicKeyToken=a487a7ff0b2aaa4a
Apache.Ignite.Core.Impl.Handle.HandleRegistry
T Get[T](Int64, Boolean), HelpURL=null, HResult=-2146233079, InnerException=null, Message=Resource handle has been released (is Ignite stopping?)., RemoteStackIndex=0, RemoteStackTraceString=null, Source=Apache.Ignite.Core, StackTraceString=   at Apache.Ignite.Core.Impl.Handle.HandleRegistry.Get[T](Int64 id, Boolean throwOnAbsent) in C:\w\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Handle\HandleRegistry.cs:line 262
   at Apache.Ignite.Core.Impl.Cache.Store.CacheStoreInternal`2.Invoke(IBinaryStream stream, Ignite grid) in C:\w\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Cache\Store\CacheStoreInternal.cs:line 112
   at Apache.Ignite.Core.Impl.Cache.Store.CacheStore.Invoke(PlatformMemoryStream stream, Ignite grid) in C:\w\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Cache\Store\CacheStore.cs:line 127
   at Apache.Ignite.Core.Impl.Unmanaged.UnmanagedCallbacks.CacheStoreInvoke(Int64 memPtr) in C:\w\incubator-ignite\modules\platforms\dotnet\Apache.Ignite.Core\Impl\Unmanaged\UnmanagedCallbacks.cs:line 366
{code}

Explanation:
* Cache stores share same session within a transaction
* Session in Java is uses to store .NET session handle, so both stores have the same .NET session (which is good: consistent with Java)
* Each store calls sessionEnd, so session gets released multiple times - this causes HandleRegistry exception

Current unit test uses Spring XML with shared {{PlatformDotNetCacheStoreFactory}}, which caches created store instance for some reason, so the bug is hidden, since both caches use the same store instance.",.NET,['platforms'],IGNITE,Bug,Critical,2017-07-19 16:48:27,0
13088321,.NET: QueryIndex.InlineSize,"{{QueryIndex.InlineSize}} controls index payload when it is stored in Ignite page memory.
Also add {{QuerySqlField.IndexInlineSize}} and {{CacheConfiguration.SqlIndexMaxInlineSize}}.",.NET,['platforms'],IGNITE,Improvement,Major,2017-07-19 08:17:51,0
13087685,Add Ignite.setActive method to C++ API,"Presently, {{Ignite.setActive}} method is unavailable in C++ API which means that there is now way to activate a cluster with the Ignite Persistent Store enabled from a C++ application side.

Add this method and add a respective documentation paragraph to that section
https://apacheignite-cpp.readme.io/v2.1/docs/ignite-persistence#section-usage

in the same way as it's aleady done for .NET:
https://apacheignite-net.readme.io/v2.1/docs/ignite-persistent-store#section-usage
",cpp,['platforms'],IGNITE,New Feature,Major,2017-07-17 18:49:29,3
13087629,Refactor PlatformProcessor to PlatformTarget mechanism,"{{PlatformProcessor}} has a number of methods that are called over JNI ({{createCache}} and so on). All other JNI calls (for {{PlatformCache}}, etc) go through {{PlatformTarget}} mechanism.

To avoid code duplication in JNI and ThinClient code all platform calls should use the same mechanism.",.NET,['platforms'],IGNITE,Sub-task,Major,2017-07-17 16:16:18,0
13087624,Abstract away .NET->Java calls,All JNI interaction goes through static {{UnmanagedUtils}} calls. This should be refactored so that unmanaged call mechanism can be replaced with something else for each particular node.,.NET,['platforms'],IGNITE,Sub-task,Major,2017-07-17 16:06:30,0
13086252,.NET: Failed to load ignite.jni.dll when starting up multiple nodes,"When starting multiple nodes at once (with a script of some kind), failure to load unmanaged dll can occur:

{code}
set IGNITE_NATIVE_TEST_CLASSPATH=true

FOR /L %%A IN (1,1,20) DO (
  start Apache.Ignite.exe
)
{code}

Exception:
{code}
ERROR: System.TypeInitializationException: The type initializer for 'Apache.Ignite.Core.Impl.Unmanaged.UnmanagedUtils' threw an exception. ---> Apache.Ignite.Core.Common.IgniteException: Failed to load ignite.jni.dll: 126
   at Apache.Ignite.Core.Impl.Unmanaged.UnmanagedUtils..cctor()
   --- End of inner exception stack trace ---
   at Apache.Ignite.Core.Impl.Unmanaged.UnmanagedUtils.Initialize()
   at Apache.Ignite.Core.Impl.IgniteUtils.LoadDlls(String configJvmDllPath, ILogger log)
   at Apache.Ignite.Core.Ignition.Start(IgniteConfiguration cfg)
   at Apache.Ignite.IgniteRunner.Main(String[] args)
{code}

Error codes may be 5 (ERROR_ACCESS_DENIED) or 126 (ERROR_MOD_NOT_FOUND).",.NET,['platforms'],IGNITE,Bug,Major,2017-07-11 13:23:00,0
13085450,.NET: Negative field offset values can be observed on 2-byte offsets,"{{BinaryObjectSchemaSerializer.WriteSchema}} uses {{ushort.MaxValue}} as a boundary for 2-byte offsets. {{ReadSchema}} uses {{ReadShort}}, which returns negative offsets for anything above {{short.MaxValue}}.

* Ensure that all offsets are always non-negative (use uint in {{BinaryObjectSchemaField}} probably)
* Check how Java handles this
* Add tests for all edge cases",.NET,['platforms'],IGNITE,Bug,Blocker,2017-07-07 08:50:30,0
13084575,JavaEmbeddedIgniteRDDSelfTest sometimes hangs on TC,"Test hangs when IgniteContext.close(...) is called:
{noformat}
[12:20:47]W:		 [org.apache.ignite:ignite-spark] Thread [name=""test-runner-#1%spark.JavaEmbeddedIgniteRDDSelfTest%"", id=77, state=WAITING, blockCnt=59, waitCnt=10012]
[12:20:47]W:		 [org.apache.ignite:ignite-spark]     Lock [object=scala.concurrent.impl.Promise$CompletionLatch@77d938ab, ownerName=null, ownerId=-1]
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at sun.misc.Unsafe.park(Native Method)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:994)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1303)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at scala.concurrent.impl.Promise$DefaultPromise.tryAwait(Promise.scala:202)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at scala.concurrent.impl.Promise$DefaultPromise.ready(Promise.scala:218)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at scala.concurrent.impl.Promise$DefaultPromise.ready(Promise.scala:153)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:619)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at org.apache.spark.SparkContext.runJob(SparkContext.scala:1918)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at org.apache.spark.SparkContext.runJob(SparkContext.scala:1931)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at org.apache.spark.SparkContext.runJob(SparkContext.scala:1944)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at org.apache.spark.SparkContext.runJob(SparkContext.scala:1958)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at org.apache.spark.rdd.RDD$$anonfun$foreachPartition$1.apply(RDD.scala:925)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at org.apache.spark.rdd.RDD$$anonfun$foreachPartition$1.apply(RDD.scala:923)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at org.apache.spark.rdd.RDD.withScope(RDD.scala:362)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at org.apache.spark.rdd.RDD.foreachPartition(RDD.scala:923)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at o.a.i.spark.IgniteContext.close(IgniteContext.scala:168)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at o.a.i.spark.JavaIgniteContext.close(JavaIgniteContext.scala:68)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at o.a.i.spark.JavaEmbeddedIgniteRDDSelfTest.testReadDataFromIgnite(JavaEmbeddedIgniteRDDSelfTest.java:181)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at java.lang.reflect.Method.invoke(Method.java:606)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at junit.framework.TestCase.runTest(TestCase.java:176)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at o.a.i.testframework.junits.GridAbstractTest.runTestInternal(GridAbstractTest.java:1997)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at o.a.i.testframework.junits.GridAbstractTest.access$000(GridAbstractTest.java:132)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at o.a.i.testframework.junits.GridAbstractTest$5.run(GridAbstractTest.java:1912)
[12:20:47]W:		 [org.apache.ignite:ignite-spark]         at java.lang.Thread.run(Thread.java:745)
{noformat}",MakeTeamcityGreenAgain test-fail,['spark'],IGNITE,Bug,Major,2017-07-04 14:53:53,2
13084553,.NET: Store deserialized values on heap optionally,"Add an option to store deserialized cache values in .NET heap for quick access (Java side has this: IGNITE-4535).

.NET filters and predicates (scan query, entry processors, etc) require binary object copy and deserialization on every call. Storing deserialized entries in .NET memory would remove this overhead.

Java uses eviction policy to control size and behavior of on-heap cache.",.NET,['platforms'],IGNITE,New Feature,Major,2017-07-04 13:37:13,0
13084274,ODBC: Few consecutive inserts lead to exception,"Exception: ('HY010', '[HY010] Query is not prepared. (0) (SQLExecDirectW)')

Reproducer in python:


{code:java}
import pyodbc
cnxn = pyodbc.connect(DRIVER='{Apache Ignite}', ADDRESS='localhost:10800',CACHE=""Person"", autocommit=True)
cursor = cnxn.cursor()
select_string= ""INSERT INTO Person(_key, id, firstName, lastName, salary) VALUES (?, ? , 'abcd', 'dhsagd', 1000)""
id_list = (1,1)
id_list2 = (2,2)
cursor.execute(select_string, id_list) 
cursor.execute(select_string, id_list2) 
{code}

Also, the same behavior with executemany.
",important odbc,['odbc'],IGNITE,Bug,Major,2017-07-03 14:44:30,3
13084264,.NET: serialization failed when entity has property with IList and equals to null,"when using datastreamer or cache.put, insert entities into a cache, if there are some properties with IList type and value is null, serialization might failed, and no cache exists in H2 database even queryentities has been configured. but cache.count() return the count that inserted.
like codes below generates an empty cache in ignite h2 db:

{code:java}

                    using (var dc = GetDbContext(branchId)) //dc is DbContext
                    {
                        var infoList = dc.Set<CustMainInfo>().AsNoTracking().Where(cust => cust.BranchID == branchId && cust.DeleteFlag == 0).ToList(); //CustMainInfo has a property IList<Company> Subsidaries and value is null.

                        foreach (var item in infoList)
                        {
                            ds.AddData(item.PK, item);
                            count++;
                            if (count % 1000 == 0)
                                Console.WriteLine(string.Format(""CustMainInfoLoader：{0}"", count));
                        }
                        ds.Flush();
                    }
                
{code}",.NET,['platforms'],IGNITE,Bug,Major,2017-07-03 14:13:20,0
13083699,.NET: CacheConfiguration copy constructor,Can be useful to start more caches with existing config. Currently read & write routines are not symmetrical in regards to cache plugins.,.NET,['platforms'],IGNITE,Bug,Trivial,2017-06-30 08:14:06,0
13083698,.NET: incorrect jvm.dll lookup paths for JRE,"{{jvm.dll}} is located in different subfolders in JRE and JDK. Current code only accounts for JDK. So if we set {{JAVA_HOME}} to a custom xcopy-deployed JRE folder, jvm.dll can not be found.

With normal Windows installations it works because we use registry for that.",.NET,['platforms'],IGNITE,Bug,Major,2017-06-30 08:13:09,0
13083554,CPP: Support BINARY and VARBINARY types for C++,"We need to add an ability for user to get columns of {{byte[]}} types using {{SqlFieldsQuery}} in C\+\+. Also, we need to add ability to add SQL parameters of type {{byte[]}} using C\+\+.",cpp important,['platforms'],IGNITE,New Feature,Major,2017-06-29 18:47:52,3
13083385,.NET: IgniteConfiguration.LocalEventListeners,"Propagate {{IgniteConfiguration.LocalEventListeners}} to .NET. This allows catching all events right from the node start.

* Can we unsubscribe from these events later? Does Java support this?
* What about GetEvents for a cluster group, how do we handle local listeners in this case?",.NET,['platforms'],IGNITE,Improvement,Major,2017-06-29 08:08:25,0
13083140,.NET: Enums do not work as a messaging topic or message,"Trying to use .NET enum in {{IMessaging}} causes ""unknown pair"" exception in Java. May be we are missing binary mode somewhere.",.NET,['platforms'],IGNITE,Bug,Major,2017-06-28 13:46:12,0
13083129,.NET: Inject resources into event listeners and filters,{{IEventListener}} and {{IEventFilter}} must support {{[InstanceResource]}} attribute.,.NET,['platforms'],IGNITE,Bug,Major,2017-06-28 13:02:26,0
13082187,CPP: Implement Compute::Broadcast() for Ignite C++,Need to implement method {{Compute::Broadcast}} and {{Compute::BroadcastAsync}} for Ignite C++.,cpp,['platforms'],IGNITE,New Feature,Major,2017-06-23 18:05:34,3
13081788,CPP: Implement Compute::Run() for Ignite C++,Need to implement method {{Compute::Run}} and {{Compute::RunAsync}} for Ignite C++,cpp,['platforms'],IGNITE,New Feature,Major,2017-06-22 13:51:14,3
13080437,C++ ODBC example fails,"C++ ODBC example fails:

>>> Cache ODBC example started.

[15:12:08,620][SEVERE][sql-connector-#38%null%][OdbcRequestHandler] Failed to execute SQL query [reqId=1, req=OdbcQueryExecuteRequest [schema=PUBLIC, sqlQry=INSERT INTO Person (_key, orgId, firstName, lastName, resume, salary) VALUES (?, ?, ?, ?, ?, ?)�, args=[1, 1, John, Doe, Master Degree., 2200.0]]]
class org.apache.ignite.internal.processors.query.IgniteSQLException: Failed to parse query: INSERT INTO Person (_key, orgId, firstName, lastName, resume, salary) VALUES (?, ?, ?, ?, ?, ?)
	at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.queryDistributedSqlFields(IgniteH2Indexing.java:1293)
	at org.apache.ignite.internal.processors.query.GridQueryProcessor$6.applyx(GridQueryProcessor.java:1856)
	at org.apache.ignite.internal.processors.query.GridQueryProcessor$6.applyx(GridQueryProcessor.java:1852)
	at org.apache.ignite.internal.util.lang.IgniteOutClosureX.apply(IgniteOutClosureX.java:36)
	at org.apache.ignite.internal.processors.query.GridQueryProcessor.executeQuery(GridQueryProcessor.java:2293)
	at org.apache.ignite.internal.processors.query.GridQueryProcessor.querySqlFieldsNoCache(GridQueryProcessor.java:1860)
	at org.apache.ignite.internal.processors.odbc.odbc.OdbcRequestHandler.executeQuery(OdbcRequestHandler.java:177)
	at org.apache.ignite.internal.processors.odbc.odbc.OdbcRequestHandler.handle(OdbcRequestHandler.java:116)
	at org.apache.ignite.internal.processors.odbc.SqlListenerNioListener.onMessage(SqlListenerNioListener.java:152)
	at org.apache.ignite.internal.processors.odbc.SqlListenerNioListener.onMessage(SqlListenerNioListener.java:44)
	at org.apache.ignite.internal.util.nio.GridNioFilterChain$TailFilter.onMessageReceived(GridNioFilterChain.java:279)
	at org.apache.ignite.internal.util.nio.GridNioFilterAdapter.proceedMessageReceived(GridNioFilterAdapter.java:109)
	at org.apache.ignite.internal.util.nio.GridNioAsyncNotifyFilter$3.body(GridNioAsyncNotifyFilter.java:97)
	at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:110)
	at org.apache.ignite.internal.util.worker.GridWorkerPool$1.run(GridWorkerPool.java:70)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.h2.jdbc.JdbcSQLException: Table ""PERSON"" not found; SQL statement:
INSERT INTO Person (_key, orgId, firstName, lastName, resume, salary) VALUES (?, ?, ?, ?, ?, ?) [42102-195]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.command.Parser.readTableOrView(Parser.java:5506)
	at org.h2.command.Parser.readTableOrView(Parser.java:5483)
	at org.h2.command.Parser.parseInsert(Parser.java:1056)
	at org.h2.command.Parser.parsePrepared(Parser.java:416)
	at org.h2.command.Parser.parse(Parser.java:320)
	at org.h2.command.Parser.parse(Parser.java:292)
	at org.h2.command.Parser.prepareCommand(Parser.java:257)
	at org.h2.engine.Session.prepareLocal(Session.java:573)
	at org.h2.engine.Session.prepareCommand(Session.java:514)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1204)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:73)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:288)
	at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.prepareStatement(IgniteH2Indexing.java:398)
	at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.queryDistributedSqlFields(IgniteH2Indexing.java:1273)
	... 17 more
An error occurred: Failed to execute prepared statement: HY000: class org.apache.ignite.internal.processors.query.IgniteSQLException: Failed to parse query: INSERT INTO Person (_key, orgId, firstName, lastName, resume, salary) VALUES (?, ?, ?, ?, ?, ?)

>>> Example finished, press 'Enter' to exit ... ",odbc,"['odbc', 'platforms']",IGNITE,Bug,Major,2017-06-16 15:32:27,3
13080418,.NET: IgniteConfiguration.ActiveOnStart,Propagate property to .NET,.NET,['platforms'],IGNITE,Improvement,Major,2017-06-16 13:54:17,0
13080148,.NET: IIgnite.Active,Propagate {{isActive}} and {{active}} methods.,.NET,['platforms'],IGNITE,Improvement,Major,2017-06-15 17:10:18,0
13080084,.NET: Persistent Store tests,"Configuration is propagated in IGNITE-5341, now add proper tests that persistence works via .NET as expected.",.NET,['platforms'],IGNITE,Improvement,Major,2017-06-15 13:11:59,0
13079815,.NET: PersistentStoreMetrics,"* {{PersistentStoreConfiguration.EnableMetrics}}, {{RateTimeInterval}}, {{SubIntervals}} properties
* {{PersistenceMetrics}} class
* {{IIgnite.GetPersistenceMetrics()}} method",.NET,['platforms'],IGNITE,Improvement,Major,2017-06-14 16:29:28,0
13079768,JettyRestProcessorAbstractSelfTest may hang up,"3 tests in client test: org.apache.ignite.internal.processors.rest.JettyRestProcessorAbstractSelfTest
- testDecrement
- testIncrement
- testExe

may hang up without any response.
 ",MakeTeamcityGreenAgain test-fail,[],IGNITE,Task,Major,2017-06-14 13:36:17,4
13079475,ODBC: SQLNumParams works incorrectly ,"{{SQLNumParams}} ODBC call should return number of parameters, required by by prepared statement. Instead, it returns number of parameters, which are currently binded by user.",odbc,['odbc'],IGNITE,Bug,Major,2017-06-13 12:51:35,3
13078526,Deprecate IgniteConfiguration.marshaller property,"{{IgniteConfiguration.marshaller}} property should be deprecated. We have a lot of components which heavily depend on BinaryMarshaller (e.g. ,NET, CPP, ODBC), so there is no need to allow users override it.

Let's remove it in 3.0.",important,['general'],IGNITE,Task,Major,2017-06-09 07:19:15,4
13078525,Add CacheKeyConfiguration to CacheConfiguration,"Currently affinity column of certain type is not known on startup, as types are registered dynamically. For this reason affinity column could be resolved incorrectly if needed before type is registered. E.g. this is the case for our H2 tables, which need affinity key column on startup.

This could be resolved by setting {{IgniteConfiguration.cacheKeyConfiguration}} property, which maps type name to affinity key column name. However, this mechanism is not flexible enough because mappings cannot be changed in runtime.

We should add similar property to cache configuration and use it to resolve affinity column. Ideally, affinity key should be removed from {{BinaryType}} at all.

Discussion on the dev list: https://mail-archives.apache.org/mod_mbox/ignite-dev/201706.mbox/browser",important,['cache'],IGNITE,Task,Major,2017-06-09 07:15:47,4
13078350,.NET: Incorrect binary object hash code calculation,"Hash code is calculated over binary object data with the following code in Java and .NET:
{code}
for (int i = start; i <= end; i++)
    hash = 31 * hash + data[i];
{code}

Where {{data}} is {{byte[]}} in Java and .NET.
And {{byte}} is signed in Java and unsigned in .NET.

So in our simple tests on small values it works, but fails on real world data.

As a result, for non-primitive keys:
* DML is broken
* Java interop is broken",.NET,['platforms'],IGNITE,Bug,Critical,2017-06-08 15:09:26,0
13078288,.NET: Update IDataStreamer.AllowOverwrite documentation,"{{IDataStreamer.AllowOverwrite}} is false by default, which means {{SkipStore}} is implicitly true.

This is explained in Java documentation, but not in .NET.

Probably need to update readme.io as well.",.NET,[],IGNITE,Improvement,Major,2017-06-08 11:24:24,0
13077983,.NET: CacheConfiguration.GroupName,"Propagate {{CacheConfiguration.GroupName}} configuration property.

Caches within the same group underneath use single physical Ignite cache.",.NET,['platforms'],IGNITE,Improvement,Major,2017-06-07 12:51:19,0
13077966,Yardstick sql benchmarks broken on Ignite-5267 branch,"Yardstick benchmarks:
* sql-query
* sql-query-join
* sql-query-put 

broken in  Ignite-5267 branch, in master all ok. 

Exception:
<00:39:22><main><yardstick> Starting warmup.                                                                                                                                                                                                                                                                                                     
Finishing main test [ts=1496795962893, date=Wed Jun 07 00:39:22 UTC 2017]                                                                                                                                                                                                                                                                        
ERROR: Shutting down benchmark driver to unexpected exception.                                                                                                                                                                                                                                                                                   
Type '--help' for usage.                                                                                                                                                                                                                                                                                                                         
javax.cache.CacheException: class org.apache.ignite.internal.processors.query.IgniteSQLException: Failed to parse query: SELECT ""query"".""Person""._KEY, ""query"".""Person""._VAL FROM ""query"".""Person"" WHERE salary >= ? and salary <= ?                                                                                                             
        at org.apache.ignite.internal.processors.cache.IgniteCacheProxy.query(IgniteCacheProxy.java:807)                                                                                                                                                                                                                                         
        at org.apache.ignite.yardstick.cache.IgniteSqlQueryBenchmark.executeQuery(IgniteSqlQueryBenchmark.java:90)                                                                                                                                                                                                                               
        at org.apache.ignite.yardstick.cache.IgniteSqlQueryBenchmark.test(IgniteSqlQueryBenchmark.java:64)                                                                                                                                                                                                                                       
        at org.yardstickframework.impl.BenchmarkRunner$2.run(BenchmarkRunner.java:178)                                                                                                                                                                                                                                                           
        at java.lang.Thread.run(Thread.java:745)                                                                                                                                                                                                                                                                                                 
Caused by: class org.apache.ignite.internal.processors.query.IgniteSQLException: Failed to parse query: SELECT ""query"".""Person""._KEY, ""query"".""Person""._VAL FROM ""query"".""Person"" WHERE salary >= ? and salary <= ?                                                                                                                              
        at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.queryDistributedSqlFields(IgniteH2Indexing.java:1291)                                                                                                                                                                                                                 
        at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.queryDistributedSql(IgniteH2Indexing.java:1196)                                                                                                                                                                                                                       
        at org.apache.ignite.internal.processors.query.GridQueryProcessor$8.applyx(GridQueryProcessor.java:1947)                                                                                                                                                                                                                                 
        at org.apache.ignite.internal.processors.query.GridQueryProcessor$8.applyx(GridQueryProcessor.java:1945)                                                                                                                                                                                                                                 
        at org.apache.ignite.internal.util.lang.IgniteOutClosureX.apply(IgniteOutClosureX.java:36)                                                                                                                                                                                                                                               
        at org.apache.ignite.internal.processors.query.GridQueryProcessor.executeQuery(GridQueryProcessor.java:2283)                                                                                                                                                                                                                             
        at org.apache.ignite.internal.processors.query.GridQueryProcessor.queryDistributedSql(GridQueryProcessor.java:1944)                                                                                                                                                                                                                      
        at org.apache.ignite.internal.processors.query.GridQueryProcessor.querySql(GridQueryProcessor.java:1924)                                                                                                                                                                                                                                 
        at org.apache.ignite.internal.processors.cache.IgniteCacheProxy.query(IgniteCacheProxy.java:792)                                                                                                                                                                                                                                         
        ... 4 more                                                                                                                                                                                                                                                                                                                               
Caused by: org.h2.jdbc.JdbcSQLException: Column ""SALARY"" not found; SQL statement:                                                                                                                                                                                                                                                               
SELECT ""query"".""Person""._KEY, ""query"".""Person""._VAL FROM ""query"".""Person"" WHERE salary >= ? and salary <= ? [42122-195]                                                                                                                                                                                                                          
        at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)                                                                                                                                                                                                                                                                  
        at org.h2.message.DbException.get(DbException.java:179)                                                                                                                                                                                                                                                                                  
        at org.h2.message.DbException.get(DbException.java:155)                                                                                                                                                                                                                                                                                  
        at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:147)                                                                                                                                                                                                                                                                
        at org.h2.expression.Comparison.optimize(Comparison.java:178)                                                                                                                                                                                                                                                                            
        at org.h2.expression.ConditionAndOr.optimize(ConditionAndOr.java:130)                                                                                                                                                                                                                                                                    
        at org.h2.command.dml.Select.prepare(Select.java:842)                                                                                                                                                                                                                                                                                    
        at org.h2.command.Parser.prepareCommand(Parser.java:262)                                                                                                                                                                                                                                                                                 
        at org.h2.engine.Session.prepareLocal(Session.java:573)                                                                                                                                                                                                                                                                                  
        at org.h2.engine.Session.prepareCommand(Session.java:514)                                                                                                                                                                                                                                                                                
        at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1204)                                                                                                                                                                                                                                                                   
        at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:73)                                                                                                                                                                                                                                                               
        at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:288)                                                                                                                                                                                                                                                                  
        at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.prepareStatement(IgniteH2Indexing.java:397)                                                                                                                                                                                                                           
        at org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing.queryDistributedSqlFields(IgniteH2Indexing.java:1271)                                                                                                                                                                                                                 
        ... 12 more                                                                              








",important,"['sql', 'yardstick']",IGNITE,Bug,Critical,2017-06-07 11:17:18,4
13076869,ODBC: Clear server cursor automatically when last result piece is transmitted,"When last part of result set is sent from the server, we should do the following:
1) Clear server-side cursor
2) Set special marker on the client side that ""cursor"" close request is not needed. This way we will save two network hops for typical DML request.",odbc performance,['odbc'],IGNITE,Task,Major,2017-06-02 13:50:52,3
13076831,.NET: NuGet suite fails on TC,IGNITE-5365 changed the build procedure and JAR files are in a different place now.,.NET,['platforms'],IGNITE,Bug,Major,2017-06-02 12:25:58,0
13076483,ODBC: Expose SqlFieldsQuery hints as parameters,"Same as for JDBC (IGNITE-5376):

We should expose:
1) {{enforceJoinOrder}}
2) {{distributedJoins}}
3) {{replicatedOnly}}
4) {{collocated}}

As per the rest:
- {{partitions}} should be avoided for now, as they are very request-specific
- {{local}} flag cannot be supported for now, as ""cacheless"" query execution cannot be executed through ""local"" workflow for now (we cannot determine query parallelism)
- {{timeout}} - will be handled in another ticket.",important,['odbc'],IGNITE,Task,Major,2017-06-01 11:19:46,3
13076476,.NET: IgniteConfiguration.LongQueryWarningTimeout,"* Add {{IgniteConfiguration.LongQueryWarningTimeout}}
* Mark {{CacheConfiguration.LongQueryWarningTimeout}} as obsolete",.NET,['platforms'],IGNITE,Improvement,Major,2017-06-01 11:11:50,0
13076181,.NET: Nullable enum field in binary object causes type cast exception,"Reproducer:

{code}
enum TestEnum
{
	TestValue1,
	TestValue2
};

class TestClass
{
	public string Name { get; }
	public TestEnum? EnumValue { get; }

	public TestClass(string name, TestEnum? enumValue)
	{
		Name = name;
		EnumValue = enumValue;
	}
}
...

cache.Put(""TestElem1"", new TestClass(""TestElem1"", TestEnum.TestValue1));
cache.Get(""TestElem1"");  // exception
{code}

Exception:
{code}
No coercion operator is defined between types 'Apache.Ignite.Core.Impl.Binary.BinaryEnum' and 'System.Nullable`1[UserQuery+TestEnum]'. 
{code}",.NET,['platforms'],IGNITE,Bug,Critical,2017-05-31 12:47:57,0
13076154,.NET: Peer deployment does not load runtime dependencies,"Discovered while testing in LINQPad:
* Start Apache.Ignite.exe with enabled peer loading
* Run a computation from LINQPad that uses {{Dump}} extension method

It fails with ""Cannot load LINQPad assembly"" error, because CLR tries to load that assembly during job execution, not during deserialization.

We should wrap {{ExecuteRemote}} in a {{PeerAssemblyResolver}} to handle runtime assembly requests.",.NET,['platforms'],IGNITE,Bug,Major,2017-05-31 10:13:30,0
13076117,.NET: ConfigSectionName can not be overridden from command line,"{{Apache.Ignite.exe}} takes startup arguments from app.config and command line. Command line arguments override those from app.config.

This is not the case for {{ConfigSectionName}} and {{ConfigFileName}}.",.NET,['platforms'],IGNITE,Bug,Major,2017-05-31 08:01:40,0
13076105,.NET: Pure SQL & DDL example,"Create an example where all operations are performed via SQL API, not using cache API. See IGNITE-5159.",.NET,"['examples', 'platforms']",IGNITE,Improvement,Major,2017-05-31 07:05:10,0
13075845,".NET: Interoperate with JVM directly, get rid of C++ layer","We can work with JNI directly using P/Invoke, there is no real need for C++ layer.

Advantages of removing C++ layer:
* *No MSVC++ 2010 dependency*
* *No build tools required for development*
* Simplify and speed up the build procedure
* No embedded libraries
* Easier crossplatform support (IGNITE-2662)
",.NET xplat,['platforms'],IGNITE,Improvement,Major,2017-05-30 14:13:21,0
13075815,.NET: PersistentStoreConfiguration,"Configure page memory store from .NET
+ make sure that metrics API is up to date with Java.",.NET important,['platforms'],IGNITE,Improvement,Major,2017-05-30 12:22:01,0
13075793,.NET: TestMultipleAssembliesIndirectDependencyMultiLevel fails on TC,"{{PeerAssemblyLoadingTest.TestMultipleAssembliesIndirectDependencyMultiLevel}} fails on TC. Does not reproduce locally.

The problem is that we try to serialize WaitHandle for some reason, and this does not happen locally.

Try to add debug output to see the entire object graph.",.NET,['platforms'],IGNITE,Bug,Major,2017-05-30 10:25:39,0
13075788,CPP: linux examples: names of executable files should be the same type,"C++ linux examples: make executable file names the same type:
ignate-<example_name>-example

now names are:
ignite-continuous-query-example
ignite-odbcexample
ignite-putgetexample
ignite-queryexample ",cpp examples,['platforms'],IGNITE,Task,Minor,2017-05-30 10:06:30,3
13075656,.NET: Include Apache.Ignite.exe in the main NuGet package,"Include {{Apache.Ignite.exe}} in the NuGet package.
This will allow nuget-based standalone node deployment via simple command: {{nuget install Apache.Ignite}}.

After all, everything else is available via NuGet, except this exe file.",.NET NuGet,['platforms'],IGNITE,Improvement,Major,2017-05-29 15:38:59,0
13075615,.NET: Peer assembly loading documentation,"Document peer assembly loading on https://apacheignite-net.readme.io/

Update existing docs about {{-assembly}} switch, etc.",.NET,"['documentation', 'platforms']",IGNITE,Task,Major,2017-05-29 13:42:45,0
13075380,.NET: Failing query tests due to IGNITE-5287 (sqlEscapeAll),Changes introduced in IGNITE-5287 caused multiple failures in .NET suites. Need to investigate why and fix.,.NET,"['platforms', 'sql']",IGNITE,Task,Major,2017-05-27 18:30:18,0
13075354,"CPP: Add ""schema"" property to SqlFieldsQuery",Propagate new properties from IGNITE-5307.,cpp,"['platforms', 'sql']",IGNITE,Task,Major,2017-05-27 11:05:49,3
13075138,.NET: DML update via LINQ,"Bulk update with LINQ:

{code}
var persons = ignite.GetCache<int, Person>(""persons"").AsCacheQueryable();

int affectedRows = persons.Where(x => x.Key > 10).UpdateAll(x => x.Value.OrgId = 7);
{code}

See bulk delete with {{RemoveAll}}, IGNITE-4904.",.NET LINQ important,['platforms'],IGNITE,New Feature,Major,2017-05-26 10:06:56,0
13074120,.NET: MemoryMetrics API improvements to be ported to .NET,Improvements already made for linked ticket need to be ported on .NET side. ,.NET important,"['general', 'platforms']",IGNITE,Task,Major,2017-05-23 09:07:16,0
13073839,ODBC: use schema notion instead of cache name,"We should no longer operate on ""cacheName"". Instead, we should work with schemas.",cpp odbc,"['odbc', 'sql']",IGNITE,Task,Major,2017-05-22 12:16:04,3
13073159,.NET: SQL query timeouts,"Propagate {{SqlQuery.Timeout}} and {{SqlFieldsQuery.Timeout}}.

When timeout is exceeded, {{QueryCancelledException}} is thrown in Java wrapped into {{CacheException}}.",.NET newbie,['platforms'],IGNITE,Improvement,Major,2017-05-18 14:35:48,0
13073054,.NET: Fields query cursor metadata,"Same as IGNITE-5252 for .NET:
Provide a way to get fields information from the query cursor.",.NET newbie,"['platforms', 'sql']",IGNITE,Improvement,Minor,2017-05-18 09:00:22,0
13071922,.NET: Reflective serializer fails on custom dictionaries ,"See {{BinaryReflectiveActions:489}}. All types that implement {{IDictionary}} and are not generic are written as {{Hashtable}}, which is not correct, since type information is lost. Deserialization fails with {{InvalidCastException}}.",.NET,['platforms'],IGNITE,Bug,Major,2017-05-15 08:48:38,0
13071466,CPP: Segfault on Put,"The following segfault happens when:
  - using multiple caches (suffixed with number as in X_\{number\}),
  - caches contain same type of object but not the same objects,
  - doing multithreaded `::Put` operation, only one put is done on each cache concurrently, independent caches (X_1, X_2, ...) can be operated on and called `::Put` on concurrently, but that should not be relevant as cache api is thread safe.

{code:none}
C  [test+0xf8116a]  std::less<int>::operator()(int const&, int const&) const+0x14
C  [test+0x1106305]  std::_Rb_tree<int, std::pair<int const, ignite::common::concurrent::SharedPointer<ignite::impl::binary::BinaryTypeSnapshot> >, std::_Select1st<std::pair<int const, ignite::common::concurrent::SharedPointer<ignite::impl::binary::BinaryTypeSnapshot> > >, std::less<int>, std::allocator<std::pair<int const, ignite::common::concurrent::SharedPointer<ignite::impl::binary::BinaryTypeSnapshot> > > >::_M_lower_bound(std::_Rb_tree_node<std::pair<int const, ignite::common::concurrent::SharedPointer<ignite::impl::binary::BinaryTypeSnapshot> > >*, std::_Rb_tree_node_base*, int const&)+0x41
C  [test+0x1105a9d]  std::_Rb_tree<int, std::pair<int const, ignite::common::concurrent::SharedPointer<ignite::impl::binary::BinaryTypeSnapshot> >, std::_Select1st<std::pair<int const, ignite::common::concurrent::SharedPointer<ignite::impl::binary::BinaryTypeSnapshot> > >, std::less<int>, std::allocator<std::pair<int const, ignite::common::concurrent::SharedPointer<ignite::impl::binary::BinaryTypeSnapshot> > > >::find(int const&)+0x45
C  [test+0x1104e7f]  std::map<int, ignite::common::concurrent::SharedPointer<ignite::impl::binary::BinaryTypeSnapshot>, std::less<int>, std::allocator<std::pair<int const, ignite::common::concurrent::SharedPointer<ignite::impl::binary::BinaryTypeSnapshot> > > >::find(int const&)+0x23
C  [test+0x1104031]  ignite::impl::binary::BinaryTypeManager::GetHandler(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x6f
C  [test+0xe6de2d]  void ignite::impl::binary::BinaryWriterImpl::WriteTopObject<std::shared_ptr<test::data> >(std::shared_ptr<test::data> const&)+0xbb
C  [test+0xe6cd48]  ignite::impl::In2Operation<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<test::data> >::ProcessInput(ignite::impl::binary::BinaryWriterImpl&)+0x3e
C  [test+0x1128cf1]  ignite::impl::interop::InteropTarget::WriteTo(ignite::impl::interop::InteropMemory*, ignite::impl::InputOperation&, ignite::IgniteError&)+0xa9
C  [test+0x1128f67]  ignite::impl::interop::InteropTarget::OutOp(int, ignite::impl::InputOperation&, ignite::IgniteError&)+0x65
C  [test+0x1125f41]  ignite::impl::cache::CacheImpl::Put(ignite::impl::InputOperation&, ignite::IgniteError&)+0x2d
C  [test+0xe5539a]  ignite::cache::Cache<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<test::data> >::Put(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<test::data> const&, ignite::IgniteError&)+0x52
{code}

There seems to be some kind of race situation:
{code:none}
0x0000000001381206 in std::less<int>::operator() (this=0x1a4e4b0, __x=<error reading variable>, __y=@0x7fff80846e04: 2066246303) at /usr/include/c++/6.3.1/bits/stl_function.h:386
{code}
{code:none}
#4  0x00000000015040cd in ignite::impl::binary::BinaryTypeManager::GetHandler (this=0x1a560d0, typeName=""test.data"", typeId=2066246303) at src/impl/binary/binary_type_manager.cpp:56
56                          std::map<int32_t, SPSnap>::iterator it = snapshots0.find(typeId);
(gdb) print snapshots0
$10 = std::map with 42286576 elements = {[42312864] = {ptr = 0x285a4a0, impl = 0x0}<error reading variable: Cannot access memory at address 0x110>...}
(gdb) print snapshot
$11 = {ptr = 0x7fffffffda4f, impl = 0x11}
{code}

`impl` pointers seems to be corrupted on multiple places.",c++ cpp,['platforms'],IGNITE,Bug,Critical,2017-05-12 08:12:33,3
13071455,.NET: Non-Int32 enums can't be serialized,"There is no way to serialize non-Int32 enums. 

Enums in .NET can be {{byte}}, {{sbyte}}, {{short}}, {{ushort}}, {{int}}, {{uint}}, {{long}}, {{ulong}} (see https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/enum).

We should write all of these except {{long}} and {{ulong}} properly (converting them to int and back).
{{long}} and {{ulong}} enums should be written as object.",.NET,['platforms'],IGNITE,Bug,Major,2017-05-12 07:47:51,0
13070828,.NET: TryGetIgnite does not work with AutoGenerateIgniteInstanceName,"{{Ignition.GetIgnite()}} has been reworked to return instance with any name if there is only one present. This is needed to work nicely with {{AutoGenerateIgniteInstanceName}}.

{{TryGetIgnite()}}, however, was not updated.",.NET,['platforms'],IGNITE,Bug,Major,2017-05-10 14:19:55,0
13070771,.NET: BinaryEnum.ToString,{{BinaryEnum}} should provide {{ToString}} overload.,.NET newbie,['platforms'],IGNITE,Improvement,Major,2017-05-10 11:26:37,0
13069229,.NET: Dynamic type registration uses assembly-qualified type name,"{{BinaryProcessor.RegisterType}} uses {{AssemblyQualifiedName}}, which includes assembly version.

This has two issues:
* We ignore current name mapper, so this type name is not the same as type name in binary metadata, marshaller, etc
* This breaks when same type comes from assemblies with different versions, which is a valid scenario. Binary protocol is flexible and does not care about type versions, it tolerates new or missing fields.",.NET,['platforms'],IGNITE,Bug,Major,2017-05-04 18:04:34,0
13069185,.NET: Compute peer deployment example,"* Add example for IGNITE-2492.
* Enable peer loading in LINQPad compute example so it works with a standalone node (update docs there), explain how to run Apache.Ignite.exe from NuGet",.NET,['platforms'],IGNITE,Improvement,Major,2017-05-04 15:48:25,0
13068975,CPP: Provide basic Ignite Compute Grid Examples,As a part of Ignite Compute release for C++ we need to provide several examples to demonstrate basic capabilities.,cpp,['platforms'],IGNITE,Task,Major,2017-05-03 23:24:12,3
13068960,CPP: Continuous Queries example has to demonstrate the filter usage,"The existing continuous queries example [1] has to be extended to the usage of a remote filter explained here [2].

[1] https://github.com/apache/ignite/blob/master/modules/platforms/cpp/examples/continuous-query-example/src/continuous_query_example.cpp
[2] https://apacheignite-cpp.readme.io/docs/continuous-queries#section-remote-filter",cpp important,['platforms'],IGNITE,Task,Major,2017-05-03 22:11:27,3
13068832,CPP: Add remote filter to continuous queries C++ example.,"As we have added support for the remote filters for Ignite C++ (IGNITE-3575), we now need to modify continuous queries C++ example by adding remote filter to it.",cpp important,['platforms'],IGNITE,Task,Major,2017-05-03 16:39:05,3
13068788,Change C++ documentation according to breaking changes in 2.0,There was a bunch of breaking changes for Ignite C++ in 2.0 (IGNITE-3559). Need to make sure that documentation for 2.0 is relevant.,cpp documentation,"['documentation', 'platforms']",IGNITE,Sub-task,Major,2017-05-03 14:27:55,3
13068430,.NET: Improve remote error propagation,"When we rethrow remote exceptions, we should wrap them in another exception to preserve remote stack traces.

For example, {{ComputeAbstractClosureTask.OnResult}} uses {{throw err}}, where {{err}} is a deserialized remote exception. This call causes remote stack trace loss.

Instead we should do {{throw new IgniteException(""Remote computation failed"", err)}} which will preserve remote stack trace.


Same should be done for other remote invocation scenarios (event listeners and so on).",.NET,['platforms'],IGNITE,Improvement,Minor,2017-05-02 13:41:20,0
13068417,Add test suite for C++ examples,"Need to add test suite (or step in existing test suite) that would check C++ examples (build completes successfully, no exceptions thrown).",cpp examples,['platforms'],IGNITE,Task,Major,2017-05-02 13:09:47,3
13068416,CPP: Put-Get example fails to complete successfully.,"C++ Put-Get example crashes on start with the following exception:
{code}
Exception during start processors, node will be stopped and close connections
java.lang.IllegalArgumentException: Ouch! Argument is invalid: Cache name must not be null or empty.
        at org.apache.ignite.internal.util.GridArgumentCheck.ensure(GridArgumentCheck.java:109)
        at org.apache.ignite.internal.processors.cache.GridCacheUtils.validateCacheName(GridCacheUtils.java:1699)
        at org.apache.ignite.internal.processors.cache.GridCacheProcessor.registerCache(GridCacheProcessor.java:711)
        at org.apache.ignite.internal.processors.cache.GridCacheProcessor.registerCacheFromConfig(GridCacheProcessor.java:672)
        at org.apache.ignite.internal.processors.cache.GridCacheProcessor.start(GridCacheProcessor.java:651)
        at org.apache.ignite.internal.IgniteKernal.startProcessor(IgniteKernal.java:1763)
        at org.apache.ignite.internal.IgniteKernal.start(IgniteKernal.java:925)
        at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start0(IgnitionEx.java:1895)
        at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start(IgnitionEx.java:1647)
        at org.apache.ignite.internal.IgnitionEx.start0(IgnitionEx.java:1075)
        at org.apache.ignite.internal.IgnitionEx.start(IgnitionEx.java:573)
        at org.apache.ignite.internal.processors.platform.PlatformAbstractBootstrap.start(PlatformAbstractBootstrap.java:48)
        at org.apache.ignite.internal.processors.platform.PlatformIgnition.start(PlatformIgnition.java:76)
[15:49:19,229][SEVERE][main][IgniteKernal] Got exception while starting (will rollback startup routine).
java.lang.IllegalArgumentException: Ouch! Argument is invalid: Cache name must not be null or empty.
        at org.apache.ignite.internal.util.GridArgumentCheck.ensure(GridArgumentCheck.java:109)
        at org.apache.ignite.internal.processors.cache.GridCacheUtils.validateCacheName(GridCacheUtils.java:1699)
        at org.apache.ignite.internal.processors.cache.GridCacheProcessor.registerCache(GridCacheProcessor.java:711)
        at org.apache.ignite.internal.processors.cache.GridCacheProcessor.registerCacheFromConfig(GridCacheProcessor.java:672)
        at org.apache.ignite.internal.processors.cache.GridCacheProcessor.start(GridCacheProcessor.java:651)
        at org.apache.ignite.internal.IgniteKernal.startProcessor(IgniteKernal.java:1763)
        at org.apache.ignite.internal.IgniteKernal.start(IgniteKernal.java:925)
        at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start0(IgnitionEx.java:1895)
        at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start(IgnitionEx.java:1647)
        at org.apache.ignite.internal.IgnitionEx.start0(IgnitionEx.java:1075)
        at org.apache.ignite.internal.IgnitionEx.start(IgnitionEx.java:573)
        at org.apache.ignite.internal.processors.platform.PlatformAbstractBootstrap.start(PlatformAbstractBootstrap.java:48)
        at org.apache.ignite.internal.processors.platform.PlatformIgnition.start(PlatformIgnition.java:76)
[15:49:19] Ignite node stopped OK [uptime=00:00:10:971]
An error occurred: Ouch! Argument is invalid: Cache name must not be null or empty.
{code}",cpp examples,['platforms'],IGNITE,Bug,Major,2017-05-02 13:05:18,3
13068389,.NET: Custom platform toolset in build script,"Msbuild has {{/p:PlatformToolset=vXXX}} switch to override platform toolset. We should do two things:
* Use this switch automatically if there is no v100 present
* Add a build script parameter to control this",.NET,['platforms'],IGNITE,Improvement,Major,2017-05-02 11:23:11,0
13068388,.NET: Rework Getting Started documentation,"* How to run examples
* How to build with build.ps1 script
* Fix default config",.NET,"['documentation', 'platforms']",IGNITE,Improvement,Major,2017-05-02 11:17:50,0
13066297,.NET: Continuous query fails with exception on Java side,"Reported by the user, simple program being run twice:
{code}
using (IIgnite ignite = Ignition.Start(config))
            {
                var cache = ignite.GetOrCreateCache<Guid, Data>(nameof(Data));
                cache.QueryContinuous(new ContinuousQuery<Guid, Data>(new Listener()));
        
                // Pressing any key in the console will add a value to the cache
                while (true)
                {
                    Console.ReadKey();

                    var entry = new Data() { Id = Guid.NewGuid(), Value = ""a value"" };
                    cache.Put(entry.Id, entry);
                }
            }
{code}

Causes exceptions on Java side:
{code}
Exception in thread ""sys-#44%null%"" javax.cache.event.CacheEntryListenerException: Failed resolve class for ID: 3076010
        at org.apache.ignite.internal.processors.platform.utils.PlatformUtils.toCacheEntryListenerException(PlatformUtils.java:593)
        at org.apache.ignite.internal.processors.platform.utils.PlatformUtils.applyContinuousQueryEvents(PlatformUtils.java:551)
        at org.apache.ignite.internal.processors.platform.cache.query.PlatformContinuousQueryImpl.onUpdated(PlatformContinuousQueryImpl.java:200)
        at org.apache.ignite.internal.processors.cache.query.continuous.CacheContinuousQueryHandler.notifyCallback0(CacheContinuousQueryHandler.java:705)
        at org.apache.ignite.internal.processors.cache.query.continuous.CacheContinuousQueryHandler.notifyCallback(CacheContinuousQueryHandler.java:650)
        at org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.processNotification(GridContinuousProcessor.java:1089)
        at org.apache.ignite.internal.processors.continuous.GridContinuousProcessor.access$2000(GridContinuousProcessor.java:97)
        at org.apache.ignite.internal.processors.continuous.GridContinuousProcessor$8.onMessage(GridContinuousProcessor.java:741)
        at org.apache.ignite.internal.managers.communication.GridIoManager.invokeListener(GridIoManager.java:1222)
        at org.apache.ignite.internal.managers.communication.GridIoManager.access$2000(GridIoManager.java:108)
        at org.apache.ignite.internal.managers.communication.GridIoManager$GridCommunicationMessageSet.unwind(GridIoManager.java:2443)
        at org.apache.ignite.internal.managers.communication.GridIoManager.unwindMessageSet(GridIoManager.java:1182)
        at org.apache.ignite.internal.managers.communication.GridIoManager.access$2300(GridIoManager.java:108)
        at org.apache.ignite.internal.managers.communication.GridIoManager$8.run(GridIoManager.java:1151)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Unknown Source)
Caused by: class org.apache.ignite.binary.BinaryObjectException: Failed resolve class for ID: 3076010
        at org.apache.ignite.internal.binary.BinaryContext.descriptorForTypeId(BinaryContext.java:699)
        at org.apache.ignite.internal.binary.BinaryReaderExImpl.deserialize0(BinaryReaderExImpl.java:1491)
        at org.apache.ignite.internal.binary.BinaryReaderExImpl.deserialize(BinaryReaderExImpl.java:1450)
        at org.apache.ignite.internal.binary.BinaryObjectImpl.deserializeValue(BinaryObjectImpl.java:637)
        at org.apache.ignite.internal.binary.BinaryObjectImpl.value(BinaryObjectImpl.java:142)
        at org.apache.ignite.internal.processors.cache.CacheObjectContext.unwrapBinary(CacheObjectContext.java:272)
        at org.apache.ignite.internal.processors.cache.CacheObjectContext.unwrapBinaryIfNeeded(CacheObjectContext.java:160)
        at org.apache.ignite.internal.processors.cache.query.continuous.CacheContinuousQueryEvent.getValue(CacheContinuousQueryEvent.java:73)
        at org.apache.ignite.internal.processors.platform.utils.PlatformUtils.writeCacheEntryEvent(PlatformUtils.java:606)
        at org.apache.ignite.internal.processors.platform.utils.PlatformUtils.applyContinuousQueryEvents(PlatformUtils.java:539)
        ... 15 more
Caused by: class org.apache.ignite.IgniteCheckedException: Class definition was not found at marshaller cache and local file. [id=3076010, file=C:\Users\USER\AppData\Local\Temp\ignite\work\marshaller\3076010.classname]
        at org.apache.ignite.internal.MarshallerContextImpl.className(MarshallerContextImpl.java:218)
        at org.apache.ignite.internal.MarshallerContextAdapter.getClass(MarshallerContextAdapter.java:174)
        at org.apache.ignite.internal.binary.BinaryContext.descriptorForTypeId(BinaryContext.java:683)
{code}

For some reason Java tries to deserialize .NET value.
There is no exception on .NET side, but events are not delivered.",.NET,['platforms'],IGNITE,Bug,Major,2017-04-24 10:50:45,0
13066274,.NET: Support new communication parameters in configuration,"Need to support new value and remove old ones:
In TcpDiscoverySpi:
remove maxMissedHeartbeats
remove maxMissedClientHeartbeats
remove heartbeatFrequency
rename hbFreq to metricsUpdateFrequency
In IgniteConfiguration:
add clientFailureDetectionTimeout (long with bounds from metricsUpdateFrequency to Integer.MAX_VALUE)",.NET,['platforms'],IGNITE,Sub-task,Major,2017-04-24 09:02:32,0
13065923,.NET: build.ps1 fails for Any CPU config on PowerShell 4.0 and lower,{{MSBUILD : error MSB1008: Only one project can be specified. Switch: CPU}},.NET,['platforms'],IGNITE,Bug,Major,2017-04-21 15:45:46,0
13065861,Support SQL schema sharing between different caches,"Current every cache ""lives"" in it's own schema. We need to allow different caches to optionally share the same schema. This is an umbrella ticket for all related activities.",important,['sql'],IGNITE,Task,Major,2017-04-21 12:42:55,4
13065801,.NET: IIgnite.GetMemoryMetrics,Add {{IIgnite.GetMemoryMetrics()}} in .NET which delegates to {{Ignite.memoryMetrics()}} in Java,.NET,['platforms'],IGNITE,New Feature,Major,2017-04-21 08:08:20,0
13065554,.NET: CacheConfiguration.WriteBehindCoalescing,Please support new parameter CacheConfiguration.writeCoalescing in .Net.,.NET,['platforms'],IGNITE,Improvement,Major,2017-04-20 14:26:38,0
13065504,.NET: Document VC++ requirement,"{{Microsoft Visual C++ 2010 Redistributable Package}} (https://www.microsoft.com/en-us/download/details.aspx?id=14632) is required to run Ignite.NET.

Document this in readme.txt, readme.md, on apacheignite-net.readme.io.

Include ""Failed to load ignite.jni.dll: 126"" error to troubleshooting section.",.NET,['platforms'],IGNITE,Task,Major,2017-04-20 12:12:27,0
13065099,.NET: Add partition loss APIs,"* Propagate new config property: {{CacheConfiguration.PartitionLossPolicy}}
* Add {{IIgnite.ResetLostPartitions()}}
* Add {{ICache.GetLostPartitions()}}
* Add {{ICache.WithPartitionRecover()}}",.NET,['platforms'],IGNITE,Improvement,Major,2017-04-19 13:42:56,0
13065056,.NET: Remove default-dotnet.xml,"Default .NET config no longer differs from default Java config. Remove this file, update pom.xml.",.NET,['platforms'],IGNITE,Bug,Major,2017-04-19 11:18:02,0
13065025,.NET: IgniteConfiguration.MemoryConfiguration,"Allow configuring page memory natively in .NET. See IGNITE-4758.
* {{IgniteConfiguration.MemoryConfiguration}}
* {{CacheConfiguration.MemoryPolicyName}}",.NET,['platforms'],IGNITE,Improvement,Major,2017-04-19 09:03:18,0
13064641,DLL: Add dynamic index create-drop tests for geo-spacial indexes,Simple create-drop tests should be enough. They should reside in {{ignite-geospatial}} module.,important,['sql'],IGNITE,Task,Major,2017-04-18 09:26:25,4
13064414,.NET: SQL does not work with F# record types,"The following code returns null results:

{code}
type Person = 
    { 
        [<QuerySqlField>]
        id : int; 
        [<QuerySqlField>]
        name : String 
    }

...

cache.QueryFields(new SqlFieldsQuery(""from person select id"")).GetAll()
{code}

F# record fields have {{@}} symbol in the end. We should clean up or escape these.

{{Person [idHash=59332389, id@=1, name@=John]}}

Make sure other F#-specific types do not cause problems (tuples, structs, classes, nested types).",.NET,['platforms'],IGNITE,Bug,Major,2017-04-17 15:23:45,0
13064402,.NET: Tests cleanup,"* Use {{GetTestConfiguration}} where possible
* Make sure {{Localhost}} is set in all other cases to avoid external node discovery
* Remove binary type configuration where it is not necessary
* Get rid of Spring XML where it is not needed (Events, Messaging, etc)
* Replace try-catch with {{Assert.Throws}} where possible
* Make sure {{Ignition.StopAll}} is present where needed",.net,['platforms'],IGNITE,Improvement,Trivial,2017-04-17 13:54:56,0
13064084,Fix Segmented SQL Index self tests.,"Flacky tests:
org.apache.ignite.internal.processors.query.IgniteSqlSegmentedIndexSelfTest.testMultiNodeIndexSegmentation
org.apache.ignite.internal.processors.query.IgniteSqlSegmentedIndexSelfTest.testSingleNodeIndexSegmentationWithSwapEnabled",flaky,['sql'],IGNITE,Test,Major,2017-04-14 15:10:37,1
13064002,.NET: NuGet packages do not work with PackageReference in VS2017,"VS2017 & NuGet 4.0 come with a new way of referencing packages: instead of {{packages.config}}, there is a {{PackageReference}} section in {{csproj}} file: http://blog.nuget.org/20170316/NuGet-now-fully-integrated-into-MSBuild.html

This feature does not support {{install.ps1}} script which we use to insert build event for copying JARs to output directory.

This is not a blocker, since build event can be set up manually.",.NET,[],IGNITE,Bug,Major,2017-04-14 06:11:12,0
13063517,Rework logic of concurrent schema changes,H2's prepared statements store references to indexes that were present when the statement was parsed and initialized - this means that currently there's no way to prevent index usage if it goes down between the moment when the statement is created and actually executed. Have to come up with some new locking schema.,important,['sql'],IGNITE,Bug,Major,2017-04-12 14:46:20,4
13062773,.NET: IgniteConfiguration.EventStorageSpi,"IGNITE-4812 introduced {{NoOpEventStorageSpi}} which is now the default. This breaks event queries in .NET, and the only workaround is Spring XML.

Let's add this to C# configuration and fix tests.",.NET,['platforms'],IGNITE,Bug,Major,2017-04-10 04:43:54,0
13061259,Excessive service instances can be started with dynamic deployment.,"More than needed service instances can be started when service deployed dynamicly. 

For next service configuration all 3 instances will be started even if cluster has 2 ignites nodes only:
  cfg.setMaxPerNodeCount(1);
  cfg.setTotalCount(3);


See for details: http://apache-ignite-users.70518.x6.nabble.com/Ignite-may-start-more-service-instances-per-node-than-maxPerNodeCount-in-case-of-manual-redeploy-td11661.html",user-experience,['managed services'],IGNITE,Bug,Major,2017-04-03 21:20:01,1
13061164,.NET: Examples tests hang,"{{ExamplesTest}} hangs on various stages: http://195.239.208.174/viewType.html?buildTypeId=IgniteTests_IgnitePlatformNetLongRunnin

Logs show many multicast-related exceptions. We should probably avoid multicast in tests.",.NET,['platforms'],IGNITE,Bug,Major,2017-04-03 15:43:02,0
13060930,.NET: DML via LINQ,"Perform bulk update operations via LINQ: {{UPDATE WHERE}}, {{DELETE WHERE}}. Insert can already be done on object level with {{ICache.PutAll}}.

1) {{DELETE WHERE}}. This is quite simple. We can provide an extension method like this:

{code}
public static int DeleteAll<K, V>(this ICache<K, V> cache, IQueryable<ICacheEntry<K, V>> items);
{code}

2) {{UPDATE WHERE}}. This is tricky, because LINQ only works with expression trees, and multi-line methods are not supported. We should come up with a way to provide a list of columns and values, something like

{code}
public static int UpdateAll<K, V>(this ICache<K, V> cache, IQueryable<ICacheEntry<K, V>> items, params UpdateAction[] actions);
{code}

where UpdateAction can consist of a MemberExpression and a value for that member.

We should probably do delete as a separate task first.",.NET LINQ important,['platforms'],IGNITE,New Feature,Major,2017-04-01 20:19:18,0
13060712,.NET: StartFromApplicationConfiguration does not work in ASP.NET,"{{Ignition.StartFromApplicationConfiguration()}} fails with {{exePath must be specified when not running inside a stand alone exe}} error. Equivalent call in web environment would be {{System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration(""~"")}}, but we really do not want System.Web dependency.

{{Ignition.StartFromApplicationConfiguration(""igniteConfiguration"")}} works, and that is what we should do from the method without arguments.",.NET,['platforms'],IGNITE,Bug,Major,2017-03-31 15:27:39,0
13060680,.NET: Review Dictionary usage in APIs,"We have replaced {{IDictionary}} with {{IEnumerable<KeyValuePair<TK, TV>>}} in {{ICacheStore}}, let's do the same for other APIs like {{ICache.GetAll}}.

Reading GetAll results into a dictionary is inefficient in case when user only needs to iterate over results (unneeded allocation and hashing).",.NET breaking-api,[],IGNITE,Improvement,Major,2017-03-31 13:47:41,0
13060351,.NET: Meaningless exception on generic type in BinaryConfiguration,"{{BinaryTypeConfiguration}} does not support open generic types (when parameters are not specified, like {{typeof(List<>)}} instead of {{typeof(List<int>}}). But the exception is not helpful, and stack trace is very short (because of native transition).

We should try to provide meaningful exception message and a proper stack trace.",.NET,['platforms'],IGNITE,Bug,Major,2017-03-30 12:58:46,0
13059426,.NET: QueryEntity.TableName,"Add {{QueryEntity.TableName}} property and propagate to Java configuration.
Update LINQ provider to take this into account.",.NET,['platforms'],IGNITE,Improvement,Major,2017-03-27 15:01:57,0
13058472,.NET: StopAll on AppDomain unload,"In certain scenarios .NET {{AppDomain}} can be unloaded and started again. Java part of Ignite continues to run, but .NET part (including Ignite instances) is lost. User can no longer work with started nodes, .NET callback pointers are lost, etc.

1) Track AppDomain unload and stop all Ignite instances.
2) When starting Ignite, wait for node with specified name to stop.
3) Make it possible to auto-generate a unique grid name automatically? This may be useful in app.config.

IIS issues example: http://stackoverflow.com/questions/42961879/how-do-i-retrieve-a-started-ignite-instance-when-a-website-restart-occurs-in-iis/42968183#42968183",.NET,['platforms'],IGNITE,Improvement,Major,2017-03-23 05:44:54,0
13057794,.NET: Support complex type dictionaries in app.config configuration,"Only primitive types are supported currently for things like {{IgniteConfiguration.UserAttributes}}, there is no way to specify a user type as a value.",.NET,['platforms'],IGNITE,Improvement,Major,2017-03-21 06:34:11,0
13057491,Improve TEXT Query Documentation,"The documentation for Full TEXT Queries is thin at best:
* What syntax does it use?
* ...is it the full [Lucene Classic Query Parser Syntax|https://lucene.apache.org/core/6_3_0/queryparser/org/apache/lucene/queryparser/classic/package-summary.html]?
* ...if so how does the syntax map to the {{@QueryTextField}} annotation?
* How is Lucene analyser customisation performed?
* What version is supported? (looks like 3.5.0 which is pretty old, latest is 6.4.1)
* The [{{@QueryTextField}}|https://ignite.apache.org/releases/latest/javadoc/org/apache/ignite/cache/query/annotations/QueryTextField.html] JavaDoc refers to [{{CacheQuery}}|https://ignite.apache.org/releases/latest/javadoc/org/apache/ignite/internal/processors/cache/query/CacheQuery.html] but strangely this doesn't even appear in the official JavaDoc. It is because it's an 'internal' class?

It's mentioned multiple times as a feature, but doesn't look like much of Lucene can actually be utilised so clarifications would help greatly.",full-text-search javadoc,"['documentation', 'sql']",IGNITE,Improvement,Major,2017-03-20 11:06:42,1
13056669,Service is deployed on client when service configuration is provided on startup,"In case service configuration is provided on startup (i.e. as a part of {{IgniteConfiguration}}), the service can be deployed on the client node which is incorrect. Client nodes should be filtered out by default, like it's done in {{IgniteServices.deployXXX(..)}} methods.

Test reproducing the behavior is attached.",newbie,['managed services'],IGNITE,Bug,Major,2017-03-16 13:58:17,1
13056313,SQL: Eviction to swap failed if segmented index is used.,"PFA stacktrace attached.

SegmentID should be calculated from row key field in GridH2TreeIndex.findOne(row) method.",trivial,['sql'],IGNITE,Bug,Major,2017-03-15 15:18:19,1
13056294,Inject resources from platform plugins,Plugin authors should be able to inject resources ({{InstanceResourceAttribute}}) into arbitrary objects.,.NET,['platforms'],IGNITE,Sub-task,Major,2017-03-15 14:05:38,0
13055944,Start .NET plugins before OnIgniteStart,"Currently we initialize and start plugins ({{IPluginProvider.Start()}}) in {{OnIgniteStart}} callback. This is not correct. Java plugin part may invoke callbacks from its {{start()}} method, but these callbacks are not registered on .NET side yet.

Instead, we should initialize .NET plugins in {{PluginProcessor}} ctor.",.NET,['platforms'],IGNITE,Sub-task,Major,2017-03-14 14:00:16,0
13055876,.NET: Contains fails in LINQ when subquery comes from a variable,"Using Contains with subquery works when subquery is inline:

{code}
var res = personsQry.Where(x => orgsQry.Where(o => o.Value.Size < 100000).Select(o => o.Key).Contains(x.Value.OrgId));
{code}

And fails when extracted into a variable:

{code}
var orgIds = orgsQry.Where(o => o.Value.Size < 100000).Select(o => o.Key);
		
var res = personsQry.Where(x => orgIds.Contains(x.Value.OrgId));
{code}

Exception:
{code}
Failed to parse query: select _T0._key, _T0._val from ""persons-linq"".Person as _T0 where (_T0.OrgId IN (select _T1._key, _T1._val from ""orgs-linq"".Organization as _T1 ))
Caused by: org.h2.jdbc.JdbcSQLException: Subquery is not a single column query
{code}

This can be reproduced in {{CacheLinqTest.TestContains}} by extracting a variable:

{code}
var foo = orgCache
  .Where(orgEntry => orgEntry.Value.Name == ""Org_1"")
  .Select(orgEntry => orgEntry.Key);
{code}",.NET LINQ,['platforms'],IGNITE,Bug,Minor,2017-03-14 09:03:29,0
13045210,CPP: remove unsused targetver.h files,"Currently, there are {{targetver.h}} files in {{common}} and {{jni}} libs of the C++ client:
- modules/platforms/cpp/common/project/vs/targetver.h
- modules/platforms/cpp/jni/project/vs/targetver.h

They are not used as for now so remove them.",cpp,['platforms'],IGNITE,Task,Minor,2017-02-22 12:27:12,3
13044836,.NET: Remove swap API and cacheMemoryMode,"Swap space and cacheMemoryMode have been removed in Java. Do the same in .NET

branch {{ignite-3477}}",.NET,['platforms'],IGNITE,Sub-task,Major,2017-02-21 13:19:38,0
13044830,Some CPP files are missing from source releases.,"Some CPP files missing from the sources release. For example:
- modules/platforms/cpp/common/project/vs/targetver.h
- modules/platforms/cpp/jni/project/vs/targetver.h
- modules/platforms/cpp/core/include/ignite/impl/interop/interop_target.h

It seems that there is issue with files which has ""target"" in name.",cpp,['build'],IGNITE,Bug,Major,2017-02-21 12:40:30,3
13044601,Async operation support in platform plugins,Expose a set of async operations on {{IPlatformTarget}},.NET,['platforms'],IGNITE,Sub-task,Major,2017-02-20 16:49:10,0
13043932,.NET: Add IgniteUuid system type support,IGNITE-4611 makes it possible to handle {{IgniteUuid}} on .NET side as a first class binary object instead of a special case. Make sure to refactor current usages.,.NET,['platforms'],IGNITE,Improvement,Major,2017-02-17 09:38:33,0
13043641,Propagate platform cache plugin configuration to Java,Same as IGNITE-4685 but for cache plugins.,.NET,['platforms'],IGNITE,Sub-task,Major,2017-02-16 13:27:55,0
13042612,Add possibility to wrap Java plugin exceptions to .NET plugin exceptions,"Plugins with Java part can throw custom Java exceptions, which are mapped to {{IgniteException}}. We should add a way for plugin authors to map their custom Java exceptions to corresponding .NET exceptions.

This can be done by adding {{IPluginProvider.ConvertException}} method and iterating over plugins in {{ExceptionUtils.GetException}}.",.NET,['platforms'],IGNITE,Sub-task,Major,2017-02-13 16:54:16,0
13042594,.NET: Add ClassName and Message to JavaException,"See {{ExceptionUtils.GetException}}: we construct {{JavaException}} with stack trace only. If the user wants to map some custom Java exception, they have to parse stack trace.

We can easily add {{JavaException.ClassName}} and {{JavaException.Message}} properties for easier analysis.",.NET,['platforms'],IGNITE,Improvement,Major,2017-02-13 15:24:58,0
13042094,Propagate platform plugin configuration to Java,{{IPluginConfiguration}} implementations should be able to propagate data to Java side and update corresponding {{PluginConfiguration}} there.,.NET,['platforms'],IGNITE,Sub-task,Major,2017-02-10 15:32:33,0
13041394,CPP: Implement LoadCache method,Implement ability to load cache for C++ platform.,cpp,['platforms'],IGNITE,Task,Major,2017-02-08 14:22:50,3
13041349,.NET: Sort binary object fields,"Make sure that fields are sorted by name in all cases:

* Reflective serializer
* {{IBinarizable}} serialization
* {{[Serializable]}} serialization
* Custom serializer",.NET,['platforms'],IGNITE,Improvement,Major,2017-02-08 10:36:35,0
13038894,Add Java callback support for platform plugins,Plugin authors should be able to call .NET code from Java side.,.NET,['platforms'],IGNITE,Sub-task,Major,2017-01-30 13:43:55,0
13038447,.NET: MixedClusterTest leaves Java-only node running,"MixedClusterTest causes consequent tests to fail in some situations because it leaves java-only ""grid2"" node running. Looks like ExecuteJavaTask does not stop node properly.",.NET,['platforms'],IGNITE,Bug,Major,2017-01-27 14:10:47,0
13038174,CPP: Add documentation for DML,We need to add documentation for DML support once its implemented in C++ client.,cpp,"['documentation', 'platforms']",IGNITE,Task,Major,2017-01-26 16:18:21,3
13038094,CPP: Implement Field-access methods for binary objects,Currently we have very limited implementation of binary objects that does not  provide access to fields of the binary object. At least such methods as {{HasField}} and {{GetField}} should be implemented.,cpp,['platforms'],IGNITE,Task,Major,2017-01-26 12:10:33,3
13037749,.NET: Binary schema is not reset in BinaryReader,"{{BinaryReader}} does not reset {{_frame.Schema}} and {{_frame.SchemaMap}}. This can cause bugs with certain object nesting layouts. 

Make sure to write a test that reproduces this issue first.",.NET,['platforms'],IGNITE,Bug,Critical,2017-01-25 16:37:31,0
13036275,.NET: Rename IgniteConfiguration.gridName,The same as [IGNITE-3207|https://issues.apache.org/jira/browse/IGNITE-3207] for .NET,.net important,['platforms'],IGNITE,Improvement,Major,2017-01-19 17:17:14,0
13036201,Support CREATE INDEX DDL statements,"We need to implement support for dynamic {{CREATE INDEX}} and {{DROP INDEX}} invocations.
Design document: https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=67640367

Base branch: {{ignite-4565}}",important,"['cache', 'sql']",IGNITE,New Feature,Major,2017-01-19 12:23:27,4
13036199,Ensure that builder approach is used for all setters in public API,"*Problem*
We employed ""builder"" approach for some configuration classes:
{code}
class Configuration {
    Configuration setSomething(Something);
}
{code}

This is very convenient for users. However, only part of our configs employ this approach.

*Task*
Let's make sure that all other parts of our API follow this rule.",important,['general'],IGNITE,Task,Major,2017-01-19 12:21:40,1
13033016,.NET: Fix build warnings,"There are ~70 warnings in VS 2015 after build.
Fix them and make sure thet build fails on warnings.",newbie platforms,['platforms'],IGNITE,Task,Minor,2017-01-09 09:26:47,0
13029152,.NET: Unhelpful error message for same-table SelectMany in LINQ,"The following LINQ is not supported ({{RegionToRole}} is a collection, which is not understood by SQL):
{code}
users.Where(w => w.Value.ID == userId && !w.Value.IsDeleted)
                .SelectMany(sm => sm.Value.RegionToRole)
{code}

However, LINQ engine proceeds to generate an invalid query, which fails later in SQL engine:

{code}
Failed to parse query: select _T0._key, _T0._val from ""User"".User as _T0 , ""User"".User as _T0 where  ...
{code}

We should detect invalid LINQ early and throw an error with explanation.",.NET LINQ,['platforms'],IGNITE,Bug,Trivial,2016-12-19 14:50:36,0
13028643,Extend .NET plugin API to interact with Java,Plugin authors should be able to call Java part of the plugin via some {{IPluginContext}} API.,.NET,['platforms'],IGNITE,Sub-task,Major,2016-12-16 10:29:43,0
13027792,Define platform plugin API in Java,"* Move {{PlatformTarget}} to public package org.apache.ignite.platform

* Add {{PlatformPluginConfiguration}}, {{PlatformPluginContext}} and {{PlatformPluginPorvider}}, similar to regular plugins and to cache plugins. User should be able to add {{PlatformPluginConfiguration}} to {{PlatformConfiguration}}.",.NET,['platforms'],IGNITE,Sub-task,Major,2016-12-13 14:05:09,0
13027783,.NET: Improve documentation for query configuration combined with reflective serialization,"With automatic properties the situation is straightforward: mark property with [QuerySqlField].

With manual backing fields there may be some confusion, because reflective serializer operates on fields, and field names start with ""_"" in default naming convention. 

Make sure all situations are documented properly.",.NET,"['documentation', 'platforms']",IGNITE,Task,Major,2016-12-13 13:03:44,0
13026979,IndexingSpi support BinaryObjects,"For now key and values is being deserialized before passing to IndexingSpi. This can cause performance issues in some cases and there is no way to change this behavior.

It look like we should allow to avoid deserialization and pass BinaryObjects if keepBinary option is true as we do for CacheStore. 

Also SpiQueries should nof fails then both IndexingSpi is configured and GridQueryIndexing is disabled.
",easyfix performance,['binary'],IGNITE,Improvement,Major,2016-12-09 12:30:13,1
13026920,.NET: Control DateTime serialization via attribute,".NET can write DateTime in internal format (preserves DateTime.Kind) and as Timestamp (does not allow non-UTC values).

By default we use internal format. To use Timestamp user has to mark field with QuerySqlField (non obvious), or override IBinarizable.

* Provide a dedicated attribute to enforce timestamp mode.
* Attribute can be applied to a field, property, or a whole type
* Provide a property on {{BinaryReflectiveSerializer}} to force Timestamp everywhere - this may be needed when class code can't be modified",.NET,['platforms'],IGNITE,Improvement,Major,2016-12-09 09:05:46,0
13026623,.NET: Support BinaryFieldsIdentityResolver,"IGNITE-4045 introduced DML API with Binary resolver as the only option.

Field resolver is partially implemented and hidden. It requires GetHashCode implementations with Java algorithms for all basic types:
bool, byte/sbyte, short/ushort, char, int/uint, long/ulong, float, double, string, decimal, Guid, DateTime",.NET,['platforms'],IGNITE,Improvement,Major,2016-12-08 10:09:57,0
13025656,ODBC: Implement DML operations with parameters in batch.,"Currently, if user wants for example to insert 20k records they need to call {{SQLExecute}} for the 20k times. More than that, internally, we transmit and execute the same SQL query 20k times. This is a huge overhead. We should only transfer sql query once, transfer all the parameters in a batch and then execute it once using some fast, possibly internal API.",important,['odbc'],IGNITE,Task,Major,2016-12-05 15:29:35,3
13025615,.NET: Fix flaky tests,"TeamCity has detected a number of flaky tests in .NET: 
http://ci.ignite.apache.org/project.html?projectId=IgniteTests&tab=flakyTests&buildTypeId=IgniteTests_IgnitePlatformNetCoverage",.NET,['platforms'],IGNITE,Task,Trivial,2016-12-05 12:08:36,0
13025083,.NET: LINQ documentation,"Document thoroughly what is supported in LINQ, especially all the methods from MethodVisitor, since this can be non obvious (like DateTime.ToString(""y"")).",.NET LINQ,"['documentation', 'platforms']",IGNITE,Task,Major,2016-12-02 13:17:01,0
13025081,.NET: Support DateTime properties in LINQ,"Support {{DateTime}} properties such as Year, Month, Day in LINQ. See how {{String.Length}} property is supported in {{MethodVisitor}}.
See http://www.h2database.com/html/functions.html for supported SQL functions.",.NET,['platforms'],IGNITE,Improvement,Major,2016-12-02 13:08:44,0
13024850,Hadoop: eliminate map threads pauses during startup,"Pauses in all Map threads but one are observed in the beginning . This is caused by waiting on future.get()  in HadoopV2Job.getTaskContext(HadoopTaskInfo) .

{code}
 at sun.misc.Unsafe.park(boolean, long)
 at java.util.concurrent.locks.LockSupport.park(Object)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt()
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(int)
 at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(int)
 at org.apache.ignite.internal.util.future.GridFutureAdapter.get0(boolean)
 at org.apache.ignite.internal.util.future.GridFutureAdapter.get()
 at org.apache.ignite.internal.processors.hadoop.impl.v2.HadoopV2Job.getTaskContext(HadoopTaskInfo)
 at org.apache.ignite.internal.processors.hadoop.shuffle.HadoopShuffleJob.<init>(Object, IgniteLogger, HadoopJob, GridUnsafeMemory, int, int[], int)
 at org.apache.ignite.internal.processors.hadoop.shuffle.HadoopShuffle.newJob(HadoopJobId)
 at org.apache.ignite.internal.processors.hadoop.shuffle.HadoopShuffle.job(HadoopJobId)
 at org.apache.ignite.internal.processors.hadoop.shuffle.HadoopShuffle.output(HadoopTaskContext)
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopEmbeddedTaskExecutor$1.createOutput(HadoopTaskContext)
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.createOutputInternal(HadoopTaskContext)
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.runTask(HadoopPerformanceCounter)
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.call0()
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask$1.call()
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask$1.call()
 at org.apache.ignite.internal.processors.hadoop.impl.v2.HadoopV2TaskContext.runAsJobOwner(Callable)
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.call()
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.call()
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopExecutorService$2.body()
 at org.apache.ignite.internal.util.worker.GridWorker.run()
 at java.lang.Thread.run()
{code}

while the working thread initializes the context:
{code}
Java Monitor Wait
 at java.lang.Object.wait(long)
 at java.lang.Thread.join(long)
 at java.lang.Thread.join()
 at org.apache.hadoop.util.Shell.joinThread(Thread)
 at org.apache.hadoop.util.Shell.runCommand()
 at org.apache.hadoop.util.Shell.run()
 at org.apache.hadoop.util.Shell$ShellCommandExecutor.execute()
 at org.apache.hadoop.util.Shell.isSetsidSupported()
 at org.apache.hadoop.util.Shell.<clinit>()
 at org.apache.hadoop.util.StringUtils.<clinit>()
 at org.apache.hadoop.security.SecurityUtil.getAuthenticationMethod(Configuration)
 at org.apache.hadoop.security.UserGroupInformation.initialize(Configuration, boolean)
 at org.apache.hadoop.security.UserGroupInformation.ensureInitialized()
 at org.apache.hadoop.security.UserGroupInformation.loginUserFromSubject(Subject)
 at org.apache.hadoop.security.UserGroupInformation.getLoginUser()
 at org.apache.hadoop.security.UserGroupInformation.getCurrentUser()
 at org.apache.hadoop.mapreduce.task.JobContextImpl.<init>(Configuration, JobID)
 at org.apache.hadoop.mapred.JobContextImpl.<init>(JobConf, JobID, Progressable)
 at org.apache.hadoop.mapred.JobContextImpl.<init>(JobConf, JobID)
 at org.apache.ignite.internal.processors.hadoop.impl.v2.HadoopV2TaskContext.<init>(HadoopTaskInfo, HadoopJob, HadoopJobId, UUID, DataInput)
 at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Constructor, Object[])
 at sun.reflect.NativeConstructorAccessorImpl.newInstance(Object[])
 at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Object[])
 at java.lang.reflect.Constructor.newInstance(Object[])
 at org.apache.ignite.internal.processors.hadoop.impl.v2.HadoopV2Job.getTaskContext(HadoopTaskInfo)
 at org.apache.ignite.internal.processors.hadoop.shuffle.HadoopShuffleJob.<init>(Object, IgniteLogger, HadoopJob, GridUnsafeMemory, int, int[], int)
 at org.apache.ignite.internal.processors.hadoop.shuffle.HadoopShuffle.newJob(HadoopJobId)
 at org.apache.ignite.internal.processors.hadoop.shuffle.HadoopShuffle.job(HadoopJobId)
 at org.apache.ignite.internal.processors.hadoop.shuffle.HadoopShuffle.output(HadoopTaskContext)
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopEmbeddedTaskExecutor$1.createOutput(HadoopTaskContext)
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.createOutputInternal(HadoopTaskContext)
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.runTask(HadoopPerformanceCounter)
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.call0()
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask$1.call()
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask$1.call()
 at org.apache.ignite.internal.processors.hadoop.impl.v2.HadoopV2TaskContext.runAsJobOwner(Callable)
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.call()
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.call()
 at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopExecutorService$2.body()
 at org.apache.ignite.internal.util.worker.GridWorker.run()
 at java.lang.Thread.run()

{code}

Experimental solution can be found in branch ""ignite-4270-sync-direct-gzip-avoid-setup-pauses"". 2 changes are made there:
1) HadoopShuffle.job() avoided ""speculative execution""
2) task contexts creation paralleled in HadoopShuffleJob.<init>().

JFR profiles show that there are no pauses any more, however, there is stil a lot of work done in each thread loading classes, parsing XML configs, and initializing Hadoop statics (in case of UserGroupInformation.getCurrentUser() this even involves a shell script execution). ",performance,['hadoop'],IGNITE,Sub-task,Major,2016-12-01 18:37:34,4
13024758,.NET: Use BinaryArrayIdentityResolver by default,"Current legacy behavior calculates hash codes by calling Object.GetHashCode(), but equality comparison is performed by comparing byte arrays in binary form, which is inconsistent and can lead to unexpected behavior with user-defined keys.

In 2.0 we should replace default behavior with ArrayResolver so that Equals and GetHashCode are consistent.",.NET breaking-api,['platforms'],IGNITE,Improvement,Major,2016-12-01 12:43:27,0
13023203,Hadoop: send only one shuffle ack at the very end of shuffle processing.,"This shuffle acks will be processed ASAP, hence minimizing wait during completion.",performance,"['general', 'hadoop']",IGNITE,Sub-task,Major,2016-11-24 14:49:07,4
13023118,GridUnsafe: implement specialized methods for every kind of copy operation.,"1) copy(OFFHEAP, HEAP)
2) copy(HEAP, OFFHEAP)
3) copy(OFFHEAP, OFFHEAP)
4) copy(HEAP, HEAP) 
5) copy(T[], T[]) must be avoided and replaced with System.arrayCopy().
6) Add optional threshold. If we copy too small memory chunk which size is below the threshold, then resort to byte-by-byte copying, as it will be faster.

E.g. on PowerPC with OpenJDK 8, copying of <100 bytes of data is faster on byte-by-byte basis.",performance,['general'],IGNITE,Task,Minor,2016-11-24 08:32:27,4
13023112,Allow unaligned memory access flag override in GridUnsafe.,"This way we can avoid byte-by-byte read/write if arch is not x86, but it permits unaligned access still.",performance,['general'],IGNITE,Task,Major,2016-11-24 08:13:23,4
13022805,"Hadoop: control shuffle jobs ""sleep"" backpressure with property.",Currently we simply sleep between shuffle job iterations for 5 milliseconds (hard-coded). Let's get more control around it.,performance,['hadoop'],IGNITE,Sub-task,Major,2016-11-23 09:42:28,4
13022801,Hadoop: control shuffle message buffer size through property.,Currently it is hard-coded to 128Kb.,performance,['hadoop'],IGNITE,Sub-task,Major,2016-11-23 09:26:09,4
13022800,Hadoop: implement heap-based data structures.,"We store output offheap what causes a lot of offheap <-> heap transitions. Also it doesn't allow is to use raw comparator. 

Let's add new data structures which utilize heap arrays.",performance,['hadoop'],IGNITE,Task,Major,2016-11-23 09:25:27,4
13022773,Hadoop: optionally stripe mapper output for every partition.,"Currently we have R maps for M mappers, where R is number of reducers. For this reason many mappers writes to concurrent offheap data structure, loosing time on concurrency burden.
Let's add an option to create R * M maps, so that every mapper has dedicated map for every reducer. This will eliminate almost all concurrency overhead.

Design:
1) Every mapper works with it's own set of ""remote"" output maps;
2) These maps are essentially not ""maps"", but IO messages, which we fill up to certain threshold;
3) Once filled, message is sent to remote node.
4) Async shuffle thread is no longer need in this architecture.

As a result we decrease concurrency, removes slowdown from a single shuffle thread which is not able to send messages fast enough, and removes unnecessary intermediate sorting.

NB! Be careful with ""combiner"" case and with ""external"" execution.",performance,['hadoop'],IGNITE,Sub-task,Major,2016-11-23 08:01:58,4
13020795,ODBC: Implement SQLError function,Some driver managers use this function even though {{SQLGetDiagRec}} was called.,odbc,['odbc'],IGNITE,Task,Major,2016-11-15 13:21:01,4
13020459,.NET: EventType.SwapspaceAll inconsistent naming,"Should be SwapSpaceAll, similar to other events and SwapSpace classes

2.0 migration guide has to be updated if needed: https://cwiki.apache.org/confluence/display/IGNITE/Apache+Ignite+2.0+Migration+Guide",.NET breaking-api,['platforms'],IGNITE,Improvement,Major,2016-11-14 09:45:27,0
13018854,ODBC: empty value in a particular row breaks reading other rows in the column,"To reproduce,
* first create cache without empty values and ensure that all values are properly exposed via ODBC
* next make some value(s) in original cache null, try it again and verify whether ODBC exposes more null values than expected
",odbc,['odbc'],IGNITE,Bug,Major,2016-11-07 14:55:15,3
13018754,.NET: Remove PlatformAsyncTarget and remove future-related code from PlatformTargetProxy,"* PlatformAsyncTarget supports legacy async mechanism and should be removed.

* PlatformTargetProxy supports legacy mode via the following methods, remove them:
{code}
    void listenFuture(final long futId, int typ) throws Exception;
    void listenFutureForOperation(final long futId, int typ, int opId) throws Exception;
{code}",.NET,['platforms'],IGNITE,Task,Major,2016-11-07 07:31:47,0
13017787,JdbcResultSet class wasNull() method should return true on NULL fields,"For now wasNull() method can return false for NULL field in case of field typed as String.

Startpoints are org.apache.ignite.internal.jdbc.JdbcResultSet class
and org.apache.ignite.internal.jdbc2.JdbcResultSet class",newbie,['jdbc'],IGNITE,Bug,Major,2016-11-03 19:02:39,1
13014679,SQL: parallelize sql queries over cache local partitions,"If we run SQL query on cache partitioned over several cluster nodes, it will be split into several queries running in parallel. But really we will have one thread per query on each node.
So, for now, to improve SQL query performance we need to run more Ignite instances or split caches manually.

It seems to be better to split local SQL queries over cache partitions, so we would be able to parallelize SQL query on every single node and utilize CPU more efficiently.",performance,['sql'],IGNITE,Improvement,Major,2016-10-24 10:31:50,1
13013950,.NET: Generic ICacheStore methods,Current interface causes boxing on primitive types in LoadCache action parameter.,.NET,['platforms'],IGNITE,Improvement,Major,2016-10-20 16:12:36,0
13013550,ODBC and DML: Add tests with DML and ODBC.,"In Apache Ignite 1.8 the community is planning to release DML support.

We need to make sure that ODBC is ready for that. Thus we need to add ODBC test that involve DML.",odbc,['odbc'],IGNITE,Task,Major,2016-10-19 14:21:55,3
13013184,Implement prototype for thread-per-partition approach.,"Rationale:
- Decrease contention on thread-pool blocking queue head/tail;
- Minimize amount of thread parks/unparks;
- Decrease overhead on partition RW locking.

Implementation:
- Implemented striped thread pool;
- Every thread has separate non-blocking queue;
- Blocking back-off strategy if queue is empty.
",performance,['cache'],IGNITE,Task,Minor,2016-10-18 13:21:35,4
13012843,CPP: Make sure Ignite C++ can be compiled with g++ 4.4.7,"Make sure that Ignite C++ can be compiled with particular compiler version. Version details:
{noformat}
g++ (GCC) 4.4.7 20120313 (Red Hat 4.4.7-16)
Copyright (C) 2010 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
{noformat}",cpp,['platforms'],IGNITE,Task,Major,2016-10-17 12:23:01,3
13010247,C++: Support DML API,"Ignite's Java component will provide support for DML soon (IGNITE-2294). At she same time DML will be supported at the level of ODBC and JDBC drivers.

As the next step we should include the similar functionality into Ignite.C++ by doing the following:
- Implement DML API;
- Enhance {{query_example.cpp}} by doing INSERTs instead of cache.puts and adding UPDATE and DELETE operation examples.
- Add documentation to Ignite.C++ readme.io covering the feature. Most like most of the content can be take from the general documentation when this ticket IGNITE-4018 is ready.",roadmap,['platforms'],IGNITE,Task,Major,2016-10-06 19:03:28,3
13010109,Refactor async operations,"Currently async operations are executed in two steps:
- start an operation (Cache.Get)
- get the future (UU.TargetListenFuture* methods)

This separation is unnecessary. See if we can perform asyn operations in one JNI call. See how PlatformCache.OP_REBALANCE does this.",.NET,['platforms'],IGNITE,Sub-task,Major,2016-10-06 09:19:29,0
13008506,Incorrect errors/warnings while odbc driver installation,"1) Build x64 odbc driver according to $IGNITE_HOME\platforms\cpp\DEVNOTES.txt

2) Install x64 bit driver according to $IGNITE_HOME\platforms\cpp\odbc\README.txt. Don't pass x32 driver as a second parameter:
{noformat}
D:\ignite\platforms\cpp\odbc\install>install_amd64.cmd D:\ignite\platforms\cpp\project\vs\x64\Release\ignite.odbc.dll
Installing 64-bit driver: D:\ignite\platforms\cpp\project\vs\x64\Release\ignite.odbc.dll
Операция успешно завершена.
Операция успешно завершена.
Операция успешно завершена.
Операция успешно завершена.
Операция успешно завершена.
Ошибка в синтаксисе команды.
{noformat}

Expected: ""warning: 32-bit driver is not specified. If you want to install 32-bit driver please specify path to it as a second argument."" message
Actual: ""Ошибка в синтаксисе команды"".

3) Install x64 bit driver according to $IGNITE_HOME\platforms\cpp\odbc\README.txt. Pass \ (root directory) as a second parameter (x32 driver):
{noformat}
D:\ignite\platforms\cpp\odbc\install>install_amd64.cmd D:\ignite\platforms\cpp\project\vs\x64\Release\ignite.odbc.dll \
Installing 64-bit driver: D:\ignite\platforms\cpp\project\vs\x64\Release\ignite.odbc.dll
Операция успешно завершена.
Операция успешно завершена.
Операция успешно завершена.
Операция успешно завершена.
Операция успешно завершена.
Installing 32-bit driver: \
Операция успешно завершена.
Операция успешно завершена.
Операция успешно завершена.
Операция успешно завершена.
Операция успешно завершена.
{noformat}

Expected:
""warning: The path you have specified seems to be a directory. Note that you have to specify path to driver file itself instead."" warning before ""Installing 32-bit driver: \"" 
Actual: no such a warning (if exist %ODBC_X86%\ -> if exist \ \ -> false. So this check doesn't work in this case).

Please, consider some changes in error handling.
",cpp,['platforms'],IGNITE,Bug,Minor,2016-09-29 12:10:59,3
13008497,Ignite thread pools must have timeouts for idle threads.,"Classes to look at:
{{IgnitionEx}} - 7 pools;
{{GridIoManager}} - affinity pool;
{{IgfsImpl}} - dual pool;
{{IgfsIpcHandler}} - pool to process incoming requests;
{{OdbcProcessor}} - pool to process incoming requests;
{{ServerImpl}} - utility pool.",performance,['general'],IGNITE,Task,Major,2016-09-29 11:04:49,4
13008174,ODBC: Improve error output when query parsing failed.,"Currently if an error occurred we only prints the top-level message, like ""Failed to parse query ..."". The problem is that we do not explain users why exactly it failed.

Looks like we need to add more info on Java side when sending error response.",usability,['odbc'],IGNITE,Task,Minor,2016-09-28 09:25:06,3
13007957,ODBC: Add documentation for added connection string attributes and features.,"Add documentation for the following connection string attributes:
* ADDRESS
* DSN
* PROTOCOL_VERSION
* PAGE_SIZE

Add documentation for the following features:
* Data-at-execution dialog.

",odbc,['odbc'],IGNITE,Task,Major,2016-09-27 15:32:10,4
13007525,Hadoop: automatically add ${HADOOP_HOME}/lib/native to java.library.path system property,"Now in order to use native libs user is expected to add -J-Djava.library.path explicitly upon node start.
In most of the Hadoop distributions native libraries are found in ${HADOOP_HOME}/lib/native/ , and, if such directory exists, we can add -Djava.library.path  paramater automatically. 
Note that if -Djava.library.path  is also given explicitly by the user, we should  merge his explicit value with our implicitly added value.  ",easyfix,['hadoop'],IGNITE,Bug,Major,2016-09-26 10:22:57,4
13005360,Hadoop: rework HadoopClassLoader infrastructure,"This is an umbrella ticket to host tickets related to {{HadoopClassLoader}} rework logic.

In general, we should achieve clean and consistent separation of ignite-core on the one hand, and (ignite-hadoop + Hadoop dependencies) on the other.",important,['hadoop'],IGNITE,Task,Critical,2016-09-16 07:57:23,4
13005218,ODBC: PDO always passes parameters as strings.,"By some reason, PDO always passes parameters as strings to our ODBC driver. Need to investigate and find a solution.",odbc,['odbc'],IGNITE,Bug,Major,2016-09-15 17:01:22,4
13004519,.NET: Describe development process on Wiki,"Ignite wiki: https://cwiki.apache.org/confluence/display/IGNITE/Apache+Ignite+Home

Add .NET development process page:
* Coding guidelines (naming conventions, etc)
* Project structure
* Code inspections, how to run locally and on TC
* Test coverage
* How to build (AnyCPU nuances, NuGet, embedded CPP part, Java, etc)",.NET,"['documentation', 'platforms']",IGNITE,Task,Minor,2016-09-13 07:24:36,0
13004375,ODBC: Parameter binding does not work with PDO.,"By some reason, parameter binding does not work with PDO. Investigate and fix.",odbc,['odbc'],IGNITE,Bug,Major,2016-09-12 18:20:54,4
13003858,ODBC: Check all output parameters for nulls before assignment. ,"Currently, we suppose that all the output pointer parameters are not null and point to the valid data. Practice shows that a lot of users call ODBC functions with NULL parameters if they don't need some of the output values. Review the API and add all necessary null-checks.",odbc,['odbc'],IGNITE,Task,Major,2016-09-09 13:41:30,4
13003797,ODBC: Create installer for the ODBC.,"It would be nice to have .msi installer for our ODBC driver, so that user would not have a need to compile and install driver manually.",odbc,['odbc'],IGNITE,Task,Major,2016-09-09 09:16:42,3
13003635,ODBC: DSN support for Windows works incorrectly,"---------------------------------------------
DESCRIPTION
---------------------------------------------
Some keys aren't registered in the registry during odbc driver installation and during DSN user data source adding:
HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\Apache Ignite\Setup
HKEY_CURRENT_USER\Software\ODBC\ODBC.INI\Apache Ignite DSN\{port,protocol_version}
---------------------------------------------
STEPS FOR REPRODUCE
---------------------------------------------
# Build and install odbc driver according to instruction from product binaries
# Go to Control Panel\System and Security\Administrative Tools\ODBC Data Source Administrator (or run ""odbcad32"" command)
# Try to add Apache Ignite DSN source
---------------------------------------------
ACTUAL RESULT
---------------------------------------------
Error message appear. Source isn't adding. There isn't HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\Apache Ignite\Setup key in the registry
---------------------------------------------
EXPECTED RESULT
---------------------------------------------
Source is installed without any exception
---------------------------------------------
NEXT STEPS FOR REPRODUCE
---------------------------------------------
# Add HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\Apache Ignite\Setup=[path_to_ignite_odbc_driver] into registry
# Add Apache Ignite DSN source in the ODBC Data Source Administrator
# Start some cache
# Run Tableau
# Try to connect to the cache using DSN
---------------------------------------------
ACTUAL RESULT
---------------------------------------------
Connection error message appears. There aren't HKEY_CURRENT_USER\Software\ODBC\ODBC.INI\Apache Ignite DSN\{port,protocol_version} keys in the registry
---------------------------------------------
EXPECTED RESULT
---------------------------------------------
Connection is successful
---------------------------------------------
ADDITIONAL INFO
---------------------------------------------
Keys HKEY_CURRENT_USER\Software\ODBC\ODBC.INI\Apache Ignite DSN\{port,protocol_version} are registered in the registry after user run ""Configure"" command (without any changes) for Apache Ignite DSN source",odbc,['odbc'],IGNITE,Bug,Major,2016-09-08 17:16:45,4
13003537,ODBC: Investigate compatibility with PDO.,"We should check if our ODBC implementation works with the [PDO|http://php.net/manual/en/intro.pdo.php]. This way we are going to be able be used from the PHP.

Check basic SQL queries and DML.",odbc,['odbc'],IGNITE,Task,Major,2016-09-08 10:46:17,3
13002741,.NET: BinaryWriter allows raw methods to be called before GetRawWriter call,"This leads to a situation where raw offset and flag are not set. Need to either add a check with exception, or automatically switch to raw mode when raw methods are called.

This only affects internal code.",.net,['platforms'],IGNITE,Bug,Trivial,2016-09-05 14:39:39,0
13002389,CPP: Add distributed joins example to C++ query example.,Add distributed joins sample to C++ query example.,cpp,"['documentation', 'platforms']",IGNITE,Task,Major,2016-09-02 15:40:28,4
13002383,Use BinaryType.field() for fast affinity key resolution.,"See {{CacheObjectBinaryProcessorImpl.affinityKey}} method. Currently to get affinity key field of a regular binary object (i.e. {{BinaryObjectImpl}}), we do two heavy things:
1) Lookup object type from system cache to get affinity key field name.
2) Get that field using {{BinaryObject.field}} method.

To avoid system cache lookup we should cache resolver affinity field names by type ID. To speed field value resolving we should cache not names, but {{BinaryField}}.s",performance,['cache'],IGNITE,Task,Major,2016-09-02 15:18:28,4
13002380,"Data streamer: use identity comparison for ""activeKeys"" in DataStreamerImpl.load0 method.","See {{DataStreamerImpl.load0}} method. One of it's arguments is {{activeKeys}} collection. Elements from this collection is removed when batch is successfully applied on the server. Currently this collections is concurrent hash set of {{KeyCacheObject}}. In case hash conflict occurs (which is not unusual for streaming when lots of keys are loaded), it leads to full byte-by-byte comparison of binary objects. It might be very inefficient.

To avoid the problem we should wrap {{KeyCacheObject}} into additional class with overridden {{equals}} and {{hashCode}} methods, so equality check is performed only through reference equality ({{==}}). This way hash conflicts will be resolved extremely fast.",performance,['streaming'],IGNITE,Task,Minor,2016-09-02 15:13:58,1
13002374,Data streamer: avoid double marshaling of key object.,"The problem is within {{DataStreamerImpl.addData(Map)}} method. When map is put, we marshal key objects twice.",performance,['streaming'],IGNITE,Task,Minor,2016-09-02 15:02:28,4
13002369,CPP: Add documentation for distributed joins.,Distributed joins have been added to Ignite C++. Need to add corresponding documentation to readme.io.,cpp,"['documentation', 'platforms']",IGNITE,Task,Major,2016-09-02 14:50:46,4
13002099,ODBC: Print stack trace on error.,"Currently, on ODBC error we only silently send error message to ODBC driver. Add printing of the error on the node side.",odbc,['odbc'],IGNITE,Task,Major,2016-09-01 15:42:01,4
13000985,.NET: Platforms system cache,"Create a new system cache (similar to ignite-sys-cache and others) for platforms.

The need for such cache emerged in two tickets: IGNITE-1915, IGNITE-2703

* Cache (and listener) should be started even if there is no platform
* Different purpose keys should be clearly separated (different class)",.net,"['cache', 'platforms']",IGNITE,Improvement,Major,2016-08-29 14:15:57,4
12999645,.NET: LINQ - user-friendly CacheFieldsQueryable.ToString(),"User should be able to call ToString on a Ignite LINQ expression and get back all the information: 
* SQL
* Parameter values
* Options (page size, etc)

(Entity Framework does this).",.net linq newbie,['platforms'],IGNITE,Improvement,Major,2016-08-24 12:30:32,0
12999170,.NET: Remove summaries from NuSpec,"If no summary is used then all of the description is used.

However what gets displayed is based on the size of the Manage Packages dialog, the size of characters used in the text, whether the row is selected and the Install button is showing, whether you are using Visual Studio 2015 or an older version.

(http://stackoverflow.com/questions/33264005/what-is-max-length-of-summary-and-description)

Therefore I think we can remove summary altogether to avoid duplicate text.",.net,['platforms'],IGNITE,Improvement,Minor,2016-08-23 10:16:14,0
12998511,.NET: Possible NPE in PlatformConfigurationUtils due to null Enum values,"There are no null checks, we call .ordinal() directly.

Even though for most enums in IgniteConfiguration null is not a valid value, Platform should not fail on this.",.net,['platforms'],IGNITE,Bug,Major,2016-08-19 15:31:02,0
12998452,.NET: PlatformRawMemory is not covered with tests,"Coverage suite shows that PlatformRawMemory is not called. This happens since the merge of IGNITE-2943, which changes error propagation mechanism.

Need to check whether old mechanism, which uses PlatformRawMemory, is still needed. Either remove it, or cover with test.",.net,['platforms'],IGNITE,Bug,Major,2016-08-19 10:20:27,0
12998249,.NET: Support primitive type names in QueryEntity,"See  IGNITE-3399.
We should update JavaTypes class to support such mappings.",.net,['platforms'],IGNITE,Improvement,Major,2016-08-18 16:32:26,0
12997601,.NET: Java type mapping does not work with nullable types,"See JavaTypes class. We should probably map nullables there too.
Java has everything nullable by default, need to explain to the users that anything can be null underneath.

Make sure to test this with [QuerySqlField].

Workaround is to use manual QueryEntity configuration and specify either non-nullable .NET type, or the Java type name.",.net,['platforms'],IGNITE,Bug,Minor,2016-08-16 14:44:36,0
12997594,CPP: Consider changing naming style to match boost/standard library.,"It may be reasonable to change C++ naming style to match {{std}}/{{boost}}. This can be helpful when defining classes that are supposed to be usable with standard library. Also, it may be useful when using modern C++ features like [range-based for loop|http://en.cppreference.com/w/cpp/language/range-for].",cpp,['platforms'],IGNITE,Task,Major,2016-08-16 14:19:39,3
12997287,.NET: Remove IgniteProxy,"IgniteProxy exists to handle serialization of injected IIgnite fields in user classes.

As a result, we write a type id and a null flag in place of injected fields.

Instead we should just skip injected fields altogether.

There are two cases:
* Binarizable. In this case we can use a special no-op serializer or add a check to BinaryWriter.
* Serializable. Override ISerializable in Ignite and don't write anything.",.NET breaking,['platforms'],IGNITE,Improvement,Major,2016-08-15 13:30:20,0
12995167,.NET: Add pure binary mode example with SQL,"This is an important Ignite use case: having no classes at all, working with cache in binary mode and running SQL queries.

We should have a dedicated example for this (regular one and for LINQPad).

Below is a piece of code that I used for Gitter user question:
{code}
using (var ignite = Ignition.Start())
{
	// Configure queries for Person object with FirstName, LastName fields
	var cacheConfig = new CacheConfiguration
	{
		Name = ""persons"",  // can be anything
		QueryEntities = new[]
		{
			new QueryEntity
			{
				KeyType = typeof(int),
				ValueTypeName = ""Person"",  // name of the dynamically created type
				Fields = new[]  // define fields to be available in queries
				{
					new QueryField(""FirstName"", typeof(string)),
					new QueryField(""LastName"", typeof(string))
				}
			}
		}
	};
	
    // Create new cache, switch to binary mode
    var cache = ignite.CreateCache<int, object>(cacheConfig).WithKeepBinary<int, IBinaryObject>();

	// Populate the cache
	for (var i = 0; i < 10; i++)
	{
		var person = ignite.GetBinary().GetBuilder(""Person"")  // same name as in ValueTypeName above
			.SetField<string>(""FirstName"", ""Name-"" + i)
			.SetField<string>(""LastName"", ""LastName-"" + i)
			.Build();
			
			cache[i] = person;
    }
	
	// SQL query for FirstName ending with ""-3""
	var qry = cache.Query(new SqlQuery(""Person"", ""where FirstName like '%-3'""));

	foreach (ICacheEntry<int, IBinaryObject> cacheEntry in qry)
	{
		Console.WriteLine(""Person {0}:"", cacheEntry.Key);
		
		IBinaryObject person = cacheEntry.Value;
		
		IBinaryType personType = person.GetBinaryType();
		
		// Show all fields
		foreach (var fieldName in personType.Fields)
			Console.WriteLine(""  {0}: {1}"", fieldName, person.GetField<object>(fieldName));
	}
}
{code}",.net,['platforms'],IGNITE,Improvement,Major,2016-08-05 09:56:36,0
12994850,ODBC: Improve data fetching performance.,"Need to add some kind of benchmark to be able to measure fetching performance of the ODBC driver, then profile it and improve performance where it is possible. Pay attention to the fetching page size.

Consider adding ""Fast first row"" feature.
Consider adding {{FETCH_PAGE_SIZE}} connection argument.",important odbc performance,['odbc'],IGNITE,Task,Major,2016-08-04 09:54:37,4
12994848,ODBC: Tune ODBC capabilities to match capabilities of the Ignite SQL.,Capabilities provided by {{ConnectionInfo}} class should be adjusted so that {{SQLGetInfo}} would return real capabilities of Ignite SQL.,important odbc,['odbc'],IGNITE,Task,Critical,2016-08-04 09:51:45,4
12994842,ODBC: Performance drop when connecting to Ignite with Tableau on Windows.,"It seems like we have a performance drop on Ignite after we connect to it with Tableau on Windows (only connecting, no queries are being run).",important odbc,['odbc'],IGNITE,Bug,Critical,2016-08-04 09:36:33,4
12993526,.NET: Inconsistent namespace imports in examples,"Some files have imports within namespace declaration, some outside, some even mix these two.

Both styles are equally popular in the wild, so we should just make examples consistent with the rest of the code base (which uses imports within the declaration).",.net,['platforms'],IGNITE,Improvement,Major,2016-07-29 12:17:02,0
12992847,.NET: Self-joins do not work in LINQ,"When joining the table on itself, the same table alias is used, leading to ambiguous column name error.",.net,['platforms'],IGNITE,Bug,Major,2016-07-27 08:30:10,0
12992648,ODBC: Add Distributed Joins support to ODBC.,"Need to add support for the distributed joins to ODBC.
",odbc,['odbc'],IGNITE,Task,Major,2016-07-26 17:06:04,4
12992626,CPP: Make QueryArgument and QueryArgumentBase classes non-public. ,Move {{QueryArgument}} and {{QueryArgumentBase}} classes to the {{impl}}. They are our internal classes and should not appear in the public API.,cpp,['platforms'],IGNITE,Task,Major,2016-07-26 15:54:53,3
12992619,CPP: Rework methods that accept containers so any container could be used with them.,"There are methods that could possibly be used with any container but by some reason they only accept arguments of a single specific container type. It can be non convenient for user and bad from the performance point of view if user uses other container type to store values. Consider using iterators (preferably) or template type for the container.

Methods of interest:
- {{QueryCursor::GetAll}}
- {{Cache::ContainsKeys}}
- {{Cache::GetAll}}
- {{Cache::PutAll}}
- {{Cache::LocalEvict}}
- {{Cache::ClearAll}}
- {{Cache::LocalClearAll}}
- {{Cache::RemoveAll}}.
",cpp,['platforms'],IGNITE,Task,Major,2016-07-26 15:43:14,3
12992610,CPP: Refactor BinaryType class template.,"1. All methods should be 'static'.
2. Methods {{GetTypeName()}}, {{Read()}} and {{GetNull()}} should pass result to caller by reference argument and not by return value to avoid copying and temporary objects creation.
3. For the {{BinaryType<T*>}}: additionally to the mentioned above, remove field {{typ}} and add type alias for the non-pointer type instead.

Explanation:
Current role of the {{BinaryType<T>}} in C++ is to provide Ignite with the information about its template type, to be used during serialization and deserialization. Unlike Java version, C++ {{BinaryType}} also used for user to provide implementation of {{Read}} and {{Write}} methods, i.e. methods that used to serialize and deserialize objects.

We can not have non-template interface for this class as Write and Read methods have templated type in theirs signatures:

{code}
void Write(BinaryWriter& writer, const T& obj); 
T Read(BinaryReader& reader);
{code}

We can not change template type {{T}} with non-template type as we don't have single root class in C++ like {{Object}} class in Java and we also don't have any type information at runtime.

Thus we always need to know template type for the {{BinaryType<T>}} when we are instantiating it, thus we can not have any fabrics or any polymorphism for this class in C++ and internally we always use default constructor to get new instance of such a class.

So, currently I can not see how having non static methods could be useful for this class.",cpp,['platforms'],IGNITE,Task,Major,2016-07-26 15:28:56,3
12992609,CPP: Replace passing by value with passing by reference where it is possible.,Places to look at: {{BinaryWriter::WriteObject}} and {{BinaryRawWriter::WriteObject}}.,cpp,['platforms'],IGNITE,Task,Major,2016-07-26 15:22:43,3
12992608,CPP: Replace pointers with references in function signatures where it's possible.,"Replace passing arguments by pointers with passing by references where it's possible. Places to look at:
{{BinaryMapReader::GetNext}}.
The following argument: {{IgniteError* err}}.",cpp,['platforms'],IGNITE,Task,Major,2016-07-26 15:18:53,3
12992606,CPP: Place different enums and constants in separate namespaces or structs.,"The common practice is to place enums and constants in separate namespaces or structs. This way we can group them and avoid name clashes without the need to use long names.

[Details|http://stackoverflow.com/questions/7090130/enum-in-a-namespace].",cpp,['platforms'],IGNITE,Task,Major,2016-07-26 15:13:21,3
12992324,CPP: Add support of distributed joins in SqlQuery & SqlFieldsQuery,IGNITE-1232 added new properties to {{SqlQuery}} and {{SqlFieldsQuery}} classes. Propagate them to C++.,cpp,['platforms'],IGNITE,Task,Major,2016-07-25 16:23:55,4
12992232,CPP: Implement compute API,Umbrella ticket to host all compute API tickets.,cpp important,['platforms'],IGNITE,Task,Major,2016-07-25 11:09:44,3
12992184,.NET: Start JVM externally (thin client),"Currently we start JVM inside .NET process. This is not good for several reasons:
1) Broken isolation - only one JVM can exist per process. This way it is impossible to start two Ignite instances with different JVM options.
2) JVM startup is expensive, cluster connection is expensive, and process must host both Java and .NET heaps. Should we have external JVM to connect to, we would allow for truly thin clients, when dozens thin processes will be able to work with the same client. We already see growing demand for this feature,",.net,['platforms'],IGNITE,New Feature,Minor,2016-07-25 08:13:09,0
12992168,Dependency to outdated Lucene 3.5.0,"Ignite 1.6.0 comes with Lucene 3.5.0 core as dependency, which dates back to the year 2011.

This makes it difficult to integrate with newer software.",full-text-search important,['general'],IGNITE,Bug,Major,2016-07-25 07:29:21,1
12992163,.NET: DistributedJoins property in SqlQuery & SqlFieldsQuery,IGNITE-1232 added new properties to SqlQuery and SqlFieldsQuery classes. Propagate them to .NET.,.net,['platforms'],IGNITE,Improvement,Major,2016-07-25 07:19:52,4
12991855,CPP: Review Ignite C++ API and provide list of breaking improvements that can be included in Ignite 2.0,"As there is going to be Ignite 2.0 release soon, It is a good opportunity to improve Ignite C++ API without the need to maintain backward compatibility. Let's collect and discuss all the proposal for the changes in this task and then create matching subtasks for all the accepted proposals.",cpp,['platforms'],IGNITE,Task,Major,2016-07-22 15:30:21,4
12991795,IGFS: Implement internal light-weight closure execution.,The main goal is speed. No failover. No sessions. No injections. Just extremely compact message and execution.,performance,['igfs'],IGNITE,Sub-task,Critical,2016-07-22 12:39:36,4
12991793,IGFS: Performance improvements.,This is an umbrella ticket for all recent performance improvements planned for IGFS.,performance roadmap,['igfs'],IGNITE,Task,Major,2016-07-22 12:36:09,4
12991782,.NET: Rename ILifecycleBean,"Bean is a Java term. 

Either rename this interface to something like ILifecycle, or rework the lifecycle notifications to C# event handlers.

2.0 migration guide has to be updated if needed: https://cwiki.apache.org/confluence/display/IGNITE/Apache+Ignite+2.0+Migration+Guide",.net breaking-api,['platforms'],IGNITE,Improvement,Major,2016-07-22 12:00:52,0
12991727,.NET: Review access modifiers,Currently some classes in internal namespaces are public. This can be fixed in 2.0.,.net breaking-api,['platforms'],IGNITE,Improvement,Major,2016-07-22 07:20:54,0
12991726,.NET: Remove deprecated code,"Look for {{[Obsolete]}} attributes

The only exception is {{IgniteConfiguration.GridName}}, let's keep it (may be used a lot).

2.0 migration guide has to be updated if needed: https://cwiki.apache.org/confluence/display/IGNITE/Apache+Ignite+2.0+Migration+Guide",.net breaking-api,['platforms'],IGNITE,Improvement,Major,2016-07-22 07:18:56,0
12990743,.NET: Review namespace structure,"Current issues:
* Impl namespace contains both public and internal types.
* Some classes (QueryBase, AffinityFunctionBase, etc) are not intended to be used directly, but they have to be public

Need to review framework design guidelines and see how well-known APIs (.NET, WPF, Entity Framework) handle such issues.",.net breaking-api,['platforms'],IGNITE,Improvement,Major,2016-07-19 11:57:08,0
12990741,.NET: Add package-info descriptions to all namespaces,Add a unit test to check this,.net,['platforms'],IGNITE,Improvement,Major,2016-07-19 11:52:39,0
12990721,".NET: Fix ContinuousQuery, QueryBase, and SqlFieldsQuery class constants","1) Abbreviations should not be used
2) Constants in generic class are not good

2.0 migration guide has to be updated if needed: https://cwiki.apache.org/confluence/display/IGNITE/Apache+Ignite+2.0+Migration+Guide",.net breaking-api,['platforms'],IGNITE,Improvement,Major,2016-07-19 11:08:02,0
12990716,.NET: IBinaryObjectBuilder setter methods do not work,"SetShortField and other such methods are not tested and do not work properly.

Workaround is to use generic SetField method.",.net,['platforms'],IGNITE,Bug,Critical,2016-07-19 10:48:02,0
12990715,".NET: Remove ""Default"" prefix from BinaryConfiguration properties","It does not make much sense and makes property names too long. In Java there is no such prefix.

2.0 migration guide has to be updated if needed: https://cwiki.apache.org/confluence/display/IGNITE/Apache+Ignite+2.0+Migration+Guide",.net breaking-api,['platforms'],IGNITE,Improvement,Major,2016-07-19 10:44:23,0
12990414,.NET: Improve IgniteConfigurationSection.XSD,"* make sure that all properties are present (update unit tests)
* include all enum values
* provide documentation

Can we autogenerate XSD from the configuration classes? This is a job for serializer.",.net,['platforms'],IGNITE,Improvement,Major,2016-07-18 14:25:15,0
12987067,.NET: Run Ignite transactions via standard TransactionScope API,"Automatically enlist Ignite operations in current transaction scope when applicable (when cache is transactional).

https://msdn.microsoft.com/en-us/library/system.transactions.transactionscope(v=vs.110).aspx
https://msdn.microsoft.com/en-us/library/ee818754(v=vs.110).aspx

This boils down to implementing {{IEnlistmentNotification}} and calling {{Transaction.Current.Enlist}} when doing transactional operations.

Later we may want to implement {{ISinglePhaseNotification}} which is an optimization.",.net roadmap,['platforms'],IGNITE,New Feature,Major,2016-07-06 07:11:39,0
12986795,.NET: Move examples from Spring XML to app.config,"Use app.config based configuration instead of Spring XML.
(there were requests in user list and gitter).",.net,['platforms'],IGNITE,Improvement,Minor,2016-07-05 12:11:47,4
12982735,.NET: Improve test coverage,"Coverage nightly build has been set up on the TC:
http://149.202.210.143:8111/viewType.html?buildTypeId=IgniteTests_IgnitePlatformNetCoverage

Examine the output and improve tests to cover missing parts.",.net,['platforms'],IGNITE,Task,Critical,2016-06-24 16:21:05,0
12982271,.NET: IgniteConfiguration.ToXml,"There were multiple questions on user list and in gitter on how to specify some property in xml in the IgniteConfigurationSection.

We do provide the XSD schema, but it is easier to just call a method and get a piece of XML to copy and paste.",.net,['platforms'],IGNITE,Improvement,Major,2016-06-23 09:26:54,4
12981936,CPP: Implement Compute::Call() for Ignite C++.,Need to implement {{Compute}} class with {{Compute::Call}} method.,cpp,['platforms'],IGNITE,Task,Major,2016-06-22 15:55:14,3
12980879,IGFS: Do not query secondary file system properties during create/append/mkdirs.,"Currently when we create something in a secondary file system, we perform additional calls to the secondary file system to get file/directory info. This significantly slows down structural operations, while usually it is not really needed in most cases.

We should do the following:
1) Do not write modification time, access time and properties for DUAL entries. Instead, we should propagate ""info"" and ""listFiles"" calls to secondary file system right away.
2) For {{create()}} we do not need length, as the file is either created from scratch, or truncated.
3) For {{append()}} we need to know current length, so the second file system call appears to be inevitable.",performance,['igfs'],IGNITE,Sub-task,Critical,2016-06-20 14:48:29,4
12980829,.NET: Cache store is not destroyed on DestroyCache,"cacheStoreDestroy platform callback should be called whenever owner cache is destroyed.
See stopLifecycleAware call in GridcacheProcessor.",.net,['platforms'],IGNITE,Bug,Critical,2016-06-20 12:25:31,0
12979810,CPP: Implement Cache::Invoke method.,Implement {{Cache::Invoke}} method for the Ignite C++.,cpp,['platforms'],IGNITE,Task,Major,2016-06-16 12:53:29,3
12979795,.NET: Support user-defined AffinityFunction,"Allow custom AffinityFunction implementation in .NET
Make sure it can be set in XML config.",.net,['platforms'],IGNITE,New Feature,Critical,2016-06-16 12:15:45,0
12979733,.NET: Improve CompiledQuery in LINQ provider,"User reported that the following code fails with ""Error compiling query: all compiled query arguments should come from enclosing delegate parameters.""
{code}
Func<int,int,int,IQueryCursor<ICacheEntry<int, OrderEntity>>> qry = 
                CompiledQuery.Compile((int x, int y,int z) => orderCache.AsCacheQueryable().Where(e => e.Value.OrderId % x == z).Take(y));
{code}

Other limitations are:
* Embedded parameters are not supported
* Maximum number of parameters is 8

We should provide additional additional method to compile a delegate which takes an array of args.",.net,['platforms'],IGNITE,Bug,Major,2016-06-16 09:22:03,0
12979037,[Test] HadoopMapReduceEmbeddedSelfTest.testMultiReducerWholeMapReduceExecution flakily fails.,"HadoopMapReduceEmbeddedSelfTest.testMultiReducerWholeMapReduceExecution fails with ~20% probability . 
Failure cause is either the 1st or 2nd marked line in the following code (org.apache.ignite.internal.processors.igfs.IgfsMetaManager#create) :
{code}
                            // Check: can we overwrite it?
                            if (!overwrite)
                                throw new IgfsPathAlreadyExistsException(""Failed to create a file: "" + path); // ***** #1

                            // Check if file already opened for write.
                            if (oldInfo.lockId() != null)
                                throw new IgfsException(""File is already opened for write: "" + path); // ***** #2
{code}

Diagnostic shows that the same file really attempted to be created several times on one thread.

Situation #2 reproducible with the following stack when IGFS is used as a secondary fs:
{code}
Hadoop-task-efea2ae1-09cb-4c49-9465-dcbbedee1835_1-REDUCE-2-0-#679%hadoop.HadoopMapReduceEmbeddedSelfTest2%@20675, prio=5, in group 'ignite', status: 'RUNNING'
          at org.apache.ignite.internal.processors.igfs.IgfsMetaManager.create(IgfsMetaManager.java:2857)
          at org.apache.ignite.internal.processors.igfs.IgfsImpl$15.call(IgfsImpl.java:1051)
          at org.apache.ignite.internal.processors.igfs.IgfsImpl$15.call(IgfsImpl.java:1019)
          at org.apache.ignite.internal.processors.igfs.IgfsImpl.safeOp(IgfsImpl.java:1823)
          at org.apache.ignite.internal.processors.igfs.IgfsImpl.create0(IgfsImpl.java:1019)
          at org.apache.ignite.internal.processors.igfs.IgfsImpl.create(IgfsImpl.java:990)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsInProc$15.apply(HadoopIgfsInProc.java:359)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsInProc$15.apply(HadoopIgfsInProc.java:357)
          at org.apache.ignite.igfs.IgfsUserContext.doAs(IgfsUserContext.java:49)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsInProc.create(HadoopIgfsInProc.java:357)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper$15.apply(HadoopIgfsWrapper.java:258)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper$15.apply(HadoopIgfsWrapper.java:255)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper.withReconnectHandling(HadoopIgfsWrapper.java:310)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper.create(HadoopIgfsWrapper.java:255)
          at org.apache.ignite.hadoop.fs.v1.IgniteHadoopFileSystem.create(IgniteHadoopFileSystem.java:632)
          at org.apache.ignite.hadoop.fs.IgniteHadoopIgfsSecondaryFileSystem.create(IgniteHadoopIgfsSecondaryFileSystem.java:406)
          at org.apache.ignite.internal.processors.igfs.IgfsSecondaryFileSystemCreateContext.create(IgfsSecondaryFileSystemCreateContext.java:87)
          at org.apache.ignite.internal.processors.igfs.IgfsMetaManager.create(IgfsMetaManager.java:2922)
          at org.apache.ignite.internal.processors.igfs.IgfsImpl$15.call(IgfsImpl.java:1051)
          at org.apache.ignite.internal.processors.igfs.IgfsImpl$15.call(IgfsImpl.java:1019)
          at org.apache.ignite.internal.processors.igfs.IgfsImpl.safeOp(IgfsImpl.java:1823)
          at org.apache.ignite.internal.processors.igfs.IgfsImpl.create0(IgfsImpl.java:1019)
          at org.apache.ignite.internal.processors.igfs.IgfsImpl.create(IgfsImpl.java:990)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsInProc$15.apply(HadoopIgfsInProc.java:359)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsInProc$15.apply(HadoopIgfsInProc.java:357)
          at org.apache.ignite.igfs.IgfsUserContext.doAs(IgfsUserContext.java:54)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsInProc.create(HadoopIgfsInProc.java:357)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper$15.apply(HadoopIgfsWrapper.java:258)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper$15.apply(HadoopIgfsWrapper.java:255)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper.withReconnectHandling(HadoopIgfsWrapper.java:310)
          at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper.create(HadoopIgfsWrapper.java:255)
          at org.apache.ignite.hadoop.fs.v1.IgniteHadoopFileSystem.create(IgniteHadoopFileSystem.java:632)
          at org.apache.hadoop.fs.FileSystem.create(FileSystem.java:906)
          at org.apache.hadoop.fs.FileSystem.create(FileSystem.java:799)
          at org.apache.hadoop.mapred.TextOutputFormat.getRecordWriter(TextOutputFormat.java:123)
          at org.apache.ignite.internal.processors.hadoop.v1.HadoopV1OutputCollector.<init>(HadoopV1OutputCollector.java:68)
          at org.apache.ignite.internal.processors.hadoop.v1.HadoopV1Task$1.<init>(HadoopV1Task.java:73)
          at org.apache.ignite.internal.processors.hadoop.v1.HadoopV1Task.collector(HadoopV1Task.java:72)
          at org.apache.ignite.internal.processors.hadoop.v1.HadoopV1ReduceTask.run(HadoopV1ReduceTask.java:65)
          at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2TaskContext.run(HadoopV2TaskContext.java:249)
          at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.runTask(HadoopRunnableTask.java:201)
          at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.call0(HadoopRunnableTask.java:144)
          at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask$1.call(HadoopRunnableTask.java:116)
          at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask$1.call(HadoopRunnableTask.java:114)
          at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2TaskContext.runAsJobOwner(HadoopV2TaskContext.java:544)
          at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.call(HadoopRunnableTask.java:114)
          at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.call(HadoopRunnableTask.java:46)
          at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopExecutorService$2.body(HadoopExecutorService.java:186)
          at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:110)
          at java.lang.Thread.run(Thread.java:745)

{code}


situation #1 also happens when IGFS plays role of the 2ndary file system with the following stack :
{code}
  72 Hadoop-task-aebecef6-5cf2-4b66-9674-9fd8644e1183_1-REDUCE-0-0-#368%hadoop.HadoopMapReduceEmbeddedSelfTest0%@14531, prio=5, in group 'ignite', status: 'RUNNING'
  73           at org.apache.ignite.internal.processors.igfs.IgfsMetaManager.create(IgfsMetaManager.java:2853)
  74           at org.apache.ignite.internal.processors.igfs.IgfsImpl$15.call(IgfsImpl.java:1051)
  75           at org.apache.ignite.internal.processors.igfs.IgfsImpl$15.call(IgfsImpl.java:1019)
  76           at org.apache.ignite.internal.processors.igfs.IgfsImpl.safeOp(IgfsImpl.java:1823)
  77           at org.apache.ignite.internal.processors.igfs.IgfsImpl.create0(IgfsImpl.java:1019)
  78           at org.apache.ignite.internal.processors.igfs.IgfsImpl.create(IgfsImpl.java:990)
  79           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsInProc$15.apply(HadoopIgfsInProc.java:359)
  80           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsInProc$15.apply(HadoopIgfsInProc.java:357)
  81           at org.apache.ignite.igfs.IgfsUserContext.doAs(IgfsUserContext.java:49)
  82           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsInProc.create(HadoopIgfsInProc.java:357)
  83           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper$15.apply(HadoopIgfsWrapper.java:258)
  84           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper$15.apply(HadoopIgfsWrapper.java:255)
  85           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper.withReconnectHandling(HadoopIgfsWrapper.java:310)
  86           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper.create(HadoopIgfsWrapper.java:255)
  87           at org.apache.ignite.hadoop.fs.v1.IgniteHadoopFileSystem.create(IgniteHadoopFileSystem.java:632)
  88           at org.apache.ignite.hadoop.fs.IgniteHadoopIgfsSecondaryFileSystem.create(IgniteHadoopIgfsSecondaryFileSystem.java:406)
  89           at org.apache.ignite.internal.processors.igfs.IgfsSecondaryFileSystemCreateContext.create(IgfsSecondaryFileSystemCreateContext.java:87)
  90           at org.apache.ignite.internal.processors.igfs.IgfsMetaManager.create(IgfsMetaManager.java:2922)
  91           at org.apache.ignite.internal.processors.igfs.IgfsImpl$15.call(IgfsImpl.java:1051)
  92           at org.apache.ignite.internal.processors.igfs.IgfsImpl$15.call(IgfsImpl.java:1019)
  93           at org.apache.ignite.internal.processors.igfs.IgfsImpl.safeOp(IgfsImpl.java:1823)
  94           at org.apache.ignite.internal.processors.igfs.IgfsImpl.create0(IgfsImpl.java:1019)
  95           at org.apache.ignite.internal.processors.igfs.IgfsImpl.create(IgfsImpl.java:990)
  96           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsInProc$15.apply(HadoopIgfsInProc.java:359)
  97           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsInProc$15.apply(HadoopIgfsInProc.java:357)
  98           at org.apache.ignite.igfs.IgfsUserContext.doAs(IgfsUserContext.java:54)
  99           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsInProc.create(HadoopIgfsInProc.java:357)
 100           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper$15.apply(HadoopIgfsWrapper.java:258)
 101           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper$15.apply(HadoopIgfsWrapper.java:255)
 102           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper.withReconnectHandling(HadoopIgfsWrapper.java:310)
 103           at org.apache.ignite.internal.processors.hadoop.igfs.HadoopIgfsWrapper.create(HadoopIgfsWrapper.java:255)
 104           at org.apache.ignite.hadoop.fs.v1.IgniteHadoopFileSystem.create(IgniteHadoopFileSystem.java:632)
 105           at org.apache.hadoop.fs.FileSystem.create(FileSystem.java:906)
 106           at org.apache.hadoop.fs.FileSystem.create(FileSystem.java:887)
 107           at org.apache.hadoop.fs.FileSystem.create(FileSystem.java:784)
 108           at org.apache.hadoop.mapreduce.lib.output.TextOutputFormat.getRecordWriter(TextOutputFormat.java:132)
 109           at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2Task.prepareWriter(HadoopV2Task.java:103)
 110           at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2ReduceTask.run0(HadoopV2ReduceTask.java:57)
 111           at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2Task.run(HadoopV2Task.java:54)
 112           at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2TaskContext.run(HadoopV2TaskContext.java:249)
 113           at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.runTask(HadoopRunnableTask.java:201)
 114           at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.call0(HadoopRunnableTask.java:144)
 115           at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask$1.call(HadoopRunnableTask.java:116)
 116           at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask$1.call(HadoopRunnableTask.java:114)
 117           at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2TaskContext.runAsJobOwner(HadoopV2TaskContext.java:544)
 118           at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.call(HadoopRunnableTask.java:114)
 119           at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunnableTask.call(HadoopRunnableTask.java:46)
 120           at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopExecutorService$2.body(HadoopExecutorService.java:186)
 121           at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:110)
 122           at java.lang.Thread.run(Thread.java:745)

{code} ",test,['hadoop'],IGNITE,Bug,Major,2016-06-14 17:46:43,4
12977225,.NET: IClusterGroup.ForDaemons,"Java side is finally fixed (IGNITE-2911), we can enable this in .NET",.net newbie,['platforms'],IGNITE,Improvement,Trivial,2016-06-09 13:27:08,4
12977205,.NET: Add logging messages,"Add various logging where it might be useful:
* Startup (starting JVM, loading DLLs, resolving IGNITE_HOME and classpath, initializing store, etc)
* Unmanaged callbacks
* Anything else?

Investigate whether we should write to console as well, taking IGNITE_QUIET flag into account.",.net roadmap,['platforms'],IGNITE,Improvement,Major,2016-06-09 12:26:19,0
12977153,.NET: Log4net integration,"Provide Log4net implementation for {code}Apache.Ignite.Core.Log.ILogger{code}

Should be in a separate assembly/nuget.",.net roadmap,['platforms'],IGNITE,New Feature,Major,2016-06-09 09:11:41,4
12976416,.NET: Java and .NET nodes with default configs can not join,".NET sets BinaryConfiguration explicitly, while Java has 'null'. Need to find a way to fix this.",.net,['platforms'],IGNITE,Bug,Minor,2016-06-07 12:03:10,0
12972998,IGFS: Create user name converter for Hadoop secondary file system.,"*Problem*
When user access secondary file system, we propagate it form client machine to Ignite server and then try to perform the request on this user using either ""doAs"" or proxies in case of Kerberos.

The problem is that user name is not always match what we need. For example, user name is ""ivanov"", but the request should be performed using proxied user ""ivanov@[REALM_NAME]"". 

*Solution*
We need to introduce special converter interface which will intercept user names and convert them to correct form if needed. This interceptor should be places inside file system factory.",important,"['hadoop', 'igfs']",IGNITE,Task,Critical,2016-05-26 08:43:10,4
12970353,More efficient field lookup in binary protocol.,"*Problem*
Currently creation of binary field is performed as follows: {{BinaryObject.type().field(...)}}. Call to {{BinaryObject.type()}} is pretty expensive as it requires metadata lookup. Interesting thing is that subsequent call to {{BinaryType.field()}} doesn't require metadata at all. 

*Solution*
Implement lazy metadata load for this case.",customer,['general'],IGNITE,Task,Critical,2016-05-17 13:03:40,4
12965598,.NET: Reference NUnit via NuGet instead of predefined folder,"Currently test projects require NUnit binaries in modules\platforms\dotnet\libs folder. This requires extra steps from developers.

Using NuGet reference is more developer friendly.

There are two test projects: Apache.Ignite.Core.Tests and Apache.Ignite.Core.Tests.NuGet",.net,['platforms'],IGNITE,Improvement,Major,2016-05-06 13:52:42,0
12965178,WebSessions: session objects are deserialized on the server.,"*Problem*
1) {{WebSession}} and {{WebSessionListener$AttributesProcessor}} classes are {{Externalizable}}, so {{OptimziedMarshaller}} is used.
2) Both these classes pass objects directly. It means that even if force them to work through {{BinaryMarshaller}}, objects will be deserialized still. We need to rework this logic somehow.",important,['websession'],IGNITE,Bug,Critical,2016-05-05 05:59:34,4
12964943,Spark Data Frames Support in Apache Ignite,"Apache Spark already benefits from integration with Apache Ignite. The latter provides shared RDDs, an implementation of Spark RDD, that help Spark to share a state between Spark workers and execute SQL queries much faster. The next logical step is to enable support for modern Spark Data Frames API in a similar way.

As a contributor, you will be fully in charge of the integration of Spark Data Frame API and Apache Ignite.
",bigdata important,['spark'],IGNITE,New Feature,Critical,2016-05-04 11:02:04,2
12964029,IgniteRDD data frame does not handle object fields,"Added a corresponding test to IgniteRDDSpec

I am not sure what causing this failure because sql returns a proper result set on the Ignite side, and it cannot be converted to DataFrame row. Spark dev list consultation needed most likely.",bigdata,['spark'],IGNITE,Bug,Major,2016-04-30 01:13:42,2
12963479,GridDhtPartitionTopology.nodes()  can return List instead of Collection.,List could be more convenient to use in some cases. In addition it allow us to avoid iterator creation in some cases.,performance,['cache'],IGNITE,Task,Minor,2016-04-28 13:29:00,4
12959571,.NET: Ensure that Windows service is stopped correctly in case of forceful node stop.,"*Problem*
Node stop might be initiated from Java. E.g. from user job, or due to segmentation policy. We need to ensure that .NET service gets stopped as well in this case.

*Test case*
1) Start node A as Ignite service.
2) Start node B.
3) Send ""node kill"" task from B to A.
4) Wait for A to leave topology.
5) Ensure that ignite service is stopped.

Probably this could be implemented as automated unit test.",important,['platforms'],IGNITE,Task,Major,2016-04-18 08:10:25,4
12957722,ODBC: Implement fine-grained NIO server configuration.,"ODBC uses {{GridNioServer}} internally to handle user requests. This server has a number of properties, e.g. selector count buffer size, etc. 

We can expose these properties in {{OdbcConfiguration}}, but it appears to be too complex for users. Moreover, this is not the only component where we need NIO server configuration.

I propose to create separate bean and name it {{ServerConfiguration}}. This bean will be used in ODBC and any other component.",roadmap,"['general', 'odbc']",IGNITE,Task,Major,2016-04-11 14:38:33,1
12955797,CPP: Method GetNext() of the cursor classes should be optimized.,Current implementation of the GetNext() method of the cursor classes is too slow and should be optimized.,cpp performance,['platforms'],IGNITE,Task,Major,2016-04-04 15:31:11,4
12955715,.NET: IIgnite.GetOrCreateNearCache,"Implement {code}IIgnite.GetOrCreateNearCache{code} (at least without EvictionPolicy).
Eviction policy can be a set of predefined classes (same approach as with IpFinder, etc).",community,['platforms'],IGNITE,New Feature,Major,2016-04-04 09:52:46,4
12955704,.NET: Fix cache store error propagation,Make sure that exceptions in any ICacheStore methods are propagated to the user code properly.,.net,['platforms'],IGNITE,Bug,Critical,2016-04-04 08:35:18,0
12955326,.NET: Plugin system,Implement a plugin system to allow extending Ignite functionality by third parties.,.net important,['platforms'],IGNITE,New Feature,Major,2016-04-01 15:12:19,0
12955232,GridFunc: Simple deprecations.,"As a first step let's deprecate those methods where it is simple to do so:
- Unused methods
- Methods with several usages which are simple to refactor.",performance,['general'],IGNITE,Sub-task,Major,2016-04-01 08:43:56,4
12955222,Simplify filter passing logic in GridCacheAdapter and dependent classes.,"Currently we pass filters all over the cache as ""CacheEntryPredicate..."". In reality we have either 0 or 1 filter. We need to refactor the code.

The goal of this exercise is not performance. It will allow us to improve performance later in other tickets. This is only preparation.",performance,['cache'],IGNITE,Task,Major,2016-04-01 08:15:27,4
12953234,.NET: Add CacheConfiguration.NodeFilter,"See ServiceConfiguration.NodeFilter
* Caches start earlier than platform => need to pass pointer for static CacheConfigurations
* For dynamic cache start, no need for pointers",.NET important,['platforms'],IGNITE,Improvement,Major,2016-03-24 15:10:33,0
12950444,High memory utilization when OFFHEAP_TIERED mode and expiry policy are enabled.,"The problem is originally reported by Neil Wightman: http://apache-ignite-users.70518.x6.nabble.com/Off-Heap-cache-using-lots-of-heap-memory-td3414.html

*Steps to reproduce*
1) Run attached code and XML config. Observe that heap size is about 1Gb.
2) Comment expiry policy setter in the code, run again. Now only 150Mb is consumed.",community important,['cache'],IGNITE,Bug,Critical,2016-03-15 08:51:04,1
12948384,Implement single NEAR ATOMIC update future.,"Currently we create GridNearAtomicUpdateFuture always even if only one key is updated. Need to rework the logic so that simplified future is used instead, optimized for single-key scenario.",performance,['cache'],IGNITE,Task,Critical,2016-03-09 12:11:08,4
12948382,"IGFS: Automatically set ""copyOnRead"" to ""false"" for IGFS caches.","By default these flags are set to ""true"" meaning that we will copy values on each access.

We need to set them to {{false}} automatically on node startup.",community important,['igfs'],IGNITE,Task,Critical,2016-03-09 12:05:56,4
12946931,Optimized StripedCompositeReadWriteLock to avoid TLS lookups.,"Currently {{StripedCompositeReadWriteLock}} relies on thread-local index to find-out thread index. 
As these locks are usually used inside IgniteThread, we can assign special index to each thread instead.",performance,['general'],IGNITE,Task,Major,2016-03-04 09:32:25,4
12946928,"Optimize ""daemon"" node flag lookup for TcpDiscoveryNode.","Currently we perform lookup to attrs map on every call. There is no need for this. Instead, we should do that only once and then cache value.",performance,['general'],IGNITE,Task,Major,2016-03-04 09:23:58,4
12946915,"Cache conflicts must honour ""keepBinary"" flag.","*Problem*
{{GridCacheMapEntry}} deals with conflicts in some methods like {{innerSet}}. {{innerUpdate}}, etc.. When conflict occurs, we always deserialize keys/values what could lead to exceptions if there are no classes on the server.

*Solution*
Deserialize keys/values only if ""keepBinary=false"".",community customer important,['cache'],IGNITE,Bug,Blocker,2016-03-04 08:31:29,4
12946436,Binary object might be deserialized unexpectedly when cache store is enabled.,"*Problem*
See {{GridCacheMapEntry}} class. There are lots of calls to store like this:
{code}
cctx.store().put(null, keyValue(false), CU.value(val, cctx, false), ver);
{code}

When {{keyValue()}} is called, it might force object deserialization. And if there is no class on the server, the following exception might appear:
{code}
g.apache.ignite.binary.BinaryInvalidTypeException: XXX
	at org.apache.ignite.internal.binary.BinaryContext.descriptorForTypeId(BinaryContext.java:558) ~[ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.binary.BinaryReaderExImpl.deserialize(BinaryReaderExImpl.java:1442) ~[ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.binary.BinaryObjectImpl.deserializeValue(BinaryObjectImpl.java:542) ~[ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.binary.BinaryObjectImpl.value(BinaryObjectImpl.java:117) ~[ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.processors.cache.GridCacheMapEntry.keyValue(GridCacheMapEntry.java:1261) ~[ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.processors.cache.GridCacheMapEntry.initialValue(GridCacheMapEntry.java:3326) ~[ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.processors.datastreamer.DataStreamerImpl$IsolatedUpdater.receive(DataStreamerImpl.java:1598) ~[ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.processors.datastreamer.DataStreamerUpdateJob.call(DataStreamerUpdateJob.java:140) ~[ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.processors.datastreamer.DataStreamProcessor.processRequest(DataStreamProcessor.java:304) [ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.processors.datastreamer.DataStreamProcessor.access$000(DataStreamProcessor.java:49) [ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.processors.datastreamer.DataStreamProcessor$1.onMessage(DataStreamProcessor.java:79) [ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:822) [ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.managers.communication.GridIoManager.access$1600(GridIoManager.java:103) [ignite-core-1.5.7.jar:1.5.7]
	at org.apache.ignite.internal.managers.communication.GridIoManager$5.run(GridIoManager.java:785) [ignite-core-1.5.7.jar:1.5.7]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_51]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_51]
{code}

*Proposed solution*
Pass key and value directly to store manager. It should already handle everything correctly.",community customer important,['cache'],IGNITE,Bug,Blocker,2016-03-03 08:00:26,4
12946126,Fast access to GridTopic listeners.,"Currently all listeners are located inside a ConcurrentHashMap. It takes some time to get a listener from it.

The most important listeners are those of GridTopic enum. Let's store these listeners in volatile array where enum ordinal will be listener index.",performance,['general'],IGNITE,Task,Major,2016-03-02 12:08:59,4
12942981,HotSpot in GridQueryProcessor.BinaryProperty.value() method,"The hotspot was detected in the following scenario.

1) Start a server node(s) with CacheConfiguration that stores binary objects of type T and has field A in the indexes;

2) Start client node that creates objects of type T using BinaryObjectBuilder but doesn't set value for field A at all;

3) Client populates the cache with created objects using IgniteDataStreamer at high rate.

If you connect to the server using Visual VM you'll see that threads from the public thread pull spend a lot of time waiting for a monitor and that {{GridQueryProcessor.BinaryProperty.value()}} is a hotspot.

The reason why the method above is the hotspot is because it calls 
{{U.warn(log, ""Neither key nor value have property "" +
                            ""[propName="" + propName + "", key="" + key + "", val="" + val + ""]"");}}

all the time converting a binary object to String. The warning is called because field A is not set in the binary representation.

This warning must be reworked in one of the following way:
- just print the name of the field that is not found;
- print the warning for the debug level only because cases there can be cases when a binary object doesn't have a field that is set in the indexes.

In addition revisit the rest of the code removing conversion of BinaryObject to String at places that could lead to performance degradation.",community important,[],IGNITE,Bug,Blocker,2016-02-24 15:37:25,4
12940775,.NET: Dynamically registered classes must use binary serialization if possible,"At present we support dynamic class registration in .NET, but they are written using deafult .NET mechanism. This is counterintuitive for users and not consistent with Java, where such classes are written in binary form.

Proposed implementation plan:
1) For each dynamically registered class we must understand whether it could be serialized through binary or not. If not - print a warning and fallback to .NET.
2) Before writing a class we must ensure that it's [typeId -> name] pair is known to the cluster. If not - write full class name instead of type ID. Java already do that.
3) Last, to support backward compatibility we must be able to fallback to current mode with help of some boolean flag.",.net breaking-api important,['platforms'],IGNITE,Task,Major,2016-02-20 12:03:50,0
12940768,GridClosureProcessor internal closures are [de]serialized by OptimizedMarshaller even if BinaryMarshaller is configured,"Usage of OptimizedMarshaller is forced because:
a. Closures implement Externalizable.
b. classnames.properties file contains closure class names.

Need to implement new versions of closures (C1, C1MLA, C2, C2MLA, C4) that can be processed by BinaryMarshaller.",community,['compute'],IGNITE,Bug,Major,2016-02-20 11:33:39,4
12940441,.NET: Call .NET services from Java,".NET services can be called via PlatformDotNetService interface, providing method name and arguments. ",.net,"['managed services', 'platforms']",IGNITE,New Feature,Major,2016-02-19 09:16:42,0
12939961,Need to add an option to suppress binary marshaller warnings,"Some users don't want to have warnings like below in the logs, because they are printed out for each class and are not always needed. We need to have a way to suppress them.

Both quiet mode and logging via {{IgniteLogger}} should be fixed.

{code}
[11:37:46] Class ""<an FQN of the class goes here>"" cannot be serialized using BinaryMarshaller because it either implements Externalizable interface or have writeObject/readObject methods. OptimizedMarshaller will be used instead and class instances will be deserialized on the server. Please ensure that all nodes have this class in classpath. To enable binary serialization either implement Binarylizable interface or set explicit serializer using BinaryTypeConfiguration.setSerializer() method.
{code}",important,['general'],IGNITE,Improvement,Major,2016-02-17 21:52:37,4
12939487,.NET Core support (run on Linux),"Ignite.NET should target .NET Standard so it is available on maximum number of platforms, see
https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/
https://weblog.west-wind.com/posts/2016/Nov/23/NET-Standard-20-Making-Sense-of-NET-Again
https://github.com/dotnet/core/blob/master/roadmap.md

Make sure that all used APIs are supported on all platforms, see API Analyzer tool:
https://channel9.msdn.com/coding4fun/blog/Your-New-Virtual-API-Review-Assistant

This will allow us to run on Windows, OSX, and Linux, and target .NET Core in additional to good old regular .NET.

Possible difficulties:
* JNI interop. Core has dllImport and it works on linux, and our C++ client works on linux, so it should be possible
* Reflection. We use it a lot, and API has changed.",.net important xplat,['platforms'],IGNITE,New Feature,Major,2016-02-16 13:03:59,0
12939243,Ignition.localIgnite() unreliable under Gateways and cause wrong components deserialization.,"We can get something like this:
{noformat}
java.lang.IllegalArgumentException: This method should be accessed under org.apache.ignite.thread.IgniteThread
at org.apache.ignite.internal.IgnitionEx.localIgnite(IgnitionEx.java:1252)
at org.apache.ignite.Ignition.localIgnite(Ignition.java:531)
at org.project.MyPojo.readResolve(MyPojo.java:123)
at org.apache.ignite.internal.binary.BinaryClassDescriptor.read(BinaryClassDescriptor.java:746)
at org.apache.ignite.internal.binary.BinaryReaderExImpl.deserialize(BinaryReaderExImpl.java:1448)
at org.apache.ignite.internal.binary.BinaryUtils.doReadObject(BinaryUtils.java:1564)
at org.apache.ignite.internal.binary.BinaryReaderExImpl.readObject(BinaryReaderExImpl.java:1086)
at org.apache.ignite.internal.binary.BinaryFieldAccessor$DefaultFinalClassAccessor.readFixedType(BinaryFieldAccessor.java:827)
at org.apache.ignite.internal.binary.BinaryFieldAccessor$DefaultFinalClassAccessor.read(BinaryFieldAccessor.java:643)
at org.apache.ignite.internal.binary.BinaryClassDescriptor.read(BinaryClassDescriptor.java:734)
at org.apache.ignite.internal.binary.BinaryReaderExImpl.deserialize(BinaryReaderExImpl.java:1448)
at org.apache.ignite.internal.binary.BinaryUtils.doReadObject(BinaryUtils.java:1564)
at org.apache.ignite.internal.binary.BinaryUtils.deserializeOrUnmarshal(BinaryUtils.java:1908)
at org.apache.ignite.internal.binary.BinaryUtils.doReadMap(BinaryUtils.java:1892)
at org.apache.ignite.internal.binary.BinaryReaderExImpl.deserialize(BinaryReaderExImpl.java:1595)
at org.apache.ignite.internal.binary.BinaryReaderExImpl.readField(BinaryReaderExImpl.java:1644)
at org.apache.ignite.internal.binary.BinaryFieldAccessor$DefaultFinalClassAccessor.read(BinaryFieldAccessor.java:643)
at org.apache.ignite.internal.binary.BinaryClassDescriptor.read(BinaryClassDescriptor.java:734)
at org.apache.ignite.internal.binary.BinaryReaderExImpl.deserialize(BinaryReaderExImpl.java:1448)
at org.apache.ignite.internal.binary.BinaryObjectImpl.deserializeValue(BinaryObjectImpl.java:537)
at org.apache.ignite.internal.binary.BinaryObjectImpl.value(BinaryObjectImpl.java:117)
at org.apache.ignite.internal.processors.cache.CacheObjectContext.unwrapBinary(CacheObjectContext.java:257)
at org.apache.ignite.internal.processors.cache.CacheObjectContext.unwrapBinaryIfNeeded(CacheObjectContext.java:148)
at org.apache.ignite.internal.processors.cache.CacheObjectContext.unwrapBinaryIfNeeded(CacheObjectContext.java:135)
at org.apache.ignite.internal.processors.cache.GridCacheContext.unwrapBinaryIfNeeded(GridCacheContext.java:1757)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridPartitionedSingleGetFuture.setResult(GridPartitionedSingleGetFuture.java:629)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridPartitionedSingleGetFuture.localGet(GridPartitionedSingleGetFuture.java:421)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridPartitionedSingleGetFuture.mapKeyToNode(GridPartitionedSingleGetFuture.java:337)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridPartitionedSingleGetFuture.map(GridPartitionedSingleGetFuture.java:204)
at org.apache.ignite.internal.processors.cache.distributed.dht.GridPartitionedSingleGetFuture.init(GridPartitionedSingleGetFuture.java:196)
at org.apache.ignite.internal.processors.cache.distributed.dht.colocated.GridDhtColocatedCache.getAsync(GridDhtColocatedCache.java:266)
at org.apache.ignite.internal.processors.cache.GridCacheAdapter.get(GridCacheAdapter.java:4774)
at org.apache.ignite.internal.processors.cache.GridCacheAdapter.get(GridCacheAdapter.java:4758)
at org.apache.ignite.internal.processors.cache.GridCacheAdapter.get(GridCacheAdapter.java:1391)
at org.apache.ignite.internal.processors.cache.IgniteCacheProxy.get(IgniteCacheProxy.java:865)
{noformat}",1.6 community,['general'],IGNITE,Bug,Critical,2016-02-15 10:46:31,4
12938790,"Improve usability of ""SELECT *"" SqlQuery.","*Case 1*:
{code}SELECT * FROM Employee e{code}
Result: exception:
Reason: query is expanded to 
{code}SELECT Employee._key, Employee._val FROM EMPLOYEE e{code}
instead of 
{code}SELECT e._key, e._val FROM EMPLOYEE e{code}

*Case 2*
{code}SELECT e.* FROM Employee e{code}
Result: exception
Reason: hard-coded check in IgniteH2Indexing.generateQuery():
{code}
if (!qry.startsWith(""*""))
    throw new IgniteCheckedException(...);
{code}

*Proposed solution*
Instead of checking for asteriks, we must also check for ""[table/alias].*"" pattern.",important,['cache'],IGNITE,Task,Major,2016-02-12 12:00:32,4
12937806,Enum arguments in SQL queries are not considered with BinaryMarshaller,"Queries like the one below doesn't work with {{Enum}} returning a wrong result when binary marshaller is used.

{noformat}
SqlQuery<Long, Event> query = new SqlQuery<Long, Event>(Event.class, ""type = ?"");
query.setArgs(EventType.EventA);
{noformat}

The same query works perfectly fine if optimized marshaller is enabled instead.

Attached the test that reproduces the issue.",important,['general'],IGNITE,Bug,Major,2016-02-09 09:03:39,4
12937443,Investigate HashMap.Node[] allocations from GridCacheMvccManager$3,"*Problem* 
See GridCacheMvccManager.addFuture() method. We create a weird HashSet there with internal table size == 5. Can we have something more efficient here?

*Proposed solution*
Need to run single get-put benchmarks and check usual size of this collection. If it is often equal to 1, then instead of allocating the whole collection, we'd better to have a singleton first and expand to collection if there are more elements. 
Please pay attention that collection usually used as monitor in some synchronized blocks.",performance,['cache'],IGNITE,Task,Major,2016-02-08 08:55:45,4
12937442,.NET: Native object comparison,"Currently all comparisons (cache key comparisons, atomic operations, etc) are performed in binary form on Java side. This may not work as intended when user has overridden Equals/GetHashCode. Need to investigate whether we can or should do anything about this. 
* Is it really an issue?
* Is there a workaround?
* Are there any user requests about this?",.net,['platforms'],IGNITE,Improvement,Major,2016-02-08 08:51:33,0
12936454,GridCompoundFuture: Allocate ArrayList only if there are >1 futures.,"*Problem*
When GridCompoundFuture is created, empty emoty ArrayList for child futures is allocated immediately. When the very first child future is added, ArrayList automatically expands to Object[10]. 
But in most cases we will have much less than 10 futures, and quite often there will be only one.

*Proposal*
1) Run base put/get benchmarks with a single key and several nodes and estimate amount of child futures. This case be as easy as adding System.out() to GridCompoundFuture.init() method which will print list size.
2) Depending on the result we should do one of the following:
- Allocate ArrayList only after second future is added;
- Or allocate ArrayList with fewer amount of elemnts (say, 4) - this depends on what we will see in during tests.

This should be fairly simple to check and implement.",performance,['general'],IGNITE,Task,Major,2016-02-03 19:51:51,1
12936306,GridNioServer.processWrite() generates garbage.,"New ArrayList is created and then extended to at least 10 elements on each write event. 

Fix is fairly simple - keep this list as a field.",performance,['general'],IGNITE,Task,Major,2016-02-03 10:33:26,4
12935964,Get rid of GridCompoundFuture and MiniFutures in GridNearLockFuture.,MiniFutures contain data and synchronization logic which isn't needed in this particular case. Removing it might reduce memory consumption and improve performance.,performance,['general'],IGNITE,Task,Major,2016-02-02 13:40:28,4
12935541,Review ThreadLocal.remove() usages.,"*Problem*
We have lots scenarios when TL.set(...) is accompanied with TL.remove(). Once TL entry is removed, next set(...) invocation will cause creation of new inner entries, thus generating garbage.

*Solution*
Use TL.set(null) instead of TL.remove(). 

*CAUTION!* This applies only to static TLs and TLs on rarely created objects (e.g. contexts). This optimization should not be applied to non-static TLs of frequently created objects because it will lead to excessive grow of internal TL map.
",performance,['general'],IGNITE,Task,Critical,2016-02-01 07:55:10,4
12935152,"GridDhtPartitionTopologyImpl#nodes(int, AffinityTopologyVersion) call are too costly.",New HashSet and ArrayList are instantiated on every call. Check if it is possible to optimize subsequent calls of this method if affinity assignment hasn't changed.,performance,['general'],IGNITE,Task,Major,2016-01-29 15:34:47,4
12935142,GridBinaryMarshaller#pushContext() uses ThreadLocal inefficiently.,"{noformat}
java.lang.ThreadLocal$ThreadLocalMap.set(ThreadLocal, Object)
java.lang.ThreadLocal$ThreadLocalMap.access$100(ThreadLocal$ThreadLocalMap, ThreadLocal, Object)
java.lang.ThreadLocal.setInitialValue()
java.lang.ThreadLocal.get()
org.apache.ignite.internal.binary.GridBinaryMarshaller.pushContext(BinaryContext)
org.apache.ignite.internal.binary.GridBinaryMarshaller.unmarshal(byte[], ClassLoader)
{noformat}
It creates hundreds of ThreadLocalMap$Entry instances. Need to find out whether BinaryContext can be stored more efficiently.",performance,['general'],IGNITE,Task,Major,2016-01-29 15:16:12,4
12935135,IgniteTxImplicitSingleStateImpl#allEntries() and #writes() instantiate new collection on every call,It can be optimized by creating and storing Collections.singletonList() on #addEntry() call.,performance,['general'],IGNITE,Task,Critical,2016-01-29 15:00:54,4
12935111,GridNearAtomicUpdateRequest allocates to much Object[],"*Problem*
GridNearAtomicUpdateRequest might create up to 4 ArrayList's. Initially they are empty. When the very first element is added, ArrayList is extended to hold 10 objects (new Object[]). Put in ATOMIC cache almost all operations are performed on a single key. 
As a result 90% of array is not used.

*Proposed solution*
We know in advance how many keys participate in operation. Let's use min(10, keyCount) as initial array list size. This will make allocation more accurate.",performance,['cache'],IGNITE,Task,Major,2016-01-29 13:47:17,4
12934789,.NET: Peer assembly loading,"Similar to peer class loading in Java, we can provide a possibility to load assemblies on already started nodes, so that a node can execute jobs that are not present on other nodes.

Considerations:
* Can we unload assemblies after use to free memory? This requires a separate AppDomain, can we work with that?",.net important,['platforms'],IGNITE,New Feature,Major,2016-01-28 12:17:33,0
12933101,BinaryObject: Inconsistent field type name is returned for Collections,"Run this code below and you will see that different field type name is returned for objects of the same type. There is a bug in {{BinaryObjectBuilderImpl.serializeTo}} method.

{noformat}
        BinaryObjectBuilder root = ignite.binary().builder(""some_objects"");
        root.setField(""bi"", new BigInteger(String.valueOf(Long.MAX_VALUE) + ""1""), BigInteger.class);
        root.setField(""bd"", new BigDecimal(String.valueOf(Long.MAX_VALUE) + ""1.1""), BigDecimal.class);

        List<Integer> list = new ArrayList<>();
        list.add(Integer.MAX_VALUE);

        root.setField(""l"", list); //<- here: Collection
        root.setField(""al"", Arrays.<Integer>asList(Integer.MAX_VALUE)); //<- here: Object

        BinaryObject binaryObject = root.build();

        System.out.println(binaryObject.type().fieldTypeName(""l""));
        System.out.println(binaryObject.type().fieldTypeName(""al""));
{noformat}",important,[],IGNITE,Bug,Major,2016-01-21 15:53:11,4
12932709,.NET: Combine .Net example configuration files into one like for Java examples,".Net platform examples required a set of configuration files. But if there's no significant reason for that then we can just combine into one like it impemented for Java
",.net roadmap,['platforms'],IGNITE,Task,Minor,2016-01-20 13:57:39,4
12932447,Is CU.clientNode() really needed?,"Profiling shows medium hot spot in the method GridCacheUtils.clientNode(ClusterNode) - considerable amount of time is spent on attributes map lookup. 

What is interesting is that ClusterNode already has isClient() method which do not require any lookups.

Can we simply remove GridCacheUtils.clientNode() method and use ClusterNode.isClient() instead?",performance,['cache'],IGNITE,Task,Major,2016-01-19 15:20:57,4
12932443,Hot spot in GridDhtAtomicCache$DeferredResponseBuffer.addResponse(),"Problems:
1) DeferredResponseBuffer.respVers is ConcurrentLinkedDeque8 and size() method is called on it. It is O(N) for this collection, hence the hot spot.
2) We use read-write lock for very small updates. This is not efficient.

Probably we should simply switch to (sycnhronized + ArrayList) and this will be enough. 
If synchronized is not an option, at the very least we must use collection with O(1) size or maintain separate counter (e.g. LongAccumulator).",performance,['cache'],IGNITE,Task,Critical,2016-01-19 15:14:00,4
12932166,.NET: Change default mapper behavior,"We need to mirror changes implemented in IGNITE-2191:
1) Default mapper must use full class name (i.e. with package)
2) Provide additional mapper implementation which will use simple names.",.net important,['platforms'],IGNITE,Sub-task,Minor,2016-01-18 14:21:47,0
12931398,IGFS + Ignite MR works slower than Hadoop (Hortonswork) MR,"A performance test of IGFS MR vs Traditional HDFS (Hortonswork) MR and performance here was actually worse using IGFS MR.

5 ignite nodes on the 5 data nodes were setup, each also with 64GB ram.

The same sample search via Hunk was done, making sure Hunk initiated the MR stage. The only change in both runs was only to run IGFS MR or Traditional MR over HDFS
 
Traditional MR over HDFS.
This search has completed in 54.701seconds.

IGFS MR
This search has completed in 75.959seconds.",important,['igfs'],IGNITE,Bug,Blocker,2016-01-15 08:29:13,4
12929470,Performance optimization for an IgnitCache.query execution.,"Current solution of an sql query executed from client node for replicated cache could be improved.
 As for now we split initial query into map and reduce steps on a client node, but it would be more effective just to send initial query to a data node and execute it there without splitting since cache is replicated.",performance,['sql'],IGNITE,Improvement,Major,2016-01-12 12:04:31,4
12929137,Ensure that Hadoop client is still operational after failed map-reduce jobs.,"We need to ensure that MR failures on the server doesn't block further job submissions. 

First of all we should cover such situations with tests.
1) Test exceptions on all job stages (setup, map, reduce, combine, cleanup)
2) Test several exception types: 
- Exceptions expected from Hadoop interface
- Exceptions unexpected form Hadoop interface
- Errors.",important,['hadoop'],IGNITE,Bug,Critical,2016-01-11 10:10:14,4
12929132,IGFS and Hadoop clients must be able to failover to other nodes,"Currently both IGFS and Hadoop clients rely on a single IP address of a server. Should the server go down, clients do not work any more. Thus, we have a single point of failure.

We need to implement failover for both clients.",important,"['hadoop', 'igfs']",IGNITE,Task,Critical,2016-01-11 09:47:31,4
12929131,IGFS shows incorrect file modification time when running over secondary file system.,"Steps to reproduce:
1) Create a file in a secondary file system.
2) Access this file directly and observe creation date X.
3) Now access this file indirectly through IGFS and observe that it will have different creation date Y. 

We need to make such properties equal.",important,['igfs'],IGNITE,Bug,Critical,2016-01-11 09:44:53,4
12928611,IGFS: MapReduce task sent by Hunk/Splunk fails with NPE,"A MR task being sent by Hunk [1] fails with NPE

{noformat}
[10:31:58,250][ERROR][Hadoop-task-fd3ff783-d952-4147-8e5b-8e3080b91ddb_1-MAP-50- 0-#271%null%][HadoopRunnableTask] Task execution failed.
class org.apache.ignite.IgniteCheckedException: class org.apache.ignite.IgniteCh eckedException: null
at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2MapTask.run0( HadoopV2MapTask.java:105)
at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2Task.run(Hado opV2Task.java:54)
at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2TaskContext.r un(HadoopV2TaskContext.java:249)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunna bleTask.runTask(HadoopRunnableTask.java:201)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunna bleTask.call0(HadoopRunnableTask.java:144)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunna bleTask$1.call(HadoopRunnableTask.java:116)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunna bleTask$1.call(HadoopRunnableTask.java:114)
at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2TaskContext$1 .run(HadoopV2TaskContext.java:550)
at java.security.AccessController.doPrivileged(Native Method)
at javax.security.auth.Subject.doAs(Subject.java:415)
at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInforma tion.java:1657)
at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2TaskContext.r unAsJobOwner(HadoopV2TaskContext.java:548)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunna bleTask.call(HadoopRunnableTask.java:114)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunna bleTask.call(HadoopRunnableTask.java:46)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopExecu torService$2.body(HadoopExecutorService.java:186)
at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java :110)
at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NullPointerException
at com.splunk.mr.SplunkSearchMapper.runImpl(SplunkSearchMapper.java:308)
at com.splunk.mr.SplunkBaseMapper.run(SplunkBaseMapper.java:169)
at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2MapTask.run0( HadoopV2MapTask.java:87)
... 16 more
at org.apache.ignite.internal.processors.hadoop.HadoopUtils.transformExc eption(HadoopUtils.java:290)
at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2TaskContext.r un(HadoopV2TaskContext.java:255)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunna bleTask.runTask(HadoopRunnableTask.java:201)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunna bleTask.call0(HadoopRunnableTask.java:144)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunna bleTask$1.call(HadoopRunnableTask.java:116)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunna bleTask$1.call(HadoopRunnableTask.java:114)
at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2TaskContext$1 .run(HadoopV2TaskContext.java:550)
at java.security.AccessController.doPrivileged(Native Method)
at javax.security.auth.Subject.doAs(Subject.java:415)
at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInforma tion.java:1657)
at org.apache.ignite.internal.processors.hadoop.v2.HadoopV2TaskContext.r unAsJobOwner(HadoopV2TaskContext.java:548)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunna bleTask.call(HadoopRunnableTask.java:114)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopRunna bleTask.call(HadoopRunnableTask.java:46)
at org.apache.ignite.internal.processors.hadoop.taskexecutor.HadoopExecu torService$2.body(HadoopExecutorService.java:186)
at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java :110)
at java.lang.Thread.run(Thread.java:745)
{noformat}



[1] http://www.splunk.com/en_us/products/hunk.html",important,['igfs'],IGNITE,Bug,Major,2016-01-08 11:36:05,4
12928571,HadoopFileSystemFactory must set correct context ClassLoader before calling FileSystem.get(),"FileSystem.get() might delegate to ServiceLoader to get the list of file system implementation. And ServiceLoader is known to be sensitive to context classloader.

We must ensure that Thread.contextClassLoader is equal to Factory.getClassLoader().",important,['hadoop'],IGNITE,Task,Critical,2016-01-08 07:22:00,4
12928348,Throw sensible error from IgniteHadoopFileSystem if real file system is not IgniteHadoopIgfsSecondaryFileSystem,"Consider the following scenario:
1) User configures some custom secondary file system;
2) Some paths are set to PROXY mode (e.g. default modes);
3) User instantiates IgniteHadoopFileSystem somewhere else. 

Result:
IgniteHadoopFileSystem notices PROXY paths and tries to get FileSystem factory from handshake request, but it is null. As a result, NPE is thrown a moment later.

Proposed fix:
If factory is null. we must throw an exception and advise user to set IgniteHadoopIgfsSecondaryFileSystem as secondary file system.in IGFS configuration.",important,['hadoop'],IGNITE,Task,Major,2016-01-07 15:17:23,4
12927205,Hotspot in GridDhtPartitionTopologyImpl readLock() and readUnlock() methods,"When running simple PUT benchmark in ATOMIC cache, read lock-unlock consumes up to 10% of time.",performance,"['cache', 'general']",IGNITE,Task,Major,2016-01-05 08:16:15,4
12924647,Replace GridSpinBusyLock with improved version of GridStripedSpinBusyLock,"1) GridStripedSpinBusyLock is not striped properly at the moment - produced AtomicIntegers are located too close to each other to produce considerable amount of false-shares. To fix it, int state of each lock should be padded with dummy values. This will give significant throughput increase.
2) Then GridSpingBusyLock must be replaced with GridStripedSpinBusyLock all over the project.",performance,['general'],IGNITE,Task,Major,2015-12-29 08:53:26,4
12924637,Evaluate MPSC queue implementation from  Dmitry Vyukov in GridNioServer,"See http://www.1024cores.net/home/lock-free-algorithms/queues/non-intrusive-mpsc-node-based-queue

This queue is currently in the hear of the following products:
1) Akka
2) Aeron
3) Netty
4) Some Netflix libs.

Implementation is pretty easy, so it should not be a problem to evaluate it quickly.",performance,['general'],IGNITE,Task,Critical,2015-12-29 08:13:56,4
12924313,F.first(Collection) should use index-based lookup for Lists.,"There are lots of places in code where F.first(Collection) is used. Quite often passed collection is a List. 
Instead of gettting iterator, we should do ""get(0)"" in these cases. This will allow us to prevent iterator creation.",performance,['general'],IGNITE,Task,Major,2015-12-25 15:06:00,4
12924278,Arrays.asList() should not be used for 1- and 2- elements.,"There are several places in code where Arrays.asList is used as follows:
1) For a single element. These places should be replaced with Collections.singleton() to avoid unnecessary array allocations.
2) For two elements. Here we should create our own ""doubled-singleton"" implementation.

Some of these places are located on hot code paths (e.g. cache PUT).",performance,['general'],IGNITE,Task,Major,2015-12-25 09:39:39,4
12924209,Replace Atomic* variables with field updaters.,"Field updaters must be used instaed of the following classes:
1) AtomicInteger
2) AtomicLong
3) AtomicReference
4) If AtomicBoolean is met in some hot spaces, it must be replaced with (int + updater) pair. ",performance,['general'],IGNITE,Task,Major,2015-12-24 15:07:57,4
12924207,Optimize GridDistributedTxMapping.,"This class has two methods: reads() and writes(). Together they return the whole set of entries. 
The problem is that each call creates collection wrapper over entries + 1 additional iterator per each traverse over collection. This seen as a garbage ""hotspot"" in flight recorder.

Actually there is no need for these methods. Instead, we can pass entries collection directly and filter entries manually.",performance,['cache'],IGNITE,Task,Critical,2015-12-24 14:56:47,4
12924172,Hadoop: secondary file system is initialized on client even if there are no explicit PROXY paths.,"*Problem*:
In case at least one PROXY path exists, we intialize secondary file system on the client (IgniteHadoopFileSystem). 
We have 4 ""default paths"" which are always defined (see IgfsImpl) and one of these paths is in PROXY mode.
As a result, whenever secondary file system is defined, it will always be intiialized on the client whether it is needed or not.

*Proposed solutions*:
a) Remove these default paths as they are of little use in real apps.
b) Or make them optional through configuration parameter.",important,['hadoop'],IGNITE,Bug,Critical,2015-12-24 09:40:25,4
12923767,Simplify GridCompoundFuture.,"Compount future is integral part of Ignite async/reactive design. However, it seems to be too heavy and inefficient. Need to evaluate possible ways to simplify and optimzie it. 

Particularly, the following methods generate a lot garbage:
1) <init>
2) add
3) Listener.apply()

But much more things could be improved here.",performance,['general'],IGNITE,Task,Critical,2015-12-22 15:05:45,4
12923765,"GridNioServer$AbstractNioClientWorker,changeReqs can be changed to queue.","GridNioServer$AbstractNioClientWorker,changeReqs is ConcurrentLinkedDeque8 currently. But it is used as queue, so we can change it to ConcurrentLinkedQueue safely.",performance,['general'],IGNITE,Task,Major,2015-12-22 15:02:05,4
12923682,.Net: Ensure async Task can be cancelled.,"Java has IgniteFuture.cancel() method. Depending on the context, it perofrms different things. From no-op to task/closure cancellation. 

We need to ensure that TPL infrastructure in .NET is able to propagate cancellation to Java future.",important,['platforms'],IGNITE,Bug,Critical,2015-12-22 07:41:31,4
12923346,Handle duplicate field names in BinaryMarshaller.,"Consider the following scenario:
{code}
class A {
    int field;
}
class B : class A {
    int field;
}
{code}

In this case BinaryMarshaller will throw an exception about duplicate field names. And there is no sensible workaround for user. 

We can add some prefix/suffix to comflicting fields. E.g. A.field will be written as ""field"", B.field will be written as ""field_B"".",important,"['general', 'platforms']",IGNITE,Bug,Blocker,2015-12-21 06:07:36,4
12922712,Accessing from IGFS to HDFS that is in kerberised environment,"There is some issue in the current IGFS implementation that doesn't take into account some Kerberos user related settings which leads to the exception below when there is an attempt to work with Kerberised cluster

{noformat}
Connecting to HDFS with the following settings [uri=null, cfg=all-site.xml, userName=null]
log4j:WARN No appenders could be found for logger (org.apache.hadoop.metrics2.lib.MutableMetricsFactory).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
org.apache.hadoop.security.AccessControlException: SIMPLE authentication is not enabled. Available:[TOKEN, KERBEROS]
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
at org.apache.hadoop.ipc.RemoteException.instantiateException(RemoteException.java:106)
at org.apache.hadoop.ipc.RemoteException.unwrapRemoteException(RemoteException.java:73)
at org.apache.hadoop.hdfs.DFSClient.listPaths(DFSClient.java:2096)
at org.apache.hadoop.hdfs.DistributedFileSystem$DirListingIterator.<init>(DistributedFileSystem.java:944)
at org.apache.hadoop.hdfs.DistributedFileSystem$DirListingIterator.<init>(DistributedFileSystem.java:927)
at org.apache.hadoop.hdfs.DistributedFileSystem$19.doCall(DistributedFileSystem.java:872)
at org.apache.hadoop.hdfs.DistributedFileSystem$19.doCall(DistributedFileSystem.java:868)
at org.apache.hadoop.fs.FileSystemLinkResolver.resolve(FileSystemLinkResolver.java:81)
at org.apache.hadoop.hdfs.DistributedFileSystem.listLocatedStatus(DistributedFileSystem.java:868)
at org.apache.hadoop.fs.FileSystem.listLocatedStatus(FileSystem.java:1694)
at org.apache.hadoop.fs.FileSystem$6.<init>(FileSystem.java:1786)
at org.apache.hadoop.fs.FileSystem.listFiles(FileSystem.java:1783)
at com.ig.HadoopFsIssue.main(HadoopFsIssue.java:35)
Caused by: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.security.AccessControlException): SIMPLE authentication is not enabled. Available:[TOKEN, KERBEROS]
at org.apache.hadoop.ipc.Client.call(Client.java:1427)
at org.apache.hadoop.ipc.Client.call(Client.java:1358)
at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:229)
at com.sun.proxy.$Proxy7.getListing(Unknown Source)
at org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB.getListing(ClientNamenodeProtocolTranslatorPB.java:573)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:606)
at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:187)
at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:102)
at com.sun.proxy.$Proxy8.getListing(Unknown Source)
at org.apache.hadoop.hdfs.DFSClient.listPaths(DFSClient.java:2094)
{noformat}


The issue is fixed in the following way. Need to revisit the fix and check whether it can lead to some other consequences.

{noformat}
/**
* @return {@link org.apache.hadoop.fs.FileSystem}  instance for this secondary Fs.
* @throws IOException
*/
public FileSystem createFileSystem(String userName) throws IOException {
    userName = IgfsUtils.fixUserName(userName);

    UserGroupInformation.setConfiguration(cfg);
    UserGroupInformation ugi = UserGroupInformation.createProxyUser(userName, UserGroupInformation.getCurrentUser());

    try {
        return ugi.doAs(new PrivilegedExceptionAction<FileSystem>() {
            @Override
            public FileSystem run() throws Exception {
                    return FileSystem.get(uri, cfg);
            }
        });
    } catch (InterruptedException e) {
        Thread.currentThread().interrupt();

        throw new IOException(""Failed to create file system due to interrupt."", e);
    }
}
{noformat}",important,"['hadoop', 'igfs']",IGNITE,Bug,Critical,2015-12-17 13:37:05,4
12922674,ScanQuery without a filter triggers object's deserialization on the server side,"The issue is reproduced on version 1.4 where legacy PortableMarshaller is used. However, I'm quiet sure that the issue happens when BinaryMarshaller is used as well in 1.5.

1) Start a server using ignite.sh/bat

2) Create a simple app, that uses binary or portable marshaller, creates a cache dynamically and executes a ScanQuery like below
{{int size=employees1.query(new ScanQuery()).getAll().size();}}

3) As you see the query doesn't use any filters. However on the server side some filter is still being checked {{org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager$5.checkPredicate(GridCacheQueryManager.java:963)}} which makes the server to deserialize a value.

According to the stack trace there is some internal filter that triggered checkPredicate function - filter=o.a.i.i.processors.cache.IgniteCacheProxy$1@3224ff7b.

{noformat}
[11:05:22,725][SEVERE][ignite-#25%sys-null%][GridCacheDistributedQueryManager] <testCache> Failed to run query [qry=GridCacheQueryInfo [loc=false, trans=null, rdc=null, qry=GridCacheQueryAdapter [type=SCAN, clsName=null, clause=null, filter=o.a.i.i.processors.cache.IgniteCacheProxy$1@3224ff7b, part=null, incMeta=false, metrics=null, pageSize=1024, timeout=0, keepAll=false, incBackups=false, dedup=false, prj=null, keepPortable=false, subjId=c6aeb542-1693-4b5f-89db-96db50e3435f, taskHash=0], locFut=null, sndId=c6aeb542-1693-4b5f-89db-96db50e3435f, reqId=14, incMeta=false, all=false], node=209c237a-9e33-4d05-abe4-bbc14f93c439]
class org.apache.ignite.IgniteCheckedException: **********************.SubMessageB
at org.apache.ignite.internal.util.IgniteUtils.cast(IgniteUtils.java:6979)
at org.apache.ignite.internal.util.future.GridFutureAdapter.get0(GridFutureAdapter.java:166)
at org.apache.ignite.internal.util.future.GridFutureAdapter.get(GridFutureAdapter.java:115)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager$CachedResult.iterator(GridCacheQueryManager.java:2784)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.runQuery(GridCacheQueryManager.java:1376)
at org.apache.ignite.internal.processors.cache.query.GridCacheDistributedQueryManager.processQueryRequest(GridCacheDistributedQueryManager.java:226)
at org.apache.ignite.internal.processors.cache.query.GridCacheDistributedQueryManager$2.apply(GridCacheDistributedQueryManager.java:105)
at org.apache.ignite.internal.processors.cache.query.GridCacheDistributedQueryManager$2.apply(GridCacheDistributedQueryManager.java:103)
at org.apache.ignite.internal.processors.cache.GridCacheIoManager.processMessage(GridCacheIoManager.java:580)
at org.apache.ignite.internal.processors.cache.GridCacheIoManager.onMessage0(GridCacheIoManager.java:280)
at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:198)
at org.apache.ignite.internal.processors.cache.GridCacheIoManager.access$000(GridCacheIoManager.java:77)
at org.apache.ignite.internal.processors.cache.GridCacheIoManager$1.onMessage(GridCacheIoManager.java:160)
at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:811)
at org.apache.ignite.internal.managers.communication.GridIoManager.access$1500(GridIoManager.java:106)
at org.apache.ignite.internal.managers.communication.GridIoManager$5.run(GridIoManager.java:774)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.ClassNotFoundException: **********************.SubMessageB
at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Class.java:348)
at org.apache.ignite.internal.util.IgniteUtils.forName(IgniteUtils.java:8137)
at org.apache.ignite.internal.MarshallerContextAdapter.getClass(MarshallerContextAdapter.java:185)
at org.gridgain.grid.internal.util.portable.GridPortableContext.descriptorForTypeId(GridPortableContext.java:510)
at org.gridgain.grid.internal.util.portable.GridPortableReaderImpl.deserialize(GridPortableReaderImpl.java:2092)
at org.gridgain.grid.internal.util.portable.GridPortableObjectImpl.deserialize(GridPortableObjectImpl.java:262)
at org.gridgain.grid.internal.processors.portable.CacheObjectEntContext.unwrapPortable(CacheObjectEntContext.java:165)
at org.gridgain.grid.internal.processors.portable.CacheObjectEntContext.unwrapPortableIfNeeded(CacheObjectEntContext.java:65)
at org.apache.ignite.internal.processors.cache.GridCacheContext.unwrapPortableIfNeeded(GridCacheContext.java:1759)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager$5.checkPredicate(GridCacheQueryManager.java:963)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager$5.advance(GridCacheQueryManager.java:931)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager$5.<init>(GridCacheQueryManager.java:876)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.scanIterator(GridCacheQueryManager.java:831)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.executeQuery(GridCacheQueryManager.java:595)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.queryResult(GridCacheQueryManager.java:1673)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.queryResult(GridCacheQueryManager.java:1640)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.runQuery(GridCacheQueryManager.java:1371)
... 14 more
[11:05:22,736][SEVERE][ignite-#25%sys-null%][GridCacheDistributedQueryManager] <testCache> Failed to close iterator.
class org.apache.ignite.IgniteCheckedException: ********************************.SubMessageB
at org.apache.ignite.internal.util.IgniteUtils.cast(IgniteUtils.java:6979)
at org.apache.ignite.internal.util.future.GridFutureAdapter.get0(GridFutureAdapter.java:166)
at org.apache.ignite.internal.util.future.GridFutureAdapter.get(GridFutureAdapter.java:115)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager$CachedResult.closeIfNotShared(GridCacheQueryManager.java:2724)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.removeQueryResult(GridCacheQueryManager.java:1707)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.runQuery(GridCacheQueryManager.java:1594)
at org.apache.ignite.internal.processors.cache.query.GridCacheDistributedQueryManager.processQueryRequest(GridCacheDistributedQueryManager.java:226)
at org.apache.ignite.internal.processors.cache.query.GridCacheDistributedQueryManager$2.apply(GridCacheDistributedQueryManager.java:105)
at org.apache.ignite.internal.processors.cache.query.GridCacheDistributedQueryManager$2.apply(GridCacheDistributedQueryManager.java:103)
at org.apache.ignite.internal.processors.cache.GridCacheIoManager.processMessage(GridCacheIoManager.java:580)
at org.apache.ignite.internal.processors.cache.GridCacheIoManager.onMessage0(GridCacheIoManager.java:280)
at org.apache.ignite.internal.processors.cache.GridCacheIoManager.handleMessage(GridCacheIoManager.java:198)
at org.apache.ignite.internal.processors.cache.GridCacheIoManager.access$000(GridCacheIoManager.java:77)
at org.apache.ignite.internal.processors.cache.GridCacheIoManager$1.onMessage(GridCacheIoManager.java:160)
at org.apache.ignite.internal.managers.communication.GridIoManager.processRegularMessage0(GridIoManager.java:811)
at org.apache.ignite.internal.managers.communication.GridIoManager.access$1500(GridIoManager.java:106)
at org.apache.ignite.internal.managers.communication.GridIoManager$5.run(GridIoManager.java:774)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.ClassNotFoundException: ******************************.SubMessageB
at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Class.java:348)
at org.apache.ignite.internal.util.IgniteUtils.forName(IgniteUtils.java:8137)
at org.apache.ignite.internal.MarshallerContextAdapter.getClass(MarshallerContextAdapter.java:185)
at org.gridgain.grid.internal.util.portable.GridPortableContext.descriptorForTypeId(GridPortableContext.java:510)
at org.gridgain.grid.internal.util.portable.GridPortableReaderImpl.deserialize(GridPortableReaderImpl.java:2092)
at org.gridgain.grid.internal.util.portable.GridPortableObjectImpl.deserialize(GridPortableObjectImpl.java:262)
at org.gridgain.grid.internal.processors.portable.CacheObjectEntContext.unwrapPortable(CacheObjectEntContext.java:165)
at org.gridgain.grid.internal.processors.portable.CacheObjectEntContext.unwrapPortableIfNeeded(CacheObjectEntContext.java:65)
at org.apache.ignite.internal.processors.cache.GridCacheContext.unwrapPortableIfNeeded(GridCacheContext.java:1759)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager$5.checkPredicate(GridCacheQueryManager.java:963)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager$5.advance(GridCacheQueryManager.java:931)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager$5.<init>(GridCacheQueryManager.java:876)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.scanIterator(GridCacheQueryManager.java:831)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.executeQuery(GridCacheQueryManager.java:595)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.queryResult(GridCacheQueryManager.java:1673)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.queryResult(GridCacheQueryManager.java:1640)
at org.apache.ignite.internal.processors.cache.query.GridCacheQueryManager.runQuery(GridCacheQueryManager.java:1371)
... 14 more
^C[11:05:50] Ignite node stopped OK [uptime=00:00:45:276]
{noformat}",newbie,['cache'],IGNITE,Bug,Critical,2015-12-17 11:11:55,2
12913541,Implement IgfsSecondaryFileSystem using java.io.File API,"This will allow to persist IGFS data on the local disk. Currently we have only Hadoop-based implementation.

Corresponding user thread: http://apache-ignite-users.70518.x6.nabble.com/IGFS-backed-by-persistence-on-physical-filesystem-td1882.html",roadmap,['igfs'],IGNITE,Improvement,Major,2015-11-17 02:50:23,4
12904870,CPP: Implement basic API for user entry point lookup,Need to implement modules loading logic as well as mechanism that will allow user to register his callable classes on the module loading.,cpp,['platforms'],IGNITE,Task,Major,2015-10-14 13:38:06,3
12902985,.NET: Introduce native logging facility.,"This is pretty serious usability issue. Currently Ignite produces logs using Java ""log4j"" library. While naural for Java environment, this is somewhat alien for Windows users. 

We need to investigate ability to hack into normal .Net logging frameworks. This include both native Windows APIs (e.g. events), and widely-used .Net loggers.",.net roadmap,['platforms'],IGNITE,Task,Critical,2015-10-07 13:18:29,4
12902981,.NET: Ensure that Ignite works on Mono platform,"*NOTE*: Targeted for 1.6, but could be moved even further in case of tight release schedule.

*Goal*
As Microsoft is moving .Net towards open standards, Mono receives more an more attention. 

We need to ensure that our product works fine on this platform. This includes both Windows, Linux and (possibly) Mac environments.

*Tasks*
- Ensure that Ignite works with Mono on Windows. This is the easiest task because we only need to re-compile .Net part.
- Ensure that Ignite works with Mono on Linux. This will require alternate build procedure because CPP recompilation will be required as well.
- Create relevant TC builds.",.net,['platforms'],IGNITE,Task,Major,2015-10-07 13:14:17,0
12863808,CPP: Support enums,Needed to be able to interact with Java/.Net enums. Probably this can be done with some extension structure which will provide type ID for the enum.,cpp,['platforms'],IGNITE,Sub-task,Major,2015-09-14 08:39:33,3
12863414,.NET: Add Java stack trace to IgniteException,"Propagate java stack trace as a string in ExceptionUtils.GetException and write it to a new field in IgniteException class.

This will simplify debugging for us both locally and when getting error reports from clients.",.net,['platforms'],IGNITE,Task,Major,2015-09-11 14:44:34,0
12863408,.Net: Use struct with fixed layout for InteropMemory operations.,This will decrease probability of bugs caused by pointer arithmetics.,.net,['platforms'],IGNITE,Task,Minor,2015-09-11 14:32:48,4
12857110,JobStealingCollisionSpi never sends jobs to a node that joined after task was executed,"Corresponding user thread (contains detailed description of the scenario that doesn't work): http://apache-ignite-users.70518.x6.nabble.com/Dynamic-ComputeTask-distribution-with-new-nodes-td997.html

Essentially, {{JobStealingCollisionSpi}} always skips jobs that are not in task topology (see line 713). Task topology is static and created when task is executed, so newly joined node can't steal jobs. I think it should be able to do this if it satisfies initial cluster group predicate.",user-request,['compute'],IGNITE,Bug,Major,2015-08-19 04:44:48,1
12824225,[Test] HadoopHashMapSelfTest # testAllocation was disabled.,HadoopHashMapSelfTest # testAllocation was disabled. It has to be fixed or removed.,Muted_test,['hadoop'],IGNITE,Bug,Major,2015-04-27 10:21:09,4
12824223,[Test] HadoopIgfs20FileSystemAbstractSelfTest # testRenameDirectoryIfDstPathExists was disabled.,HadoopIgfs20FileSystemAbstractSelfTest # testRenameDirectoryIfDstPathExists was disabled. It has to be fixed or removed.,Muted_test,['hadoop'],IGNITE,Bug,Major,2015-04-27 10:18:14,4
12824219,[Test] IgfsModesSelfTest # testPropagationDualAsync was disabled,IgfsModesSelfTest # testPropagationDualAsync was disabled. It has to be fixed or removed.,Muted_test,['hadoop'],IGNITE,Bug,Major,2015-04-27 10:05:26,4
12785580,[Test] GridGgfsAbstractSelfTest.testFormat() fails on TC.,"The problem is that format() doesn't clean all previously written data.

See GG-8578 (the issue was closed, but stay reproducible)",Muted_test,['hadoop'],IGNITE,Bug,Major,2015-03-25 16:27:30,4
12783473,TTL is not updated for reader when entry is accessed on backup,"When ttl is updated, readers are recorded locally and update is then sent based on collected data. When get is performed on backup, readers are empty, so near readers are not updated.

{{IgniteCacheAtomicExpiryPolicyTest.testNearAccess}} fails.",Muted_test,['cache'],IGNITE,Bug,Major,2015-03-20 02:05:52,1
